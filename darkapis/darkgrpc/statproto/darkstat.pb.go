// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.5
// 	protoc        v3.12.4
// source: darkstat.proto

package statproto

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// The request message containing the user's name.
type Empty struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Empty) Reset() {
	*x = Empty{}
	mi := &file_darkstat_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Empty) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Empty) ProtoMessage() {}

func (x *Empty) ProtoReflect() protoreflect.Message {
	mi := &file_darkstat_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Empty.ProtoReflect.Descriptor instead.
func (*Empty) Descriptor() ([]byte, []int) {
	return file_darkstat_proto_rawDescGZIP(), []int{0}
}

type GetInfocardsInput struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Nicknames     []string               `protobuf:"bytes,1,rep,name=nicknames,proto3" json:"nicknames,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetInfocardsInput) Reset() {
	*x = GetInfocardsInput{}
	mi := &file_darkstat_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetInfocardsInput) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetInfocardsInput) ProtoMessage() {}

func (x *GetInfocardsInput) ProtoReflect() protoreflect.Message {
	mi := &file_darkstat_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetInfocardsInput.ProtoReflect.Descriptor instead.
func (*GetInfocardsInput) Descriptor() ([]byte, []int) {
	return file_darkstat_proto_rawDescGZIP(), []int{1}
}

func (x *GetInfocardsInput) GetNicknames() []string {
	if x != nil {
		return x.Nicknames
	}
	return nil
}

type GetInfocardsReply struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Answers       []*GetInfocardAnswer   `protobuf:"bytes,1,rep,name=answers,proto3" json:"answers,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetInfocardsReply) Reset() {
	*x = GetInfocardsReply{}
	mi := &file_darkstat_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetInfocardsReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetInfocardsReply) ProtoMessage() {}

func (x *GetInfocardsReply) ProtoReflect() protoreflect.Message {
	mi := &file_darkstat_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetInfocardsReply.ProtoReflect.Descriptor instead.
func (*GetInfocardsReply) Descriptor() ([]byte, []int) {
	return file_darkstat_proto_rawDescGZIP(), []int{2}
}

func (x *GetInfocardsReply) GetAnswers() []*GetInfocardAnswer {
	if x != nil {
		return x.Answers
	}
	return nil
}

type GetInfocardAnswer struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Query         string                 `protobuf:"bytes,1,opt,name=query,proto3" json:"query,omitempty"`
	Infocard      *Infocard              `protobuf:"bytes,2,opt,name=infocard,proto3,oneof" json:"infocard,omitempty"`
	Error         *string                `protobuf:"bytes,3,opt,name=error,proto3,oneof" json:"error,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetInfocardAnswer) Reset() {
	*x = GetInfocardAnswer{}
	mi := &file_darkstat_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetInfocardAnswer) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetInfocardAnswer) ProtoMessage() {}

func (x *GetInfocardAnswer) ProtoReflect() protoreflect.Message {
	mi := &file_darkstat_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetInfocardAnswer.ProtoReflect.Descriptor instead.
func (*GetInfocardAnswer) Descriptor() ([]byte, []int) {
	return file_darkstat_proto_rawDescGZIP(), []int{3}
}

func (x *GetInfocardAnswer) GetQuery() string {
	if x != nil {
		return x.Query
	}
	return ""
}

func (x *GetInfocardAnswer) GetInfocard() *Infocard {
	if x != nil {
		return x.Infocard
	}
	return nil
}

func (x *GetInfocardAnswer) GetError() string {
	if x != nil && x.Error != nil {
		return *x.Error
	}
	return ""
}

type Infocard struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Lines         []*InfocardLine        `protobuf:"bytes,1,rep,name=lines,proto3" json:"lines,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Infocard) Reset() {
	*x = Infocard{}
	mi := &file_darkstat_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Infocard) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Infocard) ProtoMessage() {}

func (x *Infocard) ProtoReflect() protoreflect.Message {
	mi := &file_darkstat_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Infocard.ProtoReflect.Descriptor instead.
func (*Infocard) Descriptor() ([]byte, []int) {
	return file_darkstat_proto_rawDescGZIP(), []int{4}
}

func (x *Infocard) GetLines() []*InfocardLine {
	if x != nil {
		return x.Lines
	}
	return nil
}

type InfocardLine struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Phrases       []*InfocardPhrase      `protobuf:"bytes,1,rep,name=phrases,proto3" json:"phrases,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *InfocardLine) Reset() {
	*x = InfocardLine{}
	mi := &file_darkstat_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *InfocardLine) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InfocardLine) ProtoMessage() {}

func (x *InfocardLine) ProtoReflect() protoreflect.Message {
	mi := &file_darkstat_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InfocardLine.ProtoReflect.Descriptor instead.
func (*InfocardLine) Descriptor() ([]byte, []int) {
	return file_darkstat_proto_rawDescGZIP(), []int{5}
}

func (x *InfocardLine) GetPhrases() []*InfocardPhrase {
	if x != nil {
		return x.Phrases
	}
	return nil
}

type InfocardPhrase struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Phrase        string                 `protobuf:"bytes,1,opt,name=phrase,proto3" json:"phrase,omitempty"`
	Link          *string                `protobuf:"bytes,2,opt,name=link,proto3,oneof" json:"link,omitempty"`
	Bold          bool                   `protobuf:"varint,3,opt,name=bold,proto3" json:"bold,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *InfocardPhrase) Reset() {
	*x = InfocardPhrase{}
	mi := &file_darkstat_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *InfocardPhrase) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InfocardPhrase) ProtoMessage() {}

func (x *InfocardPhrase) ProtoReflect() protoreflect.Message {
	mi := &file_darkstat_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InfocardPhrase.ProtoReflect.Descriptor instead.
func (*InfocardPhrase) Descriptor() ([]byte, []int) {
	return file_darkstat_proto_rawDescGZIP(), []int{6}
}

func (x *InfocardPhrase) GetPhrase() string {
	if x != nil {
		return x.Phrase
	}
	return ""
}

func (x *InfocardPhrase) GetLink() string {
	if x != nil && x.Link != nil {
		return *x.Link
	}
	return ""
}

func (x *InfocardPhrase) GetBold() bool {
	if x != nil {
		return x.Bold
	}
	return false
}

type HealthReply struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	IsHealthy     bool                   `protobuf:"varint,1,opt,name=is_healthy,json=isHealthy,proto3" json:"is_healthy,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *HealthReply) Reset() {
	*x = HealthReply{}
	mi := &file_darkstat_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *HealthReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HealthReply) ProtoMessage() {}

func (x *HealthReply) ProtoReflect() protoreflect.Message {
	mi := &file_darkstat_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HealthReply.ProtoReflect.Descriptor instead.
func (*HealthReply) Descriptor() ([]byte, []int) {
	return file_darkstat_proto_rawDescGZIP(), []int{7}
}

func (x *HealthReply) GetIsHealthy() bool {
	if x != nil {
		return x.IsHealthy
	}
	return false
}

type GetEquipmentInput struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// "insert 'true' if wish to include market goods under 'market goods' key or not. Such data can add a lot of extra weight"
	IncludeMarketGoods bool `protobuf:"varint,1,opt,name=include_market_goods,json=includeMarketGoods,proto3" json:"include_market_goods,omitempty"`
	// insert 'true' if wish to include tech compatibility data. can be adding a lot of extra weight
	IncludeTechCompat bool `protobuf:"varint,2,opt,name=include_tech_compat,json=includeTechCompat,proto3" json:"include_tech_compat,omitempty"`
	// Apply filtering same as darkstat does by default for its tab. Usually means showing only items that can be bought/crafted/or found
	FilterToUseful bool `protobuf:"varint,3,opt,name=filter_to_useful,json=filterToUseful,proto3" json:"filter_to_useful,omitempty"`
	// filters by item nicknames
	FilterNicknames []string `protobuf:"bytes,4,rep,name=filter_nicknames,json=filterNicknames,proto3" json:"filter_nicknames,omitempty"`
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *GetEquipmentInput) Reset() {
	*x = GetEquipmentInput{}
	mi := &file_darkstat_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetEquipmentInput) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetEquipmentInput) ProtoMessage() {}

func (x *GetEquipmentInput) ProtoReflect() protoreflect.Message {
	mi := &file_darkstat_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetEquipmentInput.ProtoReflect.Descriptor instead.
func (*GetEquipmentInput) Descriptor() ([]byte, []int) {
	return file_darkstat_proto_rawDescGZIP(), []int{8}
}

func (x *GetEquipmentInput) GetIncludeMarketGoods() bool {
	if x != nil {
		return x.IncludeMarketGoods
	}
	return false
}

func (x *GetEquipmentInput) GetIncludeTechCompat() bool {
	if x != nil {
		return x.IncludeTechCompat
	}
	return false
}

func (x *GetEquipmentInput) GetFilterToUseful() bool {
	if x != nil {
		return x.FilterToUseful
	}
	return false
}

func (x *GetEquipmentInput) GetFilterNicknames() []string {
	if x != nil {
		return x.FilterNicknames
	}
	return nil
}

type GetGunsInput struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// "insert 'true' if wish to include market goods under 'market goods' key or not. Such data can add a lot of extra weight"
	IncludeMarketGoods bool `protobuf:"varint,1,opt,name=include_market_goods,json=includeMarketGoods,proto3" json:"include_market_goods,omitempty"`
	IncludeTechCompat  bool `protobuf:"varint,2,opt,name=include_tech_compat,json=includeTechCompat,proto3" json:"include_tech_compat,omitempty"`
	// Apply filtering same as darkstat does by default for its tab. Usually means showing only items that can be bought/crafted/or found
	FilterToUseful       bool `protobuf:"varint,3,opt,name=filter_to_useful,json=filterToUseful,proto3" json:"filter_to_useful,omitempty"`
	IncludeDamageBonuses bool `protobuf:"varint,4,opt,name=include_damage_bonuses,json=includeDamageBonuses,proto3" json:"include_damage_bonuses,omitempty"`
	// filters by item nicknames
	FilterNicknames []string `protobuf:"bytes,5,rep,name=filter_nicknames,json=filterNicknames,proto3" json:"filter_nicknames,omitempty"`
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *GetGunsInput) Reset() {
	*x = GetGunsInput{}
	mi := &file_darkstat_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetGunsInput) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetGunsInput) ProtoMessage() {}

func (x *GetGunsInput) ProtoReflect() protoreflect.Message {
	mi := &file_darkstat_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetGunsInput.ProtoReflect.Descriptor instead.
func (*GetGunsInput) Descriptor() ([]byte, []int) {
	return file_darkstat_proto_rawDescGZIP(), []int{9}
}

func (x *GetGunsInput) GetIncludeMarketGoods() bool {
	if x != nil {
		return x.IncludeMarketGoods
	}
	return false
}

func (x *GetGunsInput) GetIncludeTechCompat() bool {
	if x != nil {
		return x.IncludeTechCompat
	}
	return false
}

func (x *GetGunsInput) GetFilterToUseful() bool {
	if x != nil {
		return x.FilterToUseful
	}
	return false
}

func (x *GetGunsInput) GetIncludeDamageBonuses() bool {
	if x != nil {
		return x.IncludeDamageBonuses
	}
	return false
}

func (x *GetGunsInput) GetFilterNicknames() []string {
	if x != nil {
		return x.FilterNicknames
	}
	return nil
}

type GetBasesInput struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// "insert 'true' if wish to include market goods under 'market goods' key or not. Such data can add a lot of extra weight"
	IncludeMarketGoods bool `protobuf:"varint,1,opt,name=include_market_goods,json=includeMarketGoods,proto3" json:"include_market_goods,omitempty"`
	// Apply filtering same as darkstat does by default for its tab. Usually means showing only items that can be bought/crafted/or found
	FilterToUseful bool `protobuf:"varint,2,opt,name=filter_to_useful,json=filterToUseful,proto3" json:"filter_to_useful,omitempty"`
	// filters by base nicknames
	FilterNicknames []string `protobuf:"bytes,3,rep,name=filter_nicknames,json=filterNicknames,proto3" json:"filter_nicknames,omitempty"`
	// filters market goods to specific category. valid categories are written in market goods in same named attribute.
	FilterMarketGoodCategory []string `protobuf:"bytes,4,rep,name=filter_market_good_category,json=filterMarketGoodCategory,proto3" json:"filter_market_good_category,omitempty"`
	unknownFields            protoimpl.UnknownFields
	sizeCache                protoimpl.SizeCache
}

func (x *GetBasesInput) Reset() {
	*x = GetBasesInput{}
	mi := &file_darkstat_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetBasesInput) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetBasesInput) ProtoMessage() {}

func (x *GetBasesInput) ProtoReflect() protoreflect.Message {
	mi := &file_darkstat_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetBasesInput.ProtoReflect.Descriptor instead.
func (*GetBasesInput) Descriptor() ([]byte, []int) {
	return file_darkstat_proto_rawDescGZIP(), []int{10}
}

func (x *GetBasesInput) GetIncludeMarketGoods() bool {
	if x != nil {
		return x.IncludeMarketGoods
	}
	return false
}

func (x *GetBasesInput) GetFilterToUseful() bool {
	if x != nil {
		return x.FilterToUseful
	}
	return false
}

func (x *GetBasesInput) GetFilterNicknames() []string {
	if x != nil {
		return x.FilterNicknames
	}
	return nil
}

func (x *GetBasesInput) GetFilterMarketGoodCategory() []string {
	if x != nil {
		return x.FilterMarketGoodCategory
	}
	return nil
}

type GetTractorsInput struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// By default not outputing market goods in case u wish to save network
	IncludeMarketGoods bool `protobuf:"varint,1,opt,name=include_market_goods,json=includeMarketGoods,proto3" json:"include_market_goods,omitempty"`
	// Apply filtering same as darkstat does by default for its tab. Usually means showing only items that can be bought/crafted/or found
	FilterToUseful bool `protobuf:"varint,2,opt,name=filter_to_useful,json=filterToUseful,proto3" json:"filter_to_useful,omitempty"`
	// filters by item nicknames
	FilterNicknames []string `protobuf:"bytes,3,rep,name=filter_nicknames,json=filterNicknames,proto3" json:"filter_nicknames,omitempty"`
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *GetTractorsInput) Reset() {
	*x = GetTractorsInput{}
	mi := &file_darkstat_proto_msgTypes[11]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetTractorsInput) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetTractorsInput) ProtoMessage() {}

func (x *GetTractorsInput) ProtoReflect() protoreflect.Message {
	mi := &file_darkstat_proto_msgTypes[11]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetTractorsInput.ProtoReflect.Descriptor instead.
func (*GetTractorsInput) Descriptor() ([]byte, []int) {
	return file_darkstat_proto_rawDescGZIP(), []int{11}
}

func (x *GetTractorsInput) GetIncludeMarketGoods() bool {
	if x != nil {
		return x.IncludeMarketGoods
	}
	return false
}

func (x *GetTractorsInput) GetFilterToUseful() bool {
	if x != nil {
		return x.FilterToUseful
	}
	return false
}

func (x *GetTractorsInput) GetFilterNicknames() []string {
	if x != nil {
		return x.FilterNicknames
	}
	return nil
}

type GetBasesReply struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Items         []*Base                `protobuf:"bytes,1,rep,name=items,proto3" json:"items,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetBasesReply) Reset() {
	*x = GetBasesReply{}
	mi := &file_darkstat_proto_msgTypes[12]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetBasesReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetBasesReply) ProtoMessage() {}

func (x *GetBasesReply) ProtoReflect() protoreflect.Message {
	mi := &file_darkstat_proto_msgTypes[12]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetBasesReply.ProtoReflect.Descriptor instead.
func (*GetBasesReply) Descriptor() ([]byte, []int) {
	return file_darkstat_proto_rawDescGZIP(), []int{12}
}

func (x *GetBasesReply) GetItems() []*Base {
	if x != nil {
		return x.Items
	}
	return nil
}

// The response message containing the greetings
type Base struct {
	state                  protoimpl.MessageState `protogen:"open.v1"`
	Name                   string                 `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Archetypes             []string               `protobuf:"bytes,2,rep,name=archetypes,proto3" json:"archetypes,omitempty"`
	Nickname               string                 `protobuf:"bytes,3,opt,name=nickname,proto3" json:"nickname,omitempty"`
	FactionName            string                 `protobuf:"bytes,5,opt,name=faction_name,json=factionName,proto3" json:"faction_name,omitempty"`
	SystemName             string                 `protobuf:"bytes,6,opt,name=system_name,json=systemName,proto3" json:"system_name,omitempty"`
	SystemNickname         string                 `protobuf:"bytes,7,opt,name=system_nickname,json=systemNickname,proto3" json:"system_nickname,omitempty"`
	RegionName             string                 `protobuf:"bytes,9,opt,name=region_name,json=regionName,proto3" json:"region_name,omitempty"`
	StridName              int64                  `protobuf:"varint,10,opt,name=strid_name,json=stridName,proto3" json:"strid_name,omitempty"`
	InfocardId             int64                  `protobuf:"varint,11,opt,name=infocard_id,json=infocardId,proto3" json:"infocard_id,omitempty"`
	File                   string                 `protobuf:"bytes,12,opt,name=file,proto3" json:"file,omitempty"`
	BgcsBaseRunBy          string                 `protobuf:"bytes,13,opt,name=bgcs_base_run_by,json=bgcsBaseRunBy,proto3" json:"bgcs_base_run_by,omitempty"`
	Pos                    *Pos                   `protobuf:"bytes,14,opt,name=pos,proto3" json:"pos,omitempty"`
	SectorCoord            string                 `protobuf:"bytes,15,opt,name=sector_coord,json=sectorCoord,proto3" json:"sector_coord,omitempty"`
	IsTransportUnreachable bool                   `protobuf:"varint,16,opt,name=is_transport_unreachable,json=isTransportUnreachable,proto3" json:"is_transport_unreachable,omitempty"`
	IsReachhable           bool                   `protobuf:"varint,18,opt,name=is_reachhable,json=isReachhable,proto3" json:"is_reachhable,omitempty"`
	IsPob                  bool                   `protobuf:"varint,19,opt,name=IsPob,proto3" json:"IsPob,omitempty"`
	MarketGoods            []*MarketGood          `protobuf:"bytes,20,rep,name=market_goods,json=marketGoods,proto3" json:"market_goods,omitempty"`
	unknownFields          protoimpl.UnknownFields
	sizeCache              protoimpl.SizeCache
}

func (x *Base) Reset() {
	*x = Base{}
	mi := &file_darkstat_proto_msgTypes[13]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Base) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Base) ProtoMessage() {}

func (x *Base) ProtoReflect() protoreflect.Message {
	mi := &file_darkstat_proto_msgTypes[13]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Base.ProtoReflect.Descriptor instead.
func (*Base) Descriptor() ([]byte, []int) {
	return file_darkstat_proto_rawDescGZIP(), []int{13}
}

func (x *Base) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Base) GetArchetypes() []string {
	if x != nil {
		return x.Archetypes
	}
	return nil
}

func (x *Base) GetNickname() string {
	if x != nil {
		return x.Nickname
	}
	return ""
}

func (x *Base) GetFactionName() string {
	if x != nil {
		return x.FactionName
	}
	return ""
}

func (x *Base) GetSystemName() string {
	if x != nil {
		return x.SystemName
	}
	return ""
}

func (x *Base) GetSystemNickname() string {
	if x != nil {
		return x.SystemNickname
	}
	return ""
}

func (x *Base) GetRegionName() string {
	if x != nil {
		return x.RegionName
	}
	return ""
}

func (x *Base) GetStridName() int64 {
	if x != nil {
		return x.StridName
	}
	return 0
}

func (x *Base) GetInfocardId() int64 {
	if x != nil {
		return x.InfocardId
	}
	return 0
}

func (x *Base) GetFile() string {
	if x != nil {
		return x.File
	}
	return ""
}

func (x *Base) GetBgcsBaseRunBy() string {
	if x != nil {
		return x.BgcsBaseRunBy
	}
	return ""
}

func (x *Base) GetPos() *Pos {
	if x != nil {
		return x.Pos
	}
	return nil
}

func (x *Base) GetSectorCoord() string {
	if x != nil {
		return x.SectorCoord
	}
	return ""
}

func (x *Base) GetIsTransportUnreachable() bool {
	if x != nil {
		return x.IsTransportUnreachable
	}
	return false
}

func (x *Base) GetIsReachhable() bool {
	if x != nil {
		return x.IsReachhable
	}
	return false
}

func (x *Base) GetIsPob() bool {
	if x != nil {
		return x.IsPob
	}
	return false
}

func (x *Base) GetMarketGoods() []*MarketGood {
	if x != nil {
		return x.MarketGoods
	}
	return nil
}

type MiningInfo struct {
	state                 protoimpl.MessageState `protogen:"open.v1"`
	DynamicLootMin        int64                  `protobuf:"varint,1,opt,name=dynamic_loot_min,json=dynamicLootMin,proto3" json:"dynamic_loot_min,omitempty"`
	DynamicLootMax        int64                  `protobuf:"varint,2,opt,name=dynamic_loot_max,json=dynamicLootMax,proto3" json:"dynamic_loot_max,omitempty"`
	DynamicLootDifficulty int64                  `protobuf:"varint,3,opt,name=dynamic_loot_difficulty,json=dynamicLootDifficulty,proto3" json:"dynamic_loot_difficulty,omitempty"`
	MinedGood             *MarketGood            `protobuf:"bytes,4,opt,name=mined_good,json=minedGood,proto3,oneof" json:"mined_good,omitempty"`
	unknownFields         protoimpl.UnknownFields
	sizeCache             protoimpl.SizeCache
}

func (x *MiningInfo) Reset() {
	*x = MiningInfo{}
	mi := &file_darkstat_proto_msgTypes[14]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MiningInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MiningInfo) ProtoMessage() {}

func (x *MiningInfo) ProtoReflect() protoreflect.Message {
	mi := &file_darkstat_proto_msgTypes[14]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MiningInfo.ProtoReflect.Descriptor instead.
func (*MiningInfo) Descriptor() ([]byte, []int) {
	return file_darkstat_proto_rawDescGZIP(), []int{14}
}

func (x *MiningInfo) GetDynamicLootMin() int64 {
	if x != nil {
		return x.DynamicLootMin
	}
	return 0
}

func (x *MiningInfo) GetDynamicLootMax() int64 {
	if x != nil {
		return x.DynamicLootMax
	}
	return 0
}

func (x *MiningInfo) GetDynamicLootDifficulty() int64 {
	if x != nil {
		return x.DynamicLootDifficulty
	}
	return 0
}

func (x *MiningInfo) GetMinedGood() *MarketGood {
	if x != nil {
		return x.MinedGood
	}
	return nil
}

type MarketGood struct {
	state                  protoimpl.MessageState `protogen:"open.v1"`
	Nickname               string                 `protobuf:"bytes,1,opt,name=nickname,proto3" json:"nickname,omitempty"`
	ShipNickname           string                 `protobuf:"bytes,2,opt,name=ship_nickname,json=shipNickname,proto3" json:"ship_nickname,omitempty"`
	Name                   string                 `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
	PriceBase              int64                  `protobuf:"varint,4,opt,name=price_base,json=priceBase,proto3" json:"price_base,omitempty"`
	HpType                 string                 `protobuf:"bytes,5,opt,name=hp_type,json=hpType,proto3" json:"hp_type,omitempty"`
	Category               string                 `protobuf:"bytes,6,opt,name=category,proto3" json:"category,omitempty"`
	LevelRequired          int64                  `protobuf:"varint,7,opt,name=level_required,json=levelRequired,proto3" json:"level_required,omitempty"`
	RepRequired            float64                `protobuf:"fixed64,8,opt,name=rep_required,json=repRequired,proto3" json:"rep_required,omitempty"`
	PriceBaseBuysFor       *int64                 `protobuf:"varint,9,opt,name=price_base_buys_for,json=priceBaseBuysFor,proto3,oneof" json:"price_base_buys_for,omitempty"`
	PriceBaseSellsFor      int64                  `protobuf:"varint,10,opt,name=price_base_sells_for,json=priceBaseSellsFor,proto3" json:"price_base_sells_for,omitempty"`
	Volume                 float64                `protobuf:"fixed64,11,opt,name=volume,proto3" json:"volume,omitempty"`
	ShipClass              int64                  `protobuf:"varint,12,opt,name=ship_class,json=shipClass,proto3" json:"ship_class,omitempty"`
	BaseSells              bool                   `protobuf:"varint,13,opt,name=base_sells,json=baseSells,proto3" json:"base_sells,omitempty"`
	IsServerSideOverride   bool                   `protobuf:"varint,14,opt,name=is_server_side_override,json=isServerSideOverride,proto3" json:"is_server_side_override,omitempty"`
	NotBuyable             bool                   `protobuf:"varint,15,opt,name=not_buyable,json=notBuyable,proto3" json:"not_buyable,omitempty"`
	IsTransportUnreachable bool                   `protobuf:"varint,16,opt,name=is_transport_unreachable,json=isTransportUnreachable,proto3" json:"is_transport_unreachable,omitempty"`
	BaseInfo               *BaseInfo              `protobuf:"bytes,17,opt,name=base_info,json=baseInfo,proto3" json:"base_info,omitempty"`
	unknownFields          protoimpl.UnknownFields
	sizeCache              protoimpl.SizeCache
}

func (x *MarketGood) Reset() {
	*x = MarketGood{}
	mi := &file_darkstat_proto_msgTypes[15]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MarketGood) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MarketGood) ProtoMessage() {}

func (x *MarketGood) ProtoReflect() protoreflect.Message {
	mi := &file_darkstat_proto_msgTypes[15]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MarketGood.ProtoReflect.Descriptor instead.
func (*MarketGood) Descriptor() ([]byte, []int) {
	return file_darkstat_proto_rawDescGZIP(), []int{15}
}

func (x *MarketGood) GetNickname() string {
	if x != nil {
		return x.Nickname
	}
	return ""
}

func (x *MarketGood) GetShipNickname() string {
	if x != nil {
		return x.ShipNickname
	}
	return ""
}

func (x *MarketGood) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *MarketGood) GetPriceBase() int64 {
	if x != nil {
		return x.PriceBase
	}
	return 0
}

func (x *MarketGood) GetHpType() string {
	if x != nil {
		return x.HpType
	}
	return ""
}

func (x *MarketGood) GetCategory() string {
	if x != nil {
		return x.Category
	}
	return ""
}

func (x *MarketGood) GetLevelRequired() int64 {
	if x != nil {
		return x.LevelRequired
	}
	return 0
}

func (x *MarketGood) GetRepRequired() float64 {
	if x != nil {
		return x.RepRequired
	}
	return 0
}

func (x *MarketGood) GetPriceBaseBuysFor() int64 {
	if x != nil && x.PriceBaseBuysFor != nil {
		return *x.PriceBaseBuysFor
	}
	return 0
}

func (x *MarketGood) GetPriceBaseSellsFor() int64 {
	if x != nil {
		return x.PriceBaseSellsFor
	}
	return 0
}

func (x *MarketGood) GetVolume() float64 {
	if x != nil {
		return x.Volume
	}
	return 0
}

func (x *MarketGood) GetShipClass() int64 {
	if x != nil {
		return x.ShipClass
	}
	return 0
}

func (x *MarketGood) GetBaseSells() bool {
	if x != nil {
		return x.BaseSells
	}
	return false
}

func (x *MarketGood) GetIsServerSideOverride() bool {
	if x != nil {
		return x.IsServerSideOverride
	}
	return false
}

func (x *MarketGood) GetNotBuyable() bool {
	if x != nil {
		return x.NotBuyable
	}
	return false
}

func (x *MarketGood) GetIsTransportUnreachable() bool {
	if x != nil {
		return x.IsTransportUnreachable
	}
	return false
}

func (x *MarketGood) GetBaseInfo() *BaseInfo {
	if x != nil {
		return x.BaseInfo
	}
	return nil
}

type BaseInfo struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	BaseNickname  string                 `protobuf:"bytes,1,opt,name=base_nickname,json=baseNickname,proto3" json:"base_nickname,omitempty"`
	BaseName      string                 `protobuf:"bytes,2,opt,name=base_name,json=baseName,proto3" json:"base_name,omitempty"`
	SystemName    string                 `protobuf:"bytes,3,opt,name=system_name,json=systemName,proto3" json:"system_name,omitempty"`
	RegionName    string                 `protobuf:"bytes,4,opt,name=region_name,json=regionName,proto3" json:"region_name,omitempty"`
	FactionName   string                 `protobuf:"bytes,5,opt,name=faction_name,json=factionName,proto3" json:"faction_name,omitempty"`
	BasePos       *Pos                   `protobuf:"bytes,6,opt,name=base_pos,json=basePos,proto3" json:"base_pos,omitempty"`
	SectorCoord   string                 `protobuf:"bytes,7,opt,name=sector_coord,json=sectorCoord,proto3" json:"sector_coord,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *BaseInfo) Reset() {
	*x = BaseInfo{}
	mi := &file_darkstat_proto_msgTypes[16]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *BaseInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BaseInfo) ProtoMessage() {}

func (x *BaseInfo) ProtoReflect() protoreflect.Message {
	mi := &file_darkstat_proto_msgTypes[16]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BaseInfo.ProtoReflect.Descriptor instead.
func (*BaseInfo) Descriptor() ([]byte, []int) {
	return file_darkstat_proto_rawDescGZIP(), []int{16}
}

func (x *BaseInfo) GetBaseNickname() string {
	if x != nil {
		return x.BaseNickname
	}
	return ""
}

func (x *BaseInfo) GetBaseName() string {
	if x != nil {
		return x.BaseName
	}
	return ""
}

func (x *BaseInfo) GetSystemName() string {
	if x != nil {
		return x.SystemName
	}
	return ""
}

func (x *BaseInfo) GetRegionName() string {
	if x != nil {
		return x.RegionName
	}
	return ""
}

func (x *BaseInfo) GetFactionName() string {
	if x != nil {
		return x.FactionName
	}
	return ""
}

func (x *BaseInfo) GetBasePos() *Pos {
	if x != nil {
		return x.BasePos
	}
	return nil
}

func (x *BaseInfo) GetSectorCoord() string {
	if x != nil {
		return x.SectorCoord
	}
	return ""
}

type Pos struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	X             float64                `protobuf:"fixed64,1,opt,name=X,proto3" json:"X,omitempty"`
	Y             float64                `protobuf:"fixed64,2,opt,name=Y,proto3" json:"Y,omitempty"`
	Z             float64                `protobuf:"fixed64,3,opt,name=Z,proto3" json:"Z,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Pos) Reset() {
	*x = Pos{}
	mi := &file_darkstat_proto_msgTypes[17]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Pos) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Pos) ProtoMessage() {}

func (x *Pos) ProtoReflect() protoreflect.Message {
	mi := &file_darkstat_proto_msgTypes[17]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Pos.ProtoReflect.Descriptor instead.
func (*Pos) Descriptor() ([]byte, []int) {
	return file_darkstat_proto_rawDescGZIP(), []int{17}
}

func (x *Pos) GetX() float64 {
	if x != nil {
		return x.X
	}
	return 0
}

func (x *Pos) GetY() float64 {
	if x != nil {
		return x.Y
	}
	return 0
}

func (x *Pos) GetZ() float64 {
	if x != nil {
		return x.Z
	}
	return 0
}

type GetCommoditiesInput struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// To Include market goods, where the item is sold and bought or not. Adds a lot of extra weight to data
	//
	// Example: `false`
	IncludeMarketGoods bool `protobuf:"varint,1,opt,name=include_market_goods,json=includeMarketGoods,proto3" json:"include_market_goods,omitempty"`
	FilterToUseful     bool `protobuf:"varint,2,opt,name=filter_to_useful,json=filterToUseful,proto3" json:"filter_to_useful,omitempty"`
	// filters by item nicknames
	FilterNicknames []string `protobuf:"bytes,3,rep,name=filter_nicknames,json=filterNicknames,proto3" json:"filter_nicknames,omitempty"`
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *GetCommoditiesInput) Reset() {
	*x = GetCommoditiesInput{}
	mi := &file_darkstat_proto_msgTypes[18]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetCommoditiesInput) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetCommoditiesInput) ProtoMessage() {}

func (x *GetCommoditiesInput) ProtoReflect() protoreflect.Message {
	mi := &file_darkstat_proto_msgTypes[18]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetCommoditiesInput.ProtoReflect.Descriptor instead.
func (*GetCommoditiesInput) Descriptor() ([]byte, []int) {
	return file_darkstat_proto_rawDescGZIP(), []int{18}
}

func (x *GetCommoditiesInput) GetIncludeMarketGoods() bool {
	if x != nil {
		return x.IncludeMarketGoods
	}
	return false
}

func (x *GetCommoditiesInput) GetFilterToUseful() bool {
	if x != nil {
		return x.FilterToUseful
	}
	return false
}

func (x *GetCommoditiesInput) GetFilterNicknames() []string {
	if x != nil {
		return x.FilterNicknames
	}
	return nil
}

type GetCommoditiesReply struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Items         []*Commodity           `protobuf:"bytes,1,rep,name=items,proto3" json:"items,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetCommoditiesReply) Reset() {
	*x = GetCommoditiesReply{}
	mi := &file_darkstat_proto_msgTypes[19]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetCommoditiesReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetCommoditiesReply) ProtoMessage() {}

func (x *GetCommoditiesReply) ProtoReflect() protoreflect.Message {
	mi := &file_darkstat_proto_msgTypes[19]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetCommoditiesReply.ProtoReflect.Descriptor instead.
func (*GetCommoditiesReply) Descriptor() ([]byte, []int) {
	return file_darkstat_proto_rawDescGZIP(), []int{19}
}

func (x *GetCommoditiesReply) GetItems() []*Commodity {
	if x != nil {
		return x.Items
	}
	return nil
}

type Commodity struct {
	state                 protoimpl.MessageState `protogen:"open.v1"`
	Nickname              string                 `protobuf:"bytes,1,opt,name=nickname,proto3" json:"nickname,omitempty"`
	PriceBase             int64                  `protobuf:"varint,2,opt,name=price_base,json=priceBase,proto3" json:"price_base,omitempty"`
	Name                  string                 `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
	Combinable            bool                   `protobuf:"varint,4,opt,name=combinable,proto3" json:"combinable,omitempty"`
	Volume                float64                `protobuf:"fixed64,5,opt,name=volume,proto3" json:"volume,omitempty"`
	ShipClass             int64                  `protobuf:"varint,6,opt,name=ship_class,json=shipClass,proto3" json:"ship_class,omitempty"`
	NameId                int64                  `protobuf:"varint,7,opt,name=name_id,json=nameId,proto3" json:"name_id,omitempty"`
	InfocardId            int64                  `protobuf:"varint,8,opt,name=infocard_id,json=infocardId,proto3" json:"infocard_id,omitempty"`
	Bases                 map[string]*MarketGood `protobuf:"bytes,9,rep,name=bases,proto3" json:"bases,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	PriceBestBaseBuysFor  int64                  `protobuf:"varint,10,opt,name=price_best_base_buys_for,json=priceBestBaseBuysFor,proto3" json:"price_best_base_buys_for,omitempty"`
	PriceBestBaseSellsFor int64                  `protobuf:"varint,11,opt,name=price_best_base_sells_for,json=priceBestBaseSellsFor,proto3" json:"price_best_base_sells_for,omitempty"`
	ProffitMargin         int64                  `protobuf:"varint,12,opt,name=proffit_margin,json=proffitMargin,proto3" json:"proffit_margin,omitempty"`
	Mass                  float64                `protobuf:"fixed64,13,opt,name=mass,proto3" json:"mass,omitempty"`
	unknownFields         protoimpl.UnknownFields
	sizeCache             protoimpl.SizeCache
}

func (x *Commodity) Reset() {
	*x = Commodity{}
	mi := &file_darkstat_proto_msgTypes[20]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Commodity) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Commodity) ProtoMessage() {}

func (x *Commodity) ProtoReflect() protoreflect.Message {
	mi := &file_darkstat_proto_msgTypes[20]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Commodity.ProtoReflect.Descriptor instead.
func (*Commodity) Descriptor() ([]byte, []int) {
	return file_darkstat_proto_rawDescGZIP(), []int{20}
}

func (x *Commodity) GetNickname() string {
	if x != nil {
		return x.Nickname
	}
	return ""
}

func (x *Commodity) GetPriceBase() int64 {
	if x != nil {
		return x.PriceBase
	}
	return 0
}

func (x *Commodity) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Commodity) GetCombinable() bool {
	if x != nil {
		return x.Combinable
	}
	return false
}

func (x *Commodity) GetVolume() float64 {
	if x != nil {
		return x.Volume
	}
	return 0
}

func (x *Commodity) GetShipClass() int64 {
	if x != nil {
		return x.ShipClass
	}
	return 0
}

func (x *Commodity) GetNameId() int64 {
	if x != nil {
		return x.NameId
	}
	return 0
}

func (x *Commodity) GetInfocardId() int64 {
	if x != nil {
		return x.InfocardId
	}
	return 0
}

func (x *Commodity) GetBases() map[string]*MarketGood {
	if x != nil {
		return x.Bases
	}
	return nil
}

func (x *Commodity) GetPriceBestBaseBuysFor() int64 {
	if x != nil {
		return x.PriceBestBaseBuysFor
	}
	return 0
}

func (x *Commodity) GetPriceBestBaseSellsFor() int64 {
	if x != nil {
		return x.PriceBestBaseSellsFor
	}
	return 0
}

func (x *Commodity) GetProffitMargin() int64 {
	if x != nil {
		return x.ProffitMargin
	}
	return 0
}

func (x *Commodity) GetMass() float64 {
	if x != nil {
		return x.Mass
	}
	return 0
}

type GetAmmoReply struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Items         []*Ammo                `protobuf:"bytes,1,rep,name=items,proto3" json:"items,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetAmmoReply) Reset() {
	*x = GetAmmoReply{}
	mi := &file_darkstat_proto_msgTypes[21]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetAmmoReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetAmmoReply) ProtoMessage() {}

func (x *GetAmmoReply) ProtoReflect() protoreflect.Message {
	mi := &file_darkstat_proto_msgTypes[21]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetAmmoReply.ProtoReflect.Descriptor instead.
func (*GetAmmoReply) Descriptor() ([]byte, []int) {
	return file_darkstat_proto_rawDescGZIP(), []int{21}
}

func (x *GetAmmoReply) GetItems() []*Ammo {
	if x != nil {
		return x.Items
	}
	return nil
}

type Ammo struct {
	state               protoimpl.MessageState `protogen:"open.v1"`
	Name                string                 `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Price               int64                  `protobuf:"varint,2,opt,name=price,proto3" json:"price,omitempty"`
	HitPts              int64                  `protobuf:"varint,3,opt,name=hit_pts,json=hitPts,proto3" json:"hit_pts,omitempty"`
	Volume              float64                `protobuf:"fixed64,4,opt,name=volume,proto3" json:"volume,omitempty"`
	MunitionLifetime    float64                `protobuf:"fixed64,5,opt,name=munition_lifetime,json=munitionLifetime,proto3" json:"munition_lifetime,omitempty"`
	Nickname            string                 `protobuf:"bytes,6,opt,name=nickname,proto3" json:"nickname,omitempty"`
	NameId              int64                  `protobuf:"varint,7,opt,name=name_id,json=nameId,proto3" json:"name_id,omitempty"`
	InfoId              int64                  `protobuf:"varint,8,opt,name=info_id,json=infoId,proto3" json:"info_id,omitempty"`
	SeekerType          string                 `protobuf:"bytes,9,opt,name=seeker_type,json=seekerType,proto3" json:"seeker_type,omitempty"`
	SeekerRange         int64                  `protobuf:"varint,10,opt,name=seeker_range,json=seekerRange,proto3" json:"seeker_range,omitempty"`
	SeekerFovDeg        int64                  `protobuf:"varint,11,opt,name=seeker_fov_deg,json=seekerFovDeg,proto3" json:"seeker_fov_deg,omitempty"`
	Bases               map[string]*MarketGood `protobuf:"bytes,12,rep,name=bases,proto3" json:"bases,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	DiscoveryTechCompat *DiscoveryTechCompat   `protobuf:"bytes,13,opt,name=discovery_tech_compat,json=discoveryTechCompat,proto3,oneof" json:"discovery_tech_compat,omitempty"`
	AmmoLimit           *AmmoLimit             `protobuf:"bytes,14,opt,name=ammo_limit,json=ammoLimit,proto3" json:"ammo_limit,omitempty"`
	Mass                float64                `protobuf:"fixed64,16,opt,name=mass,proto3" json:"mass,omitempty"`
	unknownFields       protoimpl.UnknownFields
	sizeCache           protoimpl.SizeCache
}

func (x *Ammo) Reset() {
	*x = Ammo{}
	mi := &file_darkstat_proto_msgTypes[22]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Ammo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Ammo) ProtoMessage() {}

func (x *Ammo) ProtoReflect() protoreflect.Message {
	mi := &file_darkstat_proto_msgTypes[22]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Ammo.ProtoReflect.Descriptor instead.
func (*Ammo) Descriptor() ([]byte, []int) {
	return file_darkstat_proto_rawDescGZIP(), []int{22}
}

func (x *Ammo) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Ammo) GetPrice() int64 {
	if x != nil {
		return x.Price
	}
	return 0
}

func (x *Ammo) GetHitPts() int64 {
	if x != nil {
		return x.HitPts
	}
	return 0
}

func (x *Ammo) GetVolume() float64 {
	if x != nil {
		return x.Volume
	}
	return 0
}

func (x *Ammo) GetMunitionLifetime() float64 {
	if x != nil {
		return x.MunitionLifetime
	}
	return 0
}

func (x *Ammo) GetNickname() string {
	if x != nil {
		return x.Nickname
	}
	return ""
}

func (x *Ammo) GetNameId() int64 {
	if x != nil {
		return x.NameId
	}
	return 0
}

func (x *Ammo) GetInfoId() int64 {
	if x != nil {
		return x.InfoId
	}
	return 0
}

func (x *Ammo) GetSeekerType() string {
	if x != nil {
		return x.SeekerType
	}
	return ""
}

func (x *Ammo) GetSeekerRange() int64 {
	if x != nil {
		return x.SeekerRange
	}
	return 0
}

func (x *Ammo) GetSeekerFovDeg() int64 {
	if x != nil {
		return x.SeekerFovDeg
	}
	return 0
}

func (x *Ammo) GetBases() map[string]*MarketGood {
	if x != nil {
		return x.Bases
	}
	return nil
}

func (x *Ammo) GetDiscoveryTechCompat() *DiscoveryTechCompat {
	if x != nil {
		return x.DiscoveryTechCompat
	}
	return nil
}

func (x *Ammo) GetAmmoLimit() *AmmoLimit {
	if x != nil {
		return x.AmmoLimit
	}
	return nil
}

func (x *Ammo) GetMass() float64 {
	if x != nil {
		return x.Mass
	}
	return 0
}

type DiscoveryTechCompat struct {
	state          protoimpl.MessageState `protogen:"open.v1"`
	TechcompatById map[string]float64     `protobuf:"bytes,1,rep,name=techcompat_by_id,json=techcompatById,proto3" json:"techcompat_by_id,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"fixed64,2,opt,name=value"`
	TechCell       string                 `protobuf:"bytes,2,opt,name=tech_cell,json=techCell,proto3" json:"tech_cell,omitempty"`
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *DiscoveryTechCompat) Reset() {
	*x = DiscoveryTechCompat{}
	mi := &file_darkstat_proto_msgTypes[23]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DiscoveryTechCompat) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DiscoveryTechCompat) ProtoMessage() {}

func (x *DiscoveryTechCompat) ProtoReflect() protoreflect.Message {
	mi := &file_darkstat_proto_msgTypes[23]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DiscoveryTechCompat.ProtoReflect.Descriptor instead.
func (*DiscoveryTechCompat) Descriptor() ([]byte, []int) {
	return file_darkstat_proto_rawDescGZIP(), []int{23}
}

func (x *DiscoveryTechCompat) GetTechcompatById() map[string]float64 {
	if x != nil {
		return x.TechcompatById
	}
	return nil
}

func (x *DiscoveryTechCompat) GetTechCell() string {
	if x != nil {
		return x.TechCell
	}
	return ""
}

type TechCompatAnswer struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	TechCompat    *DiscoveryTechCompat   `protobuf:"bytes,1,opt,name=tech_compat,json=techCompat,proto3,oneof" json:"tech_compat,omitempty"`
	Error         *string                `protobuf:"bytes,2,opt,name=error,proto3,oneof" json:"error,omitempty"`
	Nickname      string                 `protobuf:"bytes,3,opt,name=nickname,proto3" json:"nickname,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TechCompatAnswer) Reset() {
	*x = TechCompatAnswer{}
	mi := &file_darkstat_proto_msgTypes[24]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TechCompatAnswer) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TechCompatAnswer) ProtoMessage() {}

func (x *TechCompatAnswer) ProtoReflect() protoreflect.Message {
	mi := &file_darkstat_proto_msgTypes[24]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TechCompatAnswer.ProtoReflect.Descriptor instead.
func (*TechCompatAnswer) Descriptor() ([]byte, []int) {
	return file_darkstat_proto_rawDescGZIP(), []int{24}
}

func (x *TechCompatAnswer) GetTechCompat() *DiscoveryTechCompat {
	if x != nil {
		return x.TechCompat
	}
	return nil
}

func (x *TechCompatAnswer) GetError() string {
	if x != nil && x.Error != nil {
		return *x.Error
	}
	return ""
}

func (x *TechCompatAnswer) GetNickname() string {
	if x != nil {
		return x.Nickname
	}
	return ""
}

type GetTechCompatInput struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Nicknames     []string               `protobuf:"bytes,1,rep,name=nicknames,proto3" json:"nicknames,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetTechCompatInput) Reset() {
	*x = GetTechCompatInput{}
	mi := &file_darkstat_proto_msgTypes[25]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetTechCompatInput) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetTechCompatInput) ProtoMessage() {}

func (x *GetTechCompatInput) ProtoReflect() protoreflect.Message {
	mi := &file_darkstat_proto_msgTypes[25]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetTechCompatInput.ProtoReflect.Descriptor instead.
func (*GetTechCompatInput) Descriptor() ([]byte, []int) {
	return file_darkstat_proto_rawDescGZIP(), []int{25}
}

func (x *GetTechCompatInput) GetNicknames() []string {
	if x != nil {
		return x.Nicknames
	}
	return nil
}

type GetTechCompatReply struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Answers       []*TechCompatAnswer    `protobuf:"bytes,1,rep,name=answers,proto3" json:"answers,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetTechCompatReply) Reset() {
	*x = GetTechCompatReply{}
	mi := &file_darkstat_proto_msgTypes[26]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetTechCompatReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetTechCompatReply) ProtoMessage() {}

func (x *GetTechCompatReply) ProtoReflect() protoreflect.Message {
	mi := &file_darkstat_proto_msgTypes[26]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetTechCompatReply.ProtoReflect.Descriptor instead.
func (*GetTechCompatReply) Descriptor() ([]byte, []int) {
	return file_darkstat_proto_rawDescGZIP(), []int{26}
}

func (x *GetTechCompatReply) GetAnswers() []*TechCompatAnswer {
	if x != nil {
		return x.Answers
	}
	return nil
}

type GetCounterMeasuresReply struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Items         []*CounterMeasure      `protobuf:"bytes,1,rep,name=items,proto3" json:"items,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetCounterMeasuresReply) Reset() {
	*x = GetCounterMeasuresReply{}
	mi := &file_darkstat_proto_msgTypes[27]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetCounterMeasuresReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetCounterMeasuresReply) ProtoMessage() {}

func (x *GetCounterMeasuresReply) ProtoReflect() protoreflect.Message {
	mi := &file_darkstat_proto_msgTypes[27]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetCounterMeasuresReply.ProtoReflect.Descriptor instead.
func (*GetCounterMeasuresReply) Descriptor() ([]byte, []int) {
	return file_darkstat_proto_rawDescGZIP(), []int{27}
}

func (x *GetCounterMeasuresReply) GetItems() []*CounterMeasure {
	if x != nil {
		return x.Items
	}
	return nil
}

type CounterMeasure struct {
	state               protoimpl.MessageState `protogen:"open.v1"`
	Name                string                 `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Price               int64                  `protobuf:"varint,2,opt,name=price,proto3" json:"price,omitempty"`
	HitPts              int64                  `protobuf:"varint,3,opt,name=hit_pts,json=hitPts,proto3" json:"hit_pts,omitempty"`
	AiRange             int64                  `protobuf:"varint,4,opt,name=ai_range,json=aiRange,proto3" json:"ai_range,omitempty"`
	Lifetime            int64                  `protobuf:"varint,5,opt,name=lifetime,proto3" json:"lifetime,omitempty"`
	Range               int64                  `protobuf:"varint,6,opt,name=range,proto3" json:"range,omitempty"`
	DiversionPctg       int64                  `protobuf:"varint,7,opt,name=diversion_pctg,json=diversionPctg,proto3" json:"diversion_pctg,omitempty"`
	Lootable            bool                   `protobuf:"varint,8,opt,name=lootable,proto3" json:"lootable,omitempty"`
	Nickname            string                 `protobuf:"bytes,9,opt,name=nickname,proto3" json:"nickname,omitempty"`
	NameId              int64                  `protobuf:"varint,10,opt,name=name_id,json=nameId,proto3" json:"name_id,omitempty"`
	InfoId              int64                  `protobuf:"varint,11,opt,name=info_id,json=infoId,proto3" json:"info_id,omitempty"`
	Bases               map[string]*MarketGood `protobuf:"bytes,12,rep,name=bases,proto3" json:"bases,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	DiscoveryTechCompat *DiscoveryTechCompat   `protobuf:"bytes,13,opt,name=discovery_tech_compat,json=discoveryTechCompat,proto3,oneof" json:"discovery_tech_compat,omitempty"`
	AmmoLimit           *AmmoLimit             `protobuf:"bytes,14,opt,name=ammo_limit,json=ammoLimit,proto3" json:"ammo_limit,omitempty"`
	Mass                float64                `protobuf:"fixed64,16,opt,name=mass,proto3" json:"mass,omitempty"`
	unknownFields       protoimpl.UnknownFields
	sizeCache           protoimpl.SizeCache
}

func (x *CounterMeasure) Reset() {
	*x = CounterMeasure{}
	mi := &file_darkstat_proto_msgTypes[28]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CounterMeasure) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CounterMeasure) ProtoMessage() {}

func (x *CounterMeasure) ProtoReflect() protoreflect.Message {
	mi := &file_darkstat_proto_msgTypes[28]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CounterMeasure.ProtoReflect.Descriptor instead.
func (*CounterMeasure) Descriptor() ([]byte, []int) {
	return file_darkstat_proto_rawDescGZIP(), []int{28}
}

func (x *CounterMeasure) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *CounterMeasure) GetPrice() int64 {
	if x != nil {
		return x.Price
	}
	return 0
}

func (x *CounterMeasure) GetHitPts() int64 {
	if x != nil {
		return x.HitPts
	}
	return 0
}

func (x *CounterMeasure) GetAiRange() int64 {
	if x != nil {
		return x.AiRange
	}
	return 0
}

func (x *CounterMeasure) GetLifetime() int64 {
	if x != nil {
		return x.Lifetime
	}
	return 0
}

func (x *CounterMeasure) GetRange() int64 {
	if x != nil {
		return x.Range
	}
	return 0
}

func (x *CounterMeasure) GetDiversionPctg() int64 {
	if x != nil {
		return x.DiversionPctg
	}
	return 0
}

func (x *CounterMeasure) GetLootable() bool {
	if x != nil {
		return x.Lootable
	}
	return false
}

func (x *CounterMeasure) GetNickname() string {
	if x != nil {
		return x.Nickname
	}
	return ""
}

func (x *CounterMeasure) GetNameId() int64 {
	if x != nil {
		return x.NameId
	}
	return 0
}

func (x *CounterMeasure) GetInfoId() int64 {
	if x != nil {
		return x.InfoId
	}
	return 0
}

func (x *CounterMeasure) GetBases() map[string]*MarketGood {
	if x != nil {
		return x.Bases
	}
	return nil
}

func (x *CounterMeasure) GetDiscoveryTechCompat() *DiscoveryTechCompat {
	if x != nil {
		return x.DiscoveryTechCompat
	}
	return nil
}

func (x *CounterMeasure) GetAmmoLimit() *AmmoLimit {
	if x != nil {
		return x.AmmoLimit
	}
	return nil
}

func (x *CounterMeasure) GetMass() float64 {
	if x != nil {
		return x.Mass
	}
	return 0
}

type GetEnginesReply struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Items         []*Engine              `protobuf:"bytes,1,rep,name=items,proto3" json:"items,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetEnginesReply) Reset() {
	*x = GetEnginesReply{}
	mi := &file_darkstat_proto_msgTypes[29]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetEnginesReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetEnginesReply) ProtoMessage() {}

func (x *GetEnginesReply) ProtoReflect() protoreflect.Message {
	mi := &file_darkstat_proto_msgTypes[29]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetEnginesReply.ProtoReflect.Descriptor instead.
func (*GetEnginesReply) Descriptor() ([]byte, []int) {
	return file_darkstat_proto_rawDescGZIP(), []int{29}
}

func (x *GetEnginesReply) GetItems() []*Engine {
	if x != nil {
		return x.Items
	}
	return nil
}

type Engine struct {
	state               protoimpl.MessageState `protogen:"open.v1"`
	Name                string                 `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Price               int64                  `protobuf:"varint,2,opt,name=price,proto3" json:"price,omitempty"`
	CruiseSpeed         int64                  `protobuf:"varint,3,opt,name=cruise_speed,json=cruiseSpeed,proto3" json:"cruise_speed,omitempty"`
	CruiseChargeTime    int64                  `protobuf:"varint,4,opt,name=cruise_charge_time,json=cruiseChargeTime,proto3" json:"cruise_charge_time,omitempty"`
	LinearDrag          int64                  `protobuf:"varint,5,opt,name=linear_drag,json=linearDrag,proto3" json:"linear_drag,omitempty"`
	MaxForce            int64                  `protobuf:"varint,6,opt,name=max_force,json=maxForce,proto3" json:"max_force,omitempty"`
	ReverseFraction     float64                `protobuf:"fixed64,7,opt,name=reverse_fraction,json=reverseFraction,proto3" json:"reverse_fraction,omitempty"`
	ImpulseSpeed        float64                `protobuf:"fixed64,8,opt,name=impulse_speed,json=impulseSpeed,proto3" json:"impulse_speed,omitempty"`
	HpType              string                 `protobuf:"bytes,9,opt,name=hp_type,json=hpType,proto3" json:"hp_type,omitempty"`
	FlameEffect         string                 `protobuf:"bytes,10,opt,name=flame_effect,json=flameEffect,proto3" json:"flame_effect,omitempty"`
	TrailEffect         string                 `protobuf:"bytes,11,opt,name=trail_effect,json=trailEffect,proto3" json:"trail_effect,omitempty"`
	Nickname            string                 `protobuf:"bytes,12,opt,name=nickname,proto3" json:"nickname,omitempty"`
	NameId              int64                  `protobuf:"varint,13,opt,name=name_id,json=nameId,proto3" json:"name_id,omitempty"`
	InfoId              int64                  `protobuf:"varint,14,opt,name=info_id,json=infoId,proto3" json:"info_id,omitempty"`
	Bases               map[string]*MarketGood `protobuf:"bytes,15,rep,name=bases,proto3" json:"bases,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	DiscoveryTechCompat *DiscoveryTechCompat   `protobuf:"bytes,16,opt,name=discovery_tech_compat,json=discoveryTechCompat,proto3,oneof" json:"discovery_tech_compat,omitempty"`
	Mass                float64                `protobuf:"fixed64,17,opt,name=mass,proto3" json:"mass,omitempty"`
	unknownFields       protoimpl.UnknownFields
	sizeCache           protoimpl.SizeCache
}

func (x *Engine) Reset() {
	*x = Engine{}
	mi := &file_darkstat_proto_msgTypes[30]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Engine) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Engine) ProtoMessage() {}

func (x *Engine) ProtoReflect() protoreflect.Message {
	mi := &file_darkstat_proto_msgTypes[30]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Engine.ProtoReflect.Descriptor instead.
func (*Engine) Descriptor() ([]byte, []int) {
	return file_darkstat_proto_rawDescGZIP(), []int{30}
}

func (x *Engine) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Engine) GetPrice() int64 {
	if x != nil {
		return x.Price
	}
	return 0
}

func (x *Engine) GetCruiseSpeed() int64 {
	if x != nil {
		return x.CruiseSpeed
	}
	return 0
}

func (x *Engine) GetCruiseChargeTime() int64 {
	if x != nil {
		return x.CruiseChargeTime
	}
	return 0
}

func (x *Engine) GetLinearDrag() int64 {
	if x != nil {
		return x.LinearDrag
	}
	return 0
}

func (x *Engine) GetMaxForce() int64 {
	if x != nil {
		return x.MaxForce
	}
	return 0
}

func (x *Engine) GetReverseFraction() float64 {
	if x != nil {
		return x.ReverseFraction
	}
	return 0
}

func (x *Engine) GetImpulseSpeed() float64 {
	if x != nil {
		return x.ImpulseSpeed
	}
	return 0
}

func (x *Engine) GetHpType() string {
	if x != nil {
		return x.HpType
	}
	return ""
}

func (x *Engine) GetFlameEffect() string {
	if x != nil {
		return x.FlameEffect
	}
	return ""
}

func (x *Engine) GetTrailEffect() string {
	if x != nil {
		return x.TrailEffect
	}
	return ""
}

func (x *Engine) GetNickname() string {
	if x != nil {
		return x.Nickname
	}
	return ""
}

func (x *Engine) GetNameId() int64 {
	if x != nil {
		return x.NameId
	}
	return 0
}

func (x *Engine) GetInfoId() int64 {
	if x != nil {
		return x.InfoId
	}
	return 0
}

func (x *Engine) GetBases() map[string]*MarketGood {
	if x != nil {
		return x.Bases
	}
	return nil
}

func (x *Engine) GetDiscoveryTechCompat() *DiscoveryTechCompat {
	if x != nil {
		return x.DiscoveryTechCompat
	}
	return nil
}

func (x *Engine) GetMass() float64 {
	if x != nil {
		return x.Mass
	}
	return 0
}

type GetFactionsInput struct {
	state              protoimpl.MessageState `protogen:"open.v1"`
	IncludeReputations bool                   `protobuf:"varint,1,opt,name=include_reputations,json=includeReputations,proto3" json:"include_reputations,omitempty"`
	IncludeBribes      bool                   `protobuf:"varint,2,opt,name=include_bribes,json=includeBribes,proto3" json:"include_bribes,omitempty"`
	FilterToUseful     bool                   `protobuf:"varint,3,opt,name=filter_to_useful,json=filterToUseful,proto3" json:"filter_to_useful,omitempty"`
	unknownFields      protoimpl.UnknownFields
	sizeCache          protoimpl.SizeCache
}

func (x *GetFactionsInput) Reset() {
	*x = GetFactionsInput{}
	mi := &file_darkstat_proto_msgTypes[31]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetFactionsInput) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetFactionsInput) ProtoMessage() {}

func (x *GetFactionsInput) ProtoReflect() protoreflect.Message {
	mi := &file_darkstat_proto_msgTypes[31]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetFactionsInput.ProtoReflect.Descriptor instead.
func (*GetFactionsInput) Descriptor() ([]byte, []int) {
	return file_darkstat_proto_rawDescGZIP(), []int{31}
}

func (x *GetFactionsInput) GetIncludeReputations() bool {
	if x != nil {
		return x.IncludeReputations
	}
	return false
}

func (x *GetFactionsInput) GetIncludeBribes() bool {
	if x != nil {
		return x.IncludeBribes
	}
	return false
}

func (x *GetFactionsInput) GetFilterToUseful() bool {
	if x != nil {
		return x.FilterToUseful
	}
	return false
}

type GetFactionsReply struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Items         []*Faction             `protobuf:"bytes,1,rep,name=items,proto3" json:"items,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetFactionsReply) Reset() {
	*x = GetFactionsReply{}
	mi := &file_darkstat_proto_msgTypes[32]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetFactionsReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetFactionsReply) ProtoMessage() {}

func (x *GetFactionsReply) ProtoReflect() protoreflect.Message {
	mi := &file_darkstat_proto_msgTypes[32]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetFactionsReply.ProtoReflect.Descriptor instead.
func (*GetFactionsReply) Descriptor() ([]byte, []int) {
	return file_darkstat_proto_rawDescGZIP(), []int{32}
}

func (x *GetFactionsReply) GetItems() []*Faction {
	if x != nil {
		return x.Items
	}
	return nil
}

type Faction struct {
	state             protoimpl.MessageState `protogen:"open.v1"`
	Name              string                 `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	ShortName         string                 `protobuf:"bytes,2,opt,name=short_name,json=shortName,proto3" json:"short_name,omitempty"`
	Nickname          string                 `protobuf:"bytes,3,opt,name=nickname,proto3" json:"nickname,omitempty"`
	ObjectDestruction float64                `protobuf:"fixed64,4,opt,name=object_destruction,json=objectDestruction,proto3" json:"object_destruction,omitempty"`
	MissionSuccess    float64                `protobuf:"fixed64,5,opt,name=mission_success,json=missionSuccess,proto3" json:"mission_success,omitempty"`
	MissionFailure    float64                `protobuf:"fixed64,6,opt,name=mission_failure,json=missionFailure,proto3" json:"mission_failure,omitempty"`
	MissionAbort      float64                `protobuf:"fixed64,7,opt,name=mission_abort,json=missionAbort,proto3" json:"mission_abort,omitempty"`
	InfonameId        int64                  `protobuf:"varint,8,opt,name=infoname_id,json=infonameId,proto3" json:"infoname_id,omitempty"`
	InfocardId        int64                  `protobuf:"varint,9,opt,name=infocard_id,json=infocardId,proto3" json:"infocard_id,omitempty"`
	Reputations       []*Reputation          `protobuf:"bytes,10,rep,name=reputations,proto3" json:"reputations,omitempty"`
	Bribes            []*Bribe               `protobuf:"bytes,11,rep,name=bribes,proto3" json:"bribes,omitempty"`
	unknownFields     protoimpl.UnknownFields
	sizeCache         protoimpl.SizeCache
}

func (x *Faction) Reset() {
	*x = Faction{}
	mi := &file_darkstat_proto_msgTypes[33]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Faction) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Faction) ProtoMessage() {}

func (x *Faction) ProtoReflect() protoreflect.Message {
	mi := &file_darkstat_proto_msgTypes[33]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Faction.ProtoReflect.Descriptor instead.
func (*Faction) Descriptor() ([]byte, []int) {
	return file_darkstat_proto_rawDescGZIP(), []int{33}
}

func (x *Faction) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Faction) GetShortName() string {
	if x != nil {
		return x.ShortName
	}
	return ""
}

func (x *Faction) GetNickname() string {
	if x != nil {
		return x.Nickname
	}
	return ""
}

func (x *Faction) GetObjectDestruction() float64 {
	if x != nil {
		return x.ObjectDestruction
	}
	return 0
}

func (x *Faction) GetMissionSuccess() float64 {
	if x != nil {
		return x.MissionSuccess
	}
	return 0
}

func (x *Faction) GetMissionFailure() float64 {
	if x != nil {
		return x.MissionFailure
	}
	return 0
}

func (x *Faction) GetMissionAbort() float64 {
	if x != nil {
		return x.MissionAbort
	}
	return 0
}

func (x *Faction) GetInfonameId() int64 {
	if x != nil {
		return x.InfonameId
	}
	return 0
}

func (x *Faction) GetInfocardId() int64 {
	if x != nil {
		return x.InfocardId
	}
	return 0
}

func (x *Faction) GetReputations() []*Reputation {
	if x != nil {
		return x.Reputations
	}
	return nil
}

func (x *Faction) GetBribes() []*Bribe {
	if x != nil {
		return x.Bribes
	}
	return nil
}

type Reputation struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Name          string                 `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Rep           float64                `protobuf:"fixed64,2,opt,name=rep,proto3" json:"rep,omitempty"`
	Empathy       float64                `protobuf:"fixed64,3,opt,name=empathy,proto3" json:"empathy,omitempty"`
	Nickname      string                 `protobuf:"bytes,4,opt,name=nickname,proto3" json:"nickname,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Reputation) Reset() {
	*x = Reputation{}
	mi := &file_darkstat_proto_msgTypes[34]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Reputation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Reputation) ProtoMessage() {}

func (x *Reputation) ProtoReflect() protoreflect.Message {
	mi := &file_darkstat_proto_msgTypes[34]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Reputation.ProtoReflect.Descriptor instead.
func (*Reputation) Descriptor() ([]byte, []int) {
	return file_darkstat_proto_rawDescGZIP(), []int{34}
}

func (x *Reputation) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Reputation) GetRep() float64 {
	if x != nil {
		return x.Rep
	}
	return 0
}

func (x *Reputation) GetEmpathy() float64 {
	if x != nil {
		return x.Empathy
	}
	return 0
}

func (x *Reputation) GetNickname() string {
	if x != nil {
		return x.Nickname
	}
	return ""
}

type Bribe struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	BaseNickname  string                 `protobuf:"bytes,1,opt,name=base_nickname,json=baseNickname,proto3" json:"base_nickname,omitempty"`
	Chance        float64                `protobuf:"fixed64,2,opt,name=chance,proto3" json:"chance,omitempty"`
	BaseInfo      *BaseInfo              `protobuf:"bytes,3,opt,name=base_info,json=baseInfo,proto3" json:"base_info,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Bribe) Reset() {
	*x = Bribe{}
	mi := &file_darkstat_proto_msgTypes[35]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Bribe) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Bribe) ProtoMessage() {}

func (x *Bribe) ProtoReflect() protoreflect.Message {
	mi := &file_darkstat_proto_msgTypes[35]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Bribe.ProtoReflect.Descriptor instead.
func (*Bribe) Descriptor() ([]byte, []int) {
	return file_darkstat_proto_rawDescGZIP(), []int{35}
}

func (x *Bribe) GetBaseNickname() string {
	if x != nil {
		return x.BaseNickname
	}
	return ""
}

func (x *Bribe) GetChance() float64 {
	if x != nil {
		return x.Chance
	}
	return 0
}

func (x *Bribe) GetBaseInfo() *BaseInfo {
	if x != nil {
		return x.BaseInfo
	}
	return nil
}

type GetGunsReply struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Items         []*Gun                 `protobuf:"bytes,1,rep,name=items,proto3" json:"items,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetGunsReply) Reset() {
	*x = GetGunsReply{}
	mi := &file_darkstat_proto_msgTypes[36]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetGunsReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetGunsReply) ProtoMessage() {}

func (x *GetGunsReply) ProtoReflect() protoreflect.Message {
	mi := &file_darkstat_proto_msgTypes[36]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetGunsReply.ProtoReflect.Descriptor instead.
func (*GetGunsReply) Descriptor() ([]byte, []int) {
	return file_darkstat_proto_rawDescGZIP(), []int{36}
}

func (x *GetGunsReply) GetItems() []*Gun {
	if x != nil {
		return x.Items
	}
	return nil
}

type Gun struct {
	state                  protoimpl.MessageState `protogen:"open.v1"`
	Bases                  map[string]*MarketGood `protobuf:"bytes,1,rep,name=bases,proto3" json:"bases,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	DiscoveryTechCompat    *DiscoveryTechCompat   `protobuf:"bytes,2,opt,name=discovery_tech_compat,json=discoveryTechCompat,proto3,oneof" json:"discovery_tech_compat,omitempty"`
	Nickname               string                 `protobuf:"bytes,3,opt,name=nickname,proto3" json:"nickname,omitempty"`
	Name                   string                 `protobuf:"bytes,4,opt,name=name,proto3" json:"name,omitempty"`
	Type                   string                 `protobuf:"bytes,5,opt,name=type,proto3" json:"type,omitempty"`
	Price                  int64                  `protobuf:"varint,6,opt,name=price,proto3" json:"price,omitempty"`
	Class                  string                 `protobuf:"bytes,7,opt,name=class,proto3" json:"class,omitempty"`
	HpType                 string                 `protobuf:"bytes,8,opt,name=hp_type,json=hpType,proto3" json:"hp_type,omitempty"`
	IdsName                int64                  `protobuf:"varint,9,opt,name=ids_name,json=idsName,proto3" json:"ids_name,omitempty"`
	IdsInfo                int64                  `protobuf:"varint,10,opt,name=ids_info,json=idsInfo,proto3" json:"ids_info,omitempty"`
	Volume                 float64                `protobuf:"fixed64,11,opt,name=volume,proto3" json:"volume,omitempty"`
	HitPts                 string                 `protobuf:"bytes,12,opt,name=hit_pts,json=hitPts,proto3" json:"hit_pts,omitempty"`
	PowerUsage             float64                `protobuf:"fixed64,13,opt,name=power_usage,json=powerUsage,proto3" json:"power_usage,omitempty"`
	Refire                 float64                `protobuf:"fixed64,14,opt,name=refire,proto3" json:"refire,omitempty"`
	Range                  float64                `protobuf:"fixed64,15,opt,name=range,proto3" json:"range,omitempty"`
	Toughness              float64                `protobuf:"fixed64,16,opt,name=toughness,proto3" json:"toughness,omitempty"`
	IsAutoTurret           bool                   `protobuf:"varint,17,opt,name=is_auto_turret,json=isAutoTurret,proto3" json:"is_auto_turret,omitempty"`
	Lootable               bool                   `protobuf:"varint,18,opt,name=lootable,proto3" json:"lootable,omitempty"`
	RequiredAmmo           bool                   `protobuf:"varint,19,opt,name=required_ammo,json=requiredAmmo,proto3" json:"required_ammo,omitempty"`
	HullDamage             int64                  `protobuf:"varint,20,opt,name=hull_damage,json=hullDamage,proto3" json:"hull_damage,omitempty"`
	EnergyDamage           int64                  `protobuf:"varint,21,opt,name=energy_damage,json=energyDamage,proto3" json:"energy_damage,omitempty"`
	ShieldDamage           int64                  `protobuf:"varint,22,opt,name=shield_damage,json=shieldDamage,proto3" json:"shield_damage,omitempty"`
	AvgShieldDamage        int64                  `protobuf:"varint,23,opt,name=avg_shield_damage,json=avgShieldDamage,proto3" json:"avg_shield_damage,omitempty"`
	DamageType             string                 `protobuf:"bytes,24,opt,name=damage_type,json=damageType,proto3" json:"damage_type,omitempty"`
	LifeTime               float64                `protobuf:"fixed64,25,opt,name=life_time,json=lifeTime,proto3" json:"life_time,omitempty"`
	Speed                  float64                `protobuf:"fixed64,26,opt,name=speed,proto3" json:"speed,omitempty"`
	GunTurnRate            float64                `protobuf:"fixed64,27,opt,name=gun_turn_rate,json=gunTurnRate,proto3" json:"gun_turn_rate,omitempty"`
	DispersionAngle        float64                `protobuf:"fixed64,28,opt,name=dispersion_angle,json=dispersionAngle,proto3" json:"dispersion_angle,omitempty"`
	HullDamagePerSec       float64                `protobuf:"fixed64,29,opt,name=hull_damage_per_sec,json=hullDamagePerSec,proto3" json:"hull_damage_per_sec,omitempty"`
	AvgShieldDamagePerSec  float64                `protobuf:"fixed64,30,opt,name=avg_shield_damage_per_sec,json=avgShieldDamagePerSec,proto3" json:"avg_shield_damage_per_sec,omitempty"`
	EnergyDamagePerSec     float64                `protobuf:"fixed64,31,opt,name=energy_damage_per_sec,json=energyDamagePerSec,proto3" json:"energy_damage_per_sec,omitempty"`
	PowerUsagePerSec       float64                `protobuf:"fixed64,32,opt,name=power_usage_per_sec,json=powerUsagePerSec,proto3" json:"power_usage_per_sec,omitempty"`
	AvgEfficiency          float64                `protobuf:"fixed64,33,opt,name=avg_efficiency,json=avgEfficiency,proto3" json:"avg_efficiency,omitempty"`
	HullEfficiency         float64                `protobuf:"fixed64,34,opt,name=hull_efficiency,json=hullEfficiency,proto3" json:"hull_efficiency,omitempty"`
	ShieldEfficiency       float64                `protobuf:"fixed64,35,opt,name=shield_efficiency,json=shieldEfficiency,proto3" json:"shield_efficiency,omitempty"`
	EnergyDamageEfficiency float64                `protobuf:"fixed64,36,opt,name=energy_damage_efficiency,json=energyDamageEfficiency,proto3" json:"energy_damage_efficiency,omitempty"`
	DamageBonuses          []*DamageBonus         `protobuf:"bytes,37,rep,name=damage_bonuses,json=damageBonuses,proto3" json:"damage_bonuses,omitempty"`
	// has data defined but only for Missile guns :)
	Missile       *Missile     `protobuf:"bytes,38,opt,name=missile,proto3" json:"missile,omitempty"`
	GunDetailed   *GunDetailed `protobuf:"bytes,39,opt,name=gun_detailed,json=gunDetailed,proto3" json:"gun_detailed,omitempty"`
	NumBarrels    *int64       `protobuf:"varint,40,opt,name=num_barrels,json=numBarrels,proto3,oneof" json:"num_barrels,omitempty"`
	BurstFire     *BurstFire   `protobuf:"bytes,41,opt,name=burst_fire,json=burstFire,proto3,oneof" json:"burst_fire,omitempty"`
	AmmoLimit     *AmmoLimit   `protobuf:"bytes,42,opt,name=ammo_limit,json=ammoLimit,proto3" json:"ammo_limit,omitempty"`
	Mass          float64      `protobuf:"fixed64,43,opt,name=mass,proto3" json:"mass,omitempty"`
	DiscoGun      *DiscoGun    `protobuf:"bytes,44,opt,name=disco_gun,json=discoGun,proto3,oneof" json:"disco_gun,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Gun) Reset() {
	*x = Gun{}
	mi := &file_darkstat_proto_msgTypes[37]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Gun) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Gun) ProtoMessage() {}

func (x *Gun) ProtoReflect() protoreflect.Message {
	mi := &file_darkstat_proto_msgTypes[37]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Gun.ProtoReflect.Descriptor instead.
func (*Gun) Descriptor() ([]byte, []int) {
	return file_darkstat_proto_rawDescGZIP(), []int{37}
}

func (x *Gun) GetBases() map[string]*MarketGood {
	if x != nil {
		return x.Bases
	}
	return nil
}

func (x *Gun) GetDiscoveryTechCompat() *DiscoveryTechCompat {
	if x != nil {
		return x.DiscoveryTechCompat
	}
	return nil
}

func (x *Gun) GetNickname() string {
	if x != nil {
		return x.Nickname
	}
	return ""
}

func (x *Gun) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Gun) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *Gun) GetPrice() int64 {
	if x != nil {
		return x.Price
	}
	return 0
}

func (x *Gun) GetClass() string {
	if x != nil {
		return x.Class
	}
	return ""
}

func (x *Gun) GetHpType() string {
	if x != nil {
		return x.HpType
	}
	return ""
}

func (x *Gun) GetIdsName() int64 {
	if x != nil {
		return x.IdsName
	}
	return 0
}

func (x *Gun) GetIdsInfo() int64 {
	if x != nil {
		return x.IdsInfo
	}
	return 0
}

func (x *Gun) GetVolume() float64 {
	if x != nil {
		return x.Volume
	}
	return 0
}

func (x *Gun) GetHitPts() string {
	if x != nil {
		return x.HitPts
	}
	return ""
}

func (x *Gun) GetPowerUsage() float64 {
	if x != nil {
		return x.PowerUsage
	}
	return 0
}

func (x *Gun) GetRefire() float64 {
	if x != nil {
		return x.Refire
	}
	return 0
}

func (x *Gun) GetRange() float64 {
	if x != nil {
		return x.Range
	}
	return 0
}

func (x *Gun) GetToughness() float64 {
	if x != nil {
		return x.Toughness
	}
	return 0
}

func (x *Gun) GetIsAutoTurret() bool {
	if x != nil {
		return x.IsAutoTurret
	}
	return false
}

func (x *Gun) GetLootable() bool {
	if x != nil {
		return x.Lootable
	}
	return false
}

func (x *Gun) GetRequiredAmmo() bool {
	if x != nil {
		return x.RequiredAmmo
	}
	return false
}

func (x *Gun) GetHullDamage() int64 {
	if x != nil {
		return x.HullDamage
	}
	return 0
}

func (x *Gun) GetEnergyDamage() int64 {
	if x != nil {
		return x.EnergyDamage
	}
	return 0
}

func (x *Gun) GetShieldDamage() int64 {
	if x != nil {
		return x.ShieldDamage
	}
	return 0
}

func (x *Gun) GetAvgShieldDamage() int64 {
	if x != nil {
		return x.AvgShieldDamage
	}
	return 0
}

func (x *Gun) GetDamageType() string {
	if x != nil {
		return x.DamageType
	}
	return ""
}

func (x *Gun) GetLifeTime() float64 {
	if x != nil {
		return x.LifeTime
	}
	return 0
}

func (x *Gun) GetSpeed() float64 {
	if x != nil {
		return x.Speed
	}
	return 0
}

func (x *Gun) GetGunTurnRate() float64 {
	if x != nil {
		return x.GunTurnRate
	}
	return 0
}

func (x *Gun) GetDispersionAngle() float64 {
	if x != nil {
		return x.DispersionAngle
	}
	return 0
}

func (x *Gun) GetHullDamagePerSec() float64 {
	if x != nil {
		return x.HullDamagePerSec
	}
	return 0
}

func (x *Gun) GetAvgShieldDamagePerSec() float64 {
	if x != nil {
		return x.AvgShieldDamagePerSec
	}
	return 0
}

func (x *Gun) GetEnergyDamagePerSec() float64 {
	if x != nil {
		return x.EnergyDamagePerSec
	}
	return 0
}

func (x *Gun) GetPowerUsagePerSec() float64 {
	if x != nil {
		return x.PowerUsagePerSec
	}
	return 0
}

func (x *Gun) GetAvgEfficiency() float64 {
	if x != nil {
		return x.AvgEfficiency
	}
	return 0
}

func (x *Gun) GetHullEfficiency() float64 {
	if x != nil {
		return x.HullEfficiency
	}
	return 0
}

func (x *Gun) GetShieldEfficiency() float64 {
	if x != nil {
		return x.ShieldEfficiency
	}
	return 0
}

func (x *Gun) GetEnergyDamageEfficiency() float64 {
	if x != nil {
		return x.EnergyDamageEfficiency
	}
	return 0
}

func (x *Gun) GetDamageBonuses() []*DamageBonus {
	if x != nil {
		return x.DamageBonuses
	}
	return nil
}

func (x *Gun) GetMissile() *Missile {
	if x != nil {
		return x.Missile
	}
	return nil
}

func (x *Gun) GetGunDetailed() *GunDetailed {
	if x != nil {
		return x.GunDetailed
	}
	return nil
}

func (x *Gun) GetNumBarrels() int64 {
	if x != nil && x.NumBarrels != nil {
		return *x.NumBarrels
	}
	return 0
}

func (x *Gun) GetBurstFire() *BurstFire {
	if x != nil {
		return x.BurstFire
	}
	return nil
}

func (x *Gun) GetAmmoLimit() *AmmoLimit {
	if x != nil {
		return x.AmmoLimit
	}
	return nil
}

func (x *Gun) GetMass() float64 {
	if x != nil {
		return x.Mass
	}
	return 0
}

func (x *Gun) GetDiscoGun() *DiscoGun {
	if x != nil {
		return x.DiscoGun
	}
	return nil
}

type DamageBonus struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Type          string                 `protobuf:"bytes,1,opt,name=type,proto3" json:"type,omitempty"`
	Modifier      float64                `protobuf:"fixed64,2,opt,name=modifier,proto3" json:"modifier,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DamageBonus) Reset() {
	*x = DamageBonus{}
	mi := &file_darkstat_proto_msgTypes[38]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DamageBonus) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DamageBonus) ProtoMessage() {}

func (x *DamageBonus) ProtoReflect() protoreflect.Message {
	mi := &file_darkstat_proto_msgTypes[38]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DamageBonus.ProtoReflect.Descriptor instead.
func (*DamageBonus) Descriptor() ([]byte, []int) {
	return file_darkstat_proto_rawDescGZIP(), []int{38}
}

func (x *DamageBonus) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *DamageBonus) GetModifier() float64 {
	if x != nil {
		return x.Modifier
	}
	return 0
}

type Missile struct {
	state              protoimpl.MessageState `protogen:"open.v1"`
	MaxAngularVelocity float64                `protobuf:"fixed64,1,opt,name=max_angular_velocity,json=maxAngularVelocity,proto3" json:"max_angular_velocity,omitempty"`
	unknownFields      protoimpl.UnknownFields
	sizeCache          protoimpl.SizeCache
}

func (x *Missile) Reset() {
	*x = Missile{}
	mi := &file_darkstat_proto_msgTypes[39]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Missile) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Missile) ProtoMessage() {}

func (x *Missile) ProtoReflect() protoreflect.Message {
	mi := &file_darkstat_proto_msgTypes[39]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Missile.ProtoReflect.Descriptor instead.
func (*Missile) Descriptor() ([]byte, []int) {
	return file_darkstat_proto_rawDescGZIP(), []int{39}
}

func (x *Missile) GetMaxAngularVelocity() float64 {
	if x != nil {
		return x.MaxAngularVelocity
	}
	return 0
}

type GunDetailed struct {
	state             protoimpl.MessageState `protogen:"open.v1"`
	FlashParticleName string                 `protobuf:"bytes,1,opt,name=flash_particle_name,json=flashParticleName,proto3" json:"flash_particle_name,omitempty"`
	ConstEffect       string                 `protobuf:"bytes,2,opt,name=const_effect,json=constEffect,proto3" json:"const_effect,omitempty"`
	MunitionHitEffect string                 `protobuf:"bytes,3,opt,name=munition_hit_effect,json=munitionHitEffect,proto3" json:"munition_hit_effect,omitempty"`
	unknownFields     protoimpl.UnknownFields
	sizeCache         protoimpl.SizeCache
}

func (x *GunDetailed) Reset() {
	*x = GunDetailed{}
	mi := &file_darkstat_proto_msgTypes[40]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GunDetailed) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GunDetailed) ProtoMessage() {}

func (x *GunDetailed) ProtoReflect() protoreflect.Message {
	mi := &file_darkstat_proto_msgTypes[40]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GunDetailed.ProtoReflect.Descriptor instead.
func (*GunDetailed) Descriptor() ([]byte, []int) {
	return file_darkstat_proto_rawDescGZIP(), []int{40}
}

func (x *GunDetailed) GetFlashParticleName() string {
	if x != nil {
		return x.FlashParticleName
	}
	return ""
}

func (x *GunDetailed) GetConstEffect() string {
	if x != nil {
		return x.ConstEffect
	}
	return ""
}

func (x *GunDetailed) GetMunitionHitEffect() string {
	if x != nil {
		return x.MunitionHitEffect
	}
	return ""
}

type BurstFire struct {
	state                          protoimpl.MessageState `protogen:"open.v1"`
	SustainedRefire                float64                `protobuf:"fixed64,1,opt,name=sustained_refire,json=sustainedRefire,proto3" json:"sustained_refire,omitempty"`
	Ammo                           int64                  `protobuf:"varint,2,opt,name=ammo,proto3" json:"ammo,omitempty"`
	ReloadTime                     float64                `protobuf:"fixed64,3,opt,name=reload_time,json=reloadTime,proto3" json:"reload_time,omitempty"`
	SustainedHullDamagePerSec      float64                `protobuf:"fixed64,4,opt,name=sustained_hull_damage_per_sec,json=sustainedHullDamagePerSec,proto3" json:"sustained_hull_damage_per_sec,omitempty"`
	SustainedAvgShieldDamagePerSec float64                `protobuf:"fixed64,5,opt,name=sustained_avg_shield_damage_per_sec,json=sustainedAvgShieldDamagePerSec,proto3" json:"sustained_avg_shield_damage_per_sec,omitempty"`
	SustainedEnergyDamagePerSec    float64                `protobuf:"fixed64,6,opt,name=sustained_energy_damage_per_sec,json=sustainedEnergyDamagePerSec,proto3" json:"sustained_energy_damage_per_sec,omitempty"`
	SustainedPowerUsagePerSec      float64                `protobuf:"fixed64,7,opt,name=sustained_power_usage_per_sec,json=sustainedPowerUsagePerSec,proto3" json:"sustained_power_usage_per_sec,omitempty"`
	unknownFields                  protoimpl.UnknownFields
	sizeCache                      protoimpl.SizeCache
}

func (x *BurstFire) Reset() {
	*x = BurstFire{}
	mi := &file_darkstat_proto_msgTypes[41]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *BurstFire) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BurstFire) ProtoMessage() {}

func (x *BurstFire) ProtoReflect() protoreflect.Message {
	mi := &file_darkstat_proto_msgTypes[41]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BurstFire.ProtoReflect.Descriptor instead.
func (*BurstFire) Descriptor() ([]byte, []int) {
	return file_darkstat_proto_rawDescGZIP(), []int{41}
}

func (x *BurstFire) GetSustainedRefire() float64 {
	if x != nil {
		return x.SustainedRefire
	}
	return 0
}

func (x *BurstFire) GetAmmo() int64 {
	if x != nil {
		return x.Ammo
	}
	return 0
}

func (x *BurstFire) GetReloadTime() float64 {
	if x != nil {
		return x.ReloadTime
	}
	return 0
}

func (x *BurstFire) GetSustainedHullDamagePerSec() float64 {
	if x != nil {
		return x.SustainedHullDamagePerSec
	}
	return 0
}

func (x *BurstFire) GetSustainedAvgShieldDamagePerSec() float64 {
	if x != nil {
		return x.SustainedAvgShieldDamagePerSec
	}
	return 0
}

func (x *BurstFire) GetSustainedEnergyDamagePerSec() float64 {
	if x != nil {
		return x.SustainedEnergyDamagePerSec
	}
	return 0
}

func (x *BurstFire) GetSustainedPowerUsagePerSec() float64 {
	if x != nil {
		return x.SustainedPowerUsagePerSec
	}
	return 0
}

type DiscoGun struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	ArmorPen      float64                `protobuf:"fixed64,1,opt,name=armor_pen,json=armorPen,proto3" json:"armor_pen,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DiscoGun) Reset() {
	*x = DiscoGun{}
	mi := &file_darkstat_proto_msgTypes[42]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DiscoGun) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DiscoGun) ProtoMessage() {}

func (x *DiscoGun) ProtoReflect() protoreflect.Message {
	mi := &file_darkstat_proto_msgTypes[42]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DiscoGun.ProtoReflect.Descriptor instead.
func (*DiscoGun) Descriptor() ([]byte, []int) {
	return file_darkstat_proto_rawDescGZIP(), []int{42}
}

func (x *DiscoGun) GetArmorPen() float64 {
	if x != nil {
		return x.ArmorPen
	}
	return 0
}

type GetMinesReply struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Items         []*Mine                `protobuf:"bytes,1,rep,name=items,proto3" json:"items,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetMinesReply) Reset() {
	*x = GetMinesReply{}
	mi := &file_darkstat_proto_msgTypes[43]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetMinesReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetMinesReply) ProtoMessage() {}

func (x *GetMinesReply) ProtoReflect() protoreflect.Message {
	mi := &file_darkstat_proto_msgTypes[43]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetMinesReply.ProtoReflect.Descriptor instead.
func (*GetMinesReply) Descriptor() ([]byte, []int) {
	return file_darkstat_proto_rawDescGZIP(), []int{43}
}

func (x *GetMinesReply) GetItems() []*Mine {
	if x != nil {
		return x.Items
	}
	return nil
}

type Mine struct {
	state               protoimpl.MessageState `protogen:"open.v1"`
	Name                string                 `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Price               int64                  `protobuf:"varint,2,opt,name=price,proto3" json:"price,omitempty"`
	AmmoPrice           int64                  `protobuf:"varint,3,opt,name=ammo_price,json=ammoPrice,proto3" json:"ammo_price,omitempty"`
	Nickname            string                 `protobuf:"bytes,4,opt,name=nickname,proto3" json:"nickname,omitempty"`
	ProjectileArchetype string                 `protobuf:"bytes,5,opt,name=projectile_archetype,json=projectileArchetype,proto3" json:"projectile_archetype,omitempty"`
	IdsName             int64                  `protobuf:"varint,6,opt,name=ids_name,json=idsName,proto3" json:"ids_name,omitempty"`
	IdsInfo             int64                  `protobuf:"varint,7,opt,name=ids_info,json=idsInfo,proto3" json:"ids_info,omitempty"`
	HullDamage          int64                  `protobuf:"varint,8,opt,name=hull_damage,json=hullDamage,proto3" json:"hull_damage,omitempty"`
	EnergyDamange       int64                  `protobuf:"varint,9,opt,name=energy_damange,json=energyDamange,proto3" json:"energy_damange,omitempty"`
	ShieldDamage        int64                  `protobuf:"varint,10,opt,name=shield_damage,json=shieldDamage,proto3" json:"shield_damage,omitempty"`
	PowerUsage          float64                `protobuf:"fixed64,11,opt,name=power_usage,json=powerUsage,proto3" json:"power_usage,omitempty"`
	Value               float64                `protobuf:"fixed64,12,opt,name=value,proto3" json:"value,omitempty"`
	Refire              float64                `protobuf:"fixed64,13,opt,name=refire,proto3" json:"refire,omitempty"`
	DetonationDistance  float64                `protobuf:"fixed64,14,opt,name=detonation_distance,json=detonationDistance,proto3" json:"detonation_distance,omitempty"`
	Radius              float64                `protobuf:"fixed64,15,opt,name=radius,proto3" json:"radius,omitempty"`
	SeekDistance        int64                  `protobuf:"varint,16,opt,name=seek_distance,json=seekDistance,proto3" json:"seek_distance,omitempty"`
	TopSpeed            int64                  `protobuf:"varint,17,opt,name=top_speed,json=topSpeed,proto3" json:"top_speed,omitempty"`
	Acceleration        int64                  `protobuf:"varint,18,opt,name=acceleration,proto3" json:"acceleration,omitempty"`
	LinearDrag          float64                `protobuf:"fixed64,19,opt,name=linear_drag,json=linearDrag,proto3" json:"linear_drag,omitempty"`
	LifeTime            float64                `protobuf:"fixed64,20,opt,name=life_time,json=lifeTime,proto3" json:"life_time,omitempty"`
	OwnerSafe           int64                  `protobuf:"varint,21,opt,name=owner_safe,json=ownerSafe,proto3" json:"owner_safe,omitempty"`
	Toughness           float64                `protobuf:"fixed64,22,opt,name=toughness,proto3" json:"toughness,omitempty"`
	HitPts              int64                  `protobuf:"varint,23,opt,name=hit_pts,json=hitPts,proto3" json:"hit_pts,omitempty"`
	Lootable            bool                   `protobuf:"varint,24,opt,name=lootable,proto3" json:"lootable,omitempty"`
	AmmoLimit           *AmmoLimit             `protobuf:"bytes,25,opt,name=ammo_limit,json=ammoLimit,proto3" json:"ammo_limit,omitempty"`
	Mass                float64                `protobuf:"fixed64,26,opt,name=mass,proto3" json:"mass,omitempty"`
	Bases               map[string]*MarketGood `protobuf:"bytes,27,rep,name=bases,proto3" json:"bases,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	DiscoveryTechCompat *DiscoveryTechCompat   `protobuf:"bytes,28,opt,name=discovery_tech_compat,json=discoveryTechCompat,proto3,oneof" json:"discovery_tech_compat,omitempty"`
	unknownFields       protoimpl.UnknownFields
	sizeCache           protoimpl.SizeCache
}

func (x *Mine) Reset() {
	*x = Mine{}
	mi := &file_darkstat_proto_msgTypes[44]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Mine) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Mine) ProtoMessage() {}

func (x *Mine) ProtoReflect() protoreflect.Message {
	mi := &file_darkstat_proto_msgTypes[44]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Mine.ProtoReflect.Descriptor instead.
func (*Mine) Descriptor() ([]byte, []int) {
	return file_darkstat_proto_rawDescGZIP(), []int{44}
}

func (x *Mine) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Mine) GetPrice() int64 {
	if x != nil {
		return x.Price
	}
	return 0
}

func (x *Mine) GetAmmoPrice() int64 {
	if x != nil {
		return x.AmmoPrice
	}
	return 0
}

func (x *Mine) GetNickname() string {
	if x != nil {
		return x.Nickname
	}
	return ""
}

func (x *Mine) GetProjectileArchetype() string {
	if x != nil {
		return x.ProjectileArchetype
	}
	return ""
}

func (x *Mine) GetIdsName() int64 {
	if x != nil {
		return x.IdsName
	}
	return 0
}

func (x *Mine) GetIdsInfo() int64 {
	if x != nil {
		return x.IdsInfo
	}
	return 0
}

func (x *Mine) GetHullDamage() int64 {
	if x != nil {
		return x.HullDamage
	}
	return 0
}

func (x *Mine) GetEnergyDamange() int64 {
	if x != nil {
		return x.EnergyDamange
	}
	return 0
}

func (x *Mine) GetShieldDamage() int64 {
	if x != nil {
		return x.ShieldDamage
	}
	return 0
}

func (x *Mine) GetPowerUsage() float64 {
	if x != nil {
		return x.PowerUsage
	}
	return 0
}

func (x *Mine) GetValue() float64 {
	if x != nil {
		return x.Value
	}
	return 0
}

func (x *Mine) GetRefire() float64 {
	if x != nil {
		return x.Refire
	}
	return 0
}

func (x *Mine) GetDetonationDistance() float64 {
	if x != nil {
		return x.DetonationDistance
	}
	return 0
}

func (x *Mine) GetRadius() float64 {
	if x != nil {
		return x.Radius
	}
	return 0
}

func (x *Mine) GetSeekDistance() int64 {
	if x != nil {
		return x.SeekDistance
	}
	return 0
}

func (x *Mine) GetTopSpeed() int64 {
	if x != nil {
		return x.TopSpeed
	}
	return 0
}

func (x *Mine) GetAcceleration() int64 {
	if x != nil {
		return x.Acceleration
	}
	return 0
}

func (x *Mine) GetLinearDrag() float64 {
	if x != nil {
		return x.LinearDrag
	}
	return 0
}

func (x *Mine) GetLifeTime() float64 {
	if x != nil {
		return x.LifeTime
	}
	return 0
}

func (x *Mine) GetOwnerSafe() int64 {
	if x != nil {
		return x.OwnerSafe
	}
	return 0
}

func (x *Mine) GetToughness() float64 {
	if x != nil {
		return x.Toughness
	}
	return 0
}

func (x *Mine) GetHitPts() int64 {
	if x != nil {
		return x.HitPts
	}
	return 0
}

func (x *Mine) GetLootable() bool {
	if x != nil {
		return x.Lootable
	}
	return false
}

func (x *Mine) GetAmmoLimit() *AmmoLimit {
	if x != nil {
		return x.AmmoLimit
	}
	return nil
}

func (x *Mine) GetMass() float64 {
	if x != nil {
		return x.Mass
	}
	return 0
}

func (x *Mine) GetBases() map[string]*MarketGood {
	if x != nil {
		return x.Bases
	}
	return nil
}

func (x *Mine) GetDiscoveryTechCompat() *DiscoveryTechCompat {
	if x != nil {
		return x.DiscoveryTechCompat
	}
	return nil
}

type AmmoLimit struct {
	state            protoimpl.MessageState `protogen:"open.v1"`
	AmountInCatridge *int64                 `protobuf:"varint,1,opt,name=amount_in_catridge,json=amountInCatridge,proto3,oneof" json:"amount_in_catridge,omitempty"`
	MaxCatridges     *int64                 `protobuf:"varint,2,opt,name=max_catridges,json=maxCatridges,proto3,oneof" json:"max_catridges,omitempty"`
	unknownFields    protoimpl.UnknownFields
	sizeCache        protoimpl.SizeCache
}

func (x *AmmoLimit) Reset() {
	*x = AmmoLimit{}
	mi := &file_darkstat_proto_msgTypes[45]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AmmoLimit) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AmmoLimit) ProtoMessage() {}

func (x *AmmoLimit) ProtoReflect() protoreflect.Message {
	mi := &file_darkstat_proto_msgTypes[45]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AmmoLimit.ProtoReflect.Descriptor instead.
func (*AmmoLimit) Descriptor() ([]byte, []int) {
	return file_darkstat_proto_rawDescGZIP(), []int{45}
}

func (x *AmmoLimit) GetAmountInCatridge() int64 {
	if x != nil && x.AmountInCatridge != nil {
		return *x.AmountInCatridge
	}
	return 0
}

func (x *AmmoLimit) GetMaxCatridges() int64 {
	if x != nil && x.MaxCatridges != nil {
		return *x.MaxCatridges
	}
	return 0
}

type GetScannersReply struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Items         []*Scanner             `protobuf:"bytes,1,rep,name=items,proto3" json:"items,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetScannersReply) Reset() {
	*x = GetScannersReply{}
	mi := &file_darkstat_proto_msgTypes[46]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetScannersReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetScannersReply) ProtoMessage() {}

func (x *GetScannersReply) ProtoReflect() protoreflect.Message {
	mi := &file_darkstat_proto_msgTypes[46]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetScannersReply.ProtoReflect.Descriptor instead.
func (*GetScannersReply) Descriptor() ([]byte, []int) {
	return file_darkstat_proto_rawDescGZIP(), []int{46}
}

func (x *GetScannersReply) GetItems() []*Scanner {
	if x != nil {
		return x.Items
	}
	return nil
}

type Scanner struct {
	state               protoimpl.MessageState `protogen:"open.v1"`
	Name                string                 `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Price               int64                  `protobuf:"varint,2,opt,name=price,proto3" json:"price,omitempty"`
	Range               int64                  `protobuf:"varint,3,opt,name=range,proto3" json:"range,omitempty"`
	CargoScanRange      int64                  `protobuf:"varint,4,opt,name=cargo_scan_range,json=cargoScanRange,proto3" json:"cargo_scan_range,omitempty"`
	Lootable            bool                   `protobuf:"varint,5,opt,name=lootable,proto3" json:"lootable,omitempty"`
	Nickname            string                 `protobuf:"bytes,6,opt,name=nickname,proto3" json:"nickname,omitempty"`
	NameId              int64                  `protobuf:"varint,7,opt,name=name_id,json=nameId,proto3" json:"name_id,omitempty"`
	InfoId              int64                  `protobuf:"varint,8,opt,name=info_id,json=infoId,proto3" json:"info_id,omitempty"`
	Mass                float64                `protobuf:"fixed64,9,opt,name=mass,proto3" json:"mass,omitempty"`
	Bases               map[string]*MarketGood `protobuf:"bytes,10,rep,name=bases,proto3" json:"bases,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	DiscoveryTechCompat *DiscoveryTechCompat   `protobuf:"bytes,11,opt,name=discovery_tech_compat,json=discoveryTechCompat,proto3,oneof" json:"discovery_tech_compat,omitempty"`
	unknownFields       protoimpl.UnknownFields
	sizeCache           protoimpl.SizeCache
}

func (x *Scanner) Reset() {
	*x = Scanner{}
	mi := &file_darkstat_proto_msgTypes[47]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Scanner) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Scanner) ProtoMessage() {}

func (x *Scanner) ProtoReflect() protoreflect.Message {
	mi := &file_darkstat_proto_msgTypes[47]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Scanner.ProtoReflect.Descriptor instead.
func (*Scanner) Descriptor() ([]byte, []int) {
	return file_darkstat_proto_rawDescGZIP(), []int{47}
}

func (x *Scanner) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Scanner) GetPrice() int64 {
	if x != nil {
		return x.Price
	}
	return 0
}

func (x *Scanner) GetRange() int64 {
	if x != nil {
		return x.Range
	}
	return 0
}

func (x *Scanner) GetCargoScanRange() int64 {
	if x != nil {
		return x.CargoScanRange
	}
	return 0
}

func (x *Scanner) GetLootable() bool {
	if x != nil {
		return x.Lootable
	}
	return false
}

func (x *Scanner) GetNickname() string {
	if x != nil {
		return x.Nickname
	}
	return ""
}

func (x *Scanner) GetNameId() int64 {
	if x != nil {
		return x.NameId
	}
	return 0
}

func (x *Scanner) GetInfoId() int64 {
	if x != nil {
		return x.InfoId
	}
	return 0
}

func (x *Scanner) GetMass() float64 {
	if x != nil {
		return x.Mass
	}
	return 0
}

func (x *Scanner) GetBases() map[string]*MarketGood {
	if x != nil {
		return x.Bases
	}
	return nil
}

func (x *Scanner) GetDiscoveryTechCompat() *DiscoveryTechCompat {
	if x != nil {
		return x.DiscoveryTechCompat
	}
	return nil
}

type GetShieldsReply struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Items         []*Shield              `protobuf:"bytes,1,rep,name=items,proto3" json:"items,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetShieldsReply) Reset() {
	*x = GetShieldsReply{}
	mi := &file_darkstat_proto_msgTypes[48]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetShieldsReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetShieldsReply) ProtoMessage() {}

func (x *GetShieldsReply) ProtoReflect() protoreflect.Message {
	mi := &file_darkstat_proto_msgTypes[48]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetShieldsReply.ProtoReflect.Descriptor instead.
func (*GetShieldsReply) Descriptor() ([]byte, []int) {
	return file_darkstat_proto_rawDescGZIP(), []int{48}
}

func (x *GetShieldsReply) GetItems() []*Shield {
	if x != nil {
		return x.Items
	}
	return nil
}

type Shield struct {
	state               protoimpl.MessageState `protogen:"open.v1"`
	Name                string                 `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Class               string                 `protobuf:"bytes,2,opt,name=class,proto3" json:"class,omitempty"`
	Type                string                 `protobuf:"bytes,3,opt,name=type,proto3" json:"type,omitempty"`
	Technology          string                 `protobuf:"bytes,4,opt,name=technology,proto3" json:"technology,omitempty"`
	Price               int64                  `protobuf:"varint,5,opt,name=price,proto3" json:"price,omitempty"`
	Capacity            int64                  `protobuf:"varint,6,opt,name=capacity,proto3" json:"capacity,omitempty"`
	RegenerationRate    int64                  `protobuf:"varint,7,opt,name=regeneration_rate,json=regenerationRate,proto3" json:"regeneration_rate,omitempty"`
	ConstantPowerDraw   int64                  `protobuf:"varint,8,opt,name=constant_power_draw,json=constantPowerDraw,proto3" json:"constant_power_draw,omitempty"`
	Value               float64                `protobuf:"fixed64,9,opt,name=value,proto3" json:"value,omitempty"`
	RebuildPowerDraw    int64                  `protobuf:"varint,10,opt,name=rebuild_power_draw,json=rebuildPowerDraw,proto3" json:"rebuild_power_draw,omitempty"`
	OffRebuildTime      int64                  `protobuf:"varint,11,opt,name=off_rebuild_time,json=offRebuildTime,proto3" json:"off_rebuild_time,omitempty"`
	Toughness           float64                `protobuf:"fixed64,12,opt,name=toughness,proto3" json:"toughness,omitempty"`
	HitPts              int64                  `protobuf:"varint,13,opt,name=hit_pts,json=hitPts,proto3" json:"hit_pts,omitempty"`
	Lootable            bool                   `protobuf:"varint,14,opt,name=lootable,proto3" json:"lootable,omitempty"`
	Nickname            string                 `protobuf:"bytes,15,opt,name=nickname,proto3" json:"nickname,omitempty"`
	HpType              string                 `protobuf:"bytes,16,opt,name=hp_type,json=hpType,proto3" json:"hp_type,omitempty"`
	IdsName             int64                  `protobuf:"varint,17,opt,name=ids_name,json=idsName,proto3" json:"ids_name,omitempty"`
	IdsInfo             int64                  `protobuf:"varint,18,opt,name=ids_info,json=idsInfo,proto3" json:"ids_info,omitempty"`
	Mass                float64                `protobuf:"fixed64,19,opt,name=mass,proto3" json:"mass,omitempty"`
	Bases               map[string]*MarketGood `protobuf:"bytes,20,rep,name=bases,proto3" json:"bases,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	DiscoveryTechCompat *DiscoveryTechCompat   `protobuf:"bytes,21,opt,name=discovery_tech_compat,json=discoveryTechCompat,proto3,oneof" json:"discovery_tech_compat,omitempty"`
	unknownFields       protoimpl.UnknownFields
	sizeCache           protoimpl.SizeCache
}

func (x *Shield) Reset() {
	*x = Shield{}
	mi := &file_darkstat_proto_msgTypes[49]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Shield) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Shield) ProtoMessage() {}

func (x *Shield) ProtoReflect() protoreflect.Message {
	mi := &file_darkstat_proto_msgTypes[49]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Shield.ProtoReflect.Descriptor instead.
func (*Shield) Descriptor() ([]byte, []int) {
	return file_darkstat_proto_rawDescGZIP(), []int{49}
}

func (x *Shield) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Shield) GetClass() string {
	if x != nil {
		return x.Class
	}
	return ""
}

func (x *Shield) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *Shield) GetTechnology() string {
	if x != nil {
		return x.Technology
	}
	return ""
}

func (x *Shield) GetPrice() int64 {
	if x != nil {
		return x.Price
	}
	return 0
}

func (x *Shield) GetCapacity() int64 {
	if x != nil {
		return x.Capacity
	}
	return 0
}

func (x *Shield) GetRegenerationRate() int64 {
	if x != nil {
		return x.RegenerationRate
	}
	return 0
}

func (x *Shield) GetConstantPowerDraw() int64 {
	if x != nil {
		return x.ConstantPowerDraw
	}
	return 0
}

func (x *Shield) GetValue() float64 {
	if x != nil {
		return x.Value
	}
	return 0
}

func (x *Shield) GetRebuildPowerDraw() int64 {
	if x != nil {
		return x.RebuildPowerDraw
	}
	return 0
}

func (x *Shield) GetOffRebuildTime() int64 {
	if x != nil {
		return x.OffRebuildTime
	}
	return 0
}

func (x *Shield) GetToughness() float64 {
	if x != nil {
		return x.Toughness
	}
	return 0
}

func (x *Shield) GetHitPts() int64 {
	if x != nil {
		return x.HitPts
	}
	return 0
}

func (x *Shield) GetLootable() bool {
	if x != nil {
		return x.Lootable
	}
	return false
}

func (x *Shield) GetNickname() string {
	if x != nil {
		return x.Nickname
	}
	return ""
}

func (x *Shield) GetHpType() string {
	if x != nil {
		return x.HpType
	}
	return ""
}

func (x *Shield) GetIdsName() int64 {
	if x != nil {
		return x.IdsName
	}
	return 0
}

func (x *Shield) GetIdsInfo() int64 {
	if x != nil {
		return x.IdsInfo
	}
	return 0
}

func (x *Shield) GetMass() float64 {
	if x != nil {
		return x.Mass
	}
	return 0
}

func (x *Shield) GetBases() map[string]*MarketGood {
	if x != nil {
		return x.Bases
	}
	return nil
}

func (x *Shield) GetDiscoveryTechCompat() *DiscoveryTechCompat {
	if x != nil {
		return x.DiscoveryTechCompat
	}
	return nil
}

type GetShipsReply struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Items         []*Ship                `protobuf:"bytes,1,rep,name=items,proto3" json:"items,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetShipsReply) Reset() {
	*x = GetShipsReply{}
	mi := &file_darkstat_proto_msgTypes[50]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetShipsReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetShipsReply) ProtoMessage() {}

func (x *GetShipsReply) ProtoReflect() protoreflect.Message {
	mi := &file_darkstat_proto_msgTypes[50]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetShipsReply.ProtoReflect.Descriptor instead.
func (*GetShipsReply) Descriptor() ([]byte, []int) {
	return file_darkstat_proto_rawDescGZIP(), []int{50}
}

func (x *GetShipsReply) GetItems() []*Ship {
	if x != nil {
		return x.Items
	}
	return nil
}

type Ship struct {
	state                         protoimpl.MessageState `protogen:"open.v1"`
	Nickname                      string                 `protobuf:"bytes,1,opt,name=nickname,proto3" json:"nickname,omitempty"`
	Name                          string                 `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Class                         int64                  `protobuf:"varint,3,opt,name=class,proto3" json:"class,omitempty"`
	Type                          string                 `protobuf:"bytes,4,opt,name=type,proto3" json:"type,omitempty"`
	Price                         int64                  `protobuf:"varint,5,opt,name=price,proto3" json:"price,omitempty"`
	Armor                         int64                  `protobuf:"varint,6,opt,name=armor,proto3" json:"armor,omitempty"`
	HoldSize                      int64                  `protobuf:"varint,7,opt,name=hold_size,json=holdSize,proto3" json:"hold_size,omitempty"`
	Nanobots                      int64                  `protobuf:"varint,8,opt,name=nanobots,proto3" json:"nanobots,omitempty"`
	Batteries                     int64                  `protobuf:"varint,9,opt,name=batteries,proto3" json:"batteries,omitempty"`
	Mass                          float64                `protobuf:"fixed64,10,opt,name=mass,proto3" json:"mass,omitempty"`
	PowerCapacity                 int64                  `protobuf:"varint,11,opt,name=power_capacity,json=powerCapacity,proto3" json:"power_capacity,omitempty"`
	PowerRechargeRate             int64                  `protobuf:"varint,12,opt,name=power_recharge_rate,json=powerRechargeRate,proto3" json:"power_recharge_rate,omitempty"`
	CruiseSpeed                   int64                  `protobuf:"varint,13,opt,name=cruise_speed,json=cruiseSpeed,proto3" json:"cruise_speed,omitempty"`
	LinearDrag                    float64                `protobuf:"fixed64,14,opt,name=linear_drag,json=linearDrag,proto3" json:"linear_drag,omitempty"`
	EngineMaxForce                int64                  `protobuf:"varint,15,opt,name=engine_max_force,json=engineMaxForce,proto3" json:"engine_max_force,omitempty"`
	ImpulseSpeed                  float64                `protobuf:"fixed64,16,opt,name=impulse_speed,json=impulseSpeed,proto3" json:"impulse_speed,omitempty"`
	ThrusterSpeed                 []int64                `protobuf:"varint,17,rep,packed,name=thruster_speed,json=thrusterSpeed,proto3" json:"thruster_speed,omitempty"`
	ReverseFraction               float64                `protobuf:"fixed64,18,opt,name=reverse_fraction,json=reverseFraction,proto3" json:"reverse_fraction,omitempty"`
	ThrustCapacity                int64                  `protobuf:"varint,19,opt,name=thrust_capacity,json=thrustCapacity,proto3" json:"thrust_capacity,omitempty"`
	ThrustRecharge                int64                  `protobuf:"varint,20,opt,name=thrust_recharge,json=thrustRecharge,proto3" json:"thrust_recharge,omitempty"`
	MaxAngularSpeedDegS           float64                `protobuf:"fixed64,21,opt,name=max_angular_speed_deg_s,json=maxAngularSpeedDegS,proto3" json:"max_angular_speed_deg_s,omitempty"`
	AngularDistanceFrom0ToHalfSec float64                `protobuf:"fixed64,22,opt,name=angular_distance_from0_to_half_sec,json=angularDistanceFrom0ToHalfSec,proto3" json:"angular_distance_from0_to_half_sec,omitempty"`
	TimeTo90MaxAngularSpeed       float64                `protobuf:"fixed64,23,opt,name=time_to90_max_angular_speed,json=timeTo90MaxAngularSpeed,proto3" json:"time_to90_max_angular_speed,omitempty"`
	NudgeForce                    float64                `protobuf:"fixed64,24,opt,name=nudge_force,json=nudgeForce,proto3" json:"nudge_force,omitempty"`
	StrafeForce                   float64                `protobuf:"fixed64,25,opt,name=strafe_force,json=strafeForce,proto3" json:"strafe_force,omitempty"`
	NameId                        int64                  `protobuf:"varint,26,opt,name=name_id,json=nameId,proto3" json:"name_id,omitempty"`
	InfoId                        int64                  `protobuf:"varint,27,opt,name=info_id,json=infoId,proto3" json:"info_id,omitempty"`
	Slots                         []*EquipmentSlot       `protobuf:"bytes,28,rep,name=slots,proto3" json:"slots,omitempty"`
	BiggestHardpoint              []string               `protobuf:"bytes,29,rep,name=biggest_hardpoint,json=biggestHardpoint,proto3" json:"biggest_hardpoint,omitempty"`
	ShipPackages                  []*ShipPackage         `protobuf:"bytes,30,rep,name=ship_packages,json=shipPackages,proto3" json:"ship_packages,omitempty"`
	Bases                         map[string]*MarketGood `protobuf:"bytes,31,rep,name=bases,proto3" json:"bases,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	DiscoveryTechCompat           *DiscoveryTechCompat   `protobuf:"bytes,32,opt,name=discovery_tech_compat,json=discoveryTechCompat,proto3,oneof" json:"discovery_tech_compat,omitempty"`
	DiscoShip                     *DiscoShip             `protobuf:"bytes,33,opt,name=disco_ship,json=discoShip,proto3,oneof" json:"disco_ship,omitempty"`
	unknownFields                 protoimpl.UnknownFields
	sizeCache                     protoimpl.SizeCache
}

func (x *Ship) Reset() {
	*x = Ship{}
	mi := &file_darkstat_proto_msgTypes[51]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Ship) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Ship) ProtoMessage() {}

func (x *Ship) ProtoReflect() protoreflect.Message {
	mi := &file_darkstat_proto_msgTypes[51]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Ship.ProtoReflect.Descriptor instead.
func (*Ship) Descriptor() ([]byte, []int) {
	return file_darkstat_proto_rawDescGZIP(), []int{51}
}

func (x *Ship) GetNickname() string {
	if x != nil {
		return x.Nickname
	}
	return ""
}

func (x *Ship) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Ship) GetClass() int64 {
	if x != nil {
		return x.Class
	}
	return 0
}

func (x *Ship) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *Ship) GetPrice() int64 {
	if x != nil {
		return x.Price
	}
	return 0
}

func (x *Ship) GetArmor() int64 {
	if x != nil {
		return x.Armor
	}
	return 0
}

func (x *Ship) GetHoldSize() int64 {
	if x != nil {
		return x.HoldSize
	}
	return 0
}

func (x *Ship) GetNanobots() int64 {
	if x != nil {
		return x.Nanobots
	}
	return 0
}

func (x *Ship) GetBatteries() int64 {
	if x != nil {
		return x.Batteries
	}
	return 0
}

func (x *Ship) GetMass() float64 {
	if x != nil {
		return x.Mass
	}
	return 0
}

func (x *Ship) GetPowerCapacity() int64 {
	if x != nil {
		return x.PowerCapacity
	}
	return 0
}

func (x *Ship) GetPowerRechargeRate() int64 {
	if x != nil {
		return x.PowerRechargeRate
	}
	return 0
}

func (x *Ship) GetCruiseSpeed() int64 {
	if x != nil {
		return x.CruiseSpeed
	}
	return 0
}

func (x *Ship) GetLinearDrag() float64 {
	if x != nil {
		return x.LinearDrag
	}
	return 0
}

func (x *Ship) GetEngineMaxForce() int64 {
	if x != nil {
		return x.EngineMaxForce
	}
	return 0
}

func (x *Ship) GetImpulseSpeed() float64 {
	if x != nil {
		return x.ImpulseSpeed
	}
	return 0
}

func (x *Ship) GetThrusterSpeed() []int64 {
	if x != nil {
		return x.ThrusterSpeed
	}
	return nil
}

func (x *Ship) GetReverseFraction() float64 {
	if x != nil {
		return x.ReverseFraction
	}
	return 0
}

func (x *Ship) GetThrustCapacity() int64 {
	if x != nil {
		return x.ThrustCapacity
	}
	return 0
}

func (x *Ship) GetThrustRecharge() int64 {
	if x != nil {
		return x.ThrustRecharge
	}
	return 0
}

func (x *Ship) GetMaxAngularSpeedDegS() float64 {
	if x != nil {
		return x.MaxAngularSpeedDegS
	}
	return 0
}

func (x *Ship) GetAngularDistanceFrom0ToHalfSec() float64 {
	if x != nil {
		return x.AngularDistanceFrom0ToHalfSec
	}
	return 0
}

func (x *Ship) GetTimeTo90MaxAngularSpeed() float64 {
	if x != nil {
		return x.TimeTo90MaxAngularSpeed
	}
	return 0
}

func (x *Ship) GetNudgeForce() float64 {
	if x != nil {
		return x.NudgeForce
	}
	return 0
}

func (x *Ship) GetStrafeForce() float64 {
	if x != nil {
		return x.StrafeForce
	}
	return 0
}

func (x *Ship) GetNameId() int64 {
	if x != nil {
		return x.NameId
	}
	return 0
}

func (x *Ship) GetInfoId() int64 {
	if x != nil {
		return x.InfoId
	}
	return 0
}

func (x *Ship) GetSlots() []*EquipmentSlot {
	if x != nil {
		return x.Slots
	}
	return nil
}

func (x *Ship) GetBiggestHardpoint() []string {
	if x != nil {
		return x.BiggestHardpoint
	}
	return nil
}

func (x *Ship) GetShipPackages() []*ShipPackage {
	if x != nil {
		return x.ShipPackages
	}
	return nil
}

func (x *Ship) GetBases() map[string]*MarketGood {
	if x != nil {
		return x.Bases
	}
	return nil
}

func (x *Ship) GetDiscoveryTechCompat() *DiscoveryTechCompat {
	if x != nil {
		return x.DiscoveryTechCompat
	}
	return nil
}

func (x *Ship) GetDiscoShip() *DiscoShip {
	if x != nil {
		return x.DiscoShip
	}
	return nil
}

type EquipmentSlot struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	SlotName      string                 `protobuf:"bytes,1,opt,name=slot_name,json=slotName,proto3" json:"slot_name,omitempty"`
	AllowedEquip  []string               `protobuf:"bytes,2,rep,name=allowed_equip,json=allowedEquip,proto3" json:"allowed_equip,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *EquipmentSlot) Reset() {
	*x = EquipmentSlot{}
	mi := &file_darkstat_proto_msgTypes[52]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *EquipmentSlot) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EquipmentSlot) ProtoMessage() {}

func (x *EquipmentSlot) ProtoReflect() protoreflect.Message {
	mi := &file_darkstat_proto_msgTypes[52]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EquipmentSlot.ProtoReflect.Descriptor instead.
func (*EquipmentSlot) Descriptor() ([]byte, []int) {
	return file_darkstat_proto_rawDescGZIP(), []int{52}
}

func (x *EquipmentSlot) GetSlotName() string {
	if x != nil {
		return x.SlotName
	}
	return ""
}

func (x *EquipmentSlot) GetAllowedEquip() []string {
	if x != nil {
		return x.AllowedEquip
	}
	return nil
}

type ShipPackage struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Nickname      string                 `protobuf:"bytes,1,opt,name=nickname,proto3" json:"nickname,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ShipPackage) Reset() {
	*x = ShipPackage{}
	mi := &file_darkstat_proto_msgTypes[53]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ShipPackage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ShipPackage) ProtoMessage() {}

func (x *ShipPackage) ProtoReflect() protoreflect.Message {
	mi := &file_darkstat_proto_msgTypes[53]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ShipPackage.ProtoReflect.Descriptor instead.
func (*ShipPackage) Descriptor() ([]byte, []int) {
	return file_darkstat_proto_rawDescGZIP(), []int{53}
}

func (x *ShipPackage) GetNickname() string {
	if x != nil {
		return x.Nickname
	}
	return ""
}

type DiscoShip struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	ArmorMult     float64                `protobuf:"fixed64,1,opt,name=armor_mult,json=armorMult,proto3" json:"armor_mult,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DiscoShip) Reset() {
	*x = DiscoShip{}
	mi := &file_darkstat_proto_msgTypes[54]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DiscoShip) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DiscoShip) ProtoMessage() {}

func (x *DiscoShip) ProtoReflect() protoreflect.Message {
	mi := &file_darkstat_proto_msgTypes[54]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DiscoShip.ProtoReflect.Descriptor instead.
func (*DiscoShip) Descriptor() ([]byte, []int) {
	return file_darkstat_proto_rawDescGZIP(), []int{54}
}

func (x *DiscoShip) GetArmorMult() float64 {
	if x != nil {
		return x.ArmorMult
	}
	return 0
}

type GetThrustersReply struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Items         []*Thruster            `protobuf:"bytes,1,rep,name=items,proto3" json:"items,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetThrustersReply) Reset() {
	*x = GetThrustersReply{}
	mi := &file_darkstat_proto_msgTypes[55]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetThrustersReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetThrustersReply) ProtoMessage() {}

func (x *GetThrustersReply) ProtoReflect() protoreflect.Message {
	mi := &file_darkstat_proto_msgTypes[55]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetThrustersReply.ProtoReflect.Descriptor instead.
func (*GetThrustersReply) Descriptor() ([]byte, []int) {
	return file_darkstat_proto_rawDescGZIP(), []int{55}
}

func (x *GetThrustersReply) GetItems() []*Thruster {
	if x != nil {
		return x.Items
	}
	return nil
}

type Thruster struct {
	state               protoimpl.MessageState `protogen:"open.v1"`
	Name                string                 `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Price               int64                  `protobuf:"varint,2,opt,name=price,proto3" json:"price,omitempty"`
	MaxForce            int64                  `protobuf:"varint,3,opt,name=max_force,json=maxForce,proto3" json:"max_force,omitempty"`
	PowerUsage          int64                  `protobuf:"varint,4,opt,name=power_usage,json=powerUsage,proto3" json:"power_usage,omitempty"`
	Efficiency          float64                `protobuf:"fixed64,5,opt,name=efficiency,proto3" json:"efficiency,omitempty"`
	Value               float64                `protobuf:"fixed64,6,opt,name=value,proto3" json:"value,omitempty"`
	HitPts              int64                  `protobuf:"varint,7,opt,name=hit_pts,json=hitPts,proto3" json:"hit_pts,omitempty"`
	Lootable            bool                   `protobuf:"varint,8,opt,name=lootable,proto3" json:"lootable,omitempty"`
	Nickname            string                 `protobuf:"bytes,9,opt,name=nickname,proto3" json:"nickname,omitempty"`
	NameId              int64                  `protobuf:"varint,10,opt,name=name_id,json=nameId,proto3" json:"name_id,omitempty"`
	InfoId              int64                  `protobuf:"varint,11,opt,name=info_id,json=infoId,proto3" json:"info_id,omitempty"`
	Mass                float64                `protobuf:"fixed64,12,opt,name=mass,proto3" json:"mass,omitempty"`
	Bases               map[string]*MarketGood `protobuf:"bytes,13,rep,name=bases,proto3" json:"bases,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	DiscoveryTechCompat *DiscoveryTechCompat   `protobuf:"bytes,14,opt,name=discovery_tech_compat,json=discoveryTechCompat,proto3,oneof" json:"discovery_tech_compat,omitempty"`
	unknownFields       protoimpl.UnknownFields
	sizeCache           protoimpl.SizeCache
}

func (x *Thruster) Reset() {
	*x = Thruster{}
	mi := &file_darkstat_proto_msgTypes[56]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Thruster) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Thruster) ProtoMessage() {}

func (x *Thruster) ProtoReflect() protoreflect.Message {
	mi := &file_darkstat_proto_msgTypes[56]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Thruster.ProtoReflect.Descriptor instead.
func (*Thruster) Descriptor() ([]byte, []int) {
	return file_darkstat_proto_rawDescGZIP(), []int{56}
}

func (x *Thruster) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Thruster) GetPrice() int64 {
	if x != nil {
		return x.Price
	}
	return 0
}

func (x *Thruster) GetMaxForce() int64 {
	if x != nil {
		return x.MaxForce
	}
	return 0
}

func (x *Thruster) GetPowerUsage() int64 {
	if x != nil {
		return x.PowerUsage
	}
	return 0
}

func (x *Thruster) GetEfficiency() float64 {
	if x != nil {
		return x.Efficiency
	}
	return 0
}

func (x *Thruster) GetValue() float64 {
	if x != nil {
		return x.Value
	}
	return 0
}

func (x *Thruster) GetHitPts() int64 {
	if x != nil {
		return x.HitPts
	}
	return 0
}

func (x *Thruster) GetLootable() bool {
	if x != nil {
		return x.Lootable
	}
	return false
}

func (x *Thruster) GetNickname() string {
	if x != nil {
		return x.Nickname
	}
	return ""
}

func (x *Thruster) GetNameId() int64 {
	if x != nil {
		return x.NameId
	}
	return 0
}

func (x *Thruster) GetInfoId() int64 {
	if x != nil {
		return x.InfoId
	}
	return 0
}

func (x *Thruster) GetMass() float64 {
	if x != nil {
		return x.Mass
	}
	return 0
}

func (x *Thruster) GetBases() map[string]*MarketGood {
	if x != nil {
		return x.Bases
	}
	return nil
}

func (x *Thruster) GetDiscoveryTechCompat() *DiscoveryTechCompat {
	if x != nil {
		return x.DiscoveryTechCompat
	}
	return nil
}

type GetTractorsReply struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Items         []*Tractor             `protobuf:"bytes,1,rep,name=items,proto3" json:"items,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetTractorsReply) Reset() {
	*x = GetTractorsReply{}
	mi := &file_darkstat_proto_msgTypes[57]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetTractorsReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetTractorsReply) ProtoMessage() {}

func (x *GetTractorsReply) ProtoReflect() protoreflect.Message {
	mi := &file_darkstat_proto_msgTypes[57]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetTractorsReply.ProtoReflect.Descriptor instead.
func (*GetTractorsReply) Descriptor() ([]byte, []int) {
	return file_darkstat_proto_rawDescGZIP(), []int{57}
}

func (x *GetTractorsReply) GetItems() []*Tractor {
	if x != nil {
		return x.Items
	}
	return nil
}

type Tractor struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Name          string                 `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Price         int64                  `protobuf:"varint,2,opt,name=price,proto3" json:"price,omitempty"`
	MaxLength     int64                  `protobuf:"varint,3,opt,name=max_length,json=maxLength,proto3" json:"max_length,omitempty"`
	ReachSpeed    int64                  `protobuf:"varint,4,opt,name=reach_speed,json=reachSpeed,proto3" json:"reach_speed,omitempty"`
	Lootable      bool                   `protobuf:"varint,5,opt,name=lootable,proto3" json:"lootable,omitempty"`
	Nickname      string                 `protobuf:"bytes,6,opt,name=nickname,proto3" json:"nickname,omitempty"`
	ShortNickname string                 `protobuf:"bytes,7,opt,name=short_nickname,json=shortNickname,proto3" json:"short_nickname,omitempty"`
	NameId        int64                  `protobuf:"varint,8,opt,name=name_id,json=nameId,proto3" json:"name_id,omitempty"`
	InfoId        int64                  `protobuf:"varint,9,opt,name=info_id,json=infoId,proto3" json:"info_id,omitempty"`
	Bases         map[string]*MarketGood `protobuf:"bytes,10,rep,name=bases,proto3" json:"bases,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	Mass          float64                `protobuf:"fixed64,11,opt,name=mass,proto3" json:"mass,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Tractor) Reset() {
	*x = Tractor{}
	mi := &file_darkstat_proto_msgTypes[58]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Tractor) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Tractor) ProtoMessage() {}

func (x *Tractor) ProtoReflect() protoreflect.Message {
	mi := &file_darkstat_proto_msgTypes[58]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Tractor.ProtoReflect.Descriptor instead.
func (*Tractor) Descriptor() ([]byte, []int) {
	return file_darkstat_proto_rawDescGZIP(), []int{58}
}

func (x *Tractor) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Tractor) GetPrice() int64 {
	if x != nil {
		return x.Price
	}
	return 0
}

func (x *Tractor) GetMaxLength() int64 {
	if x != nil {
		return x.MaxLength
	}
	return 0
}

func (x *Tractor) GetReachSpeed() int64 {
	if x != nil {
		return x.ReachSpeed
	}
	return 0
}

func (x *Tractor) GetLootable() bool {
	if x != nil {
		return x.Lootable
	}
	return false
}

func (x *Tractor) GetNickname() string {
	if x != nil {
		return x.Nickname
	}
	return ""
}

func (x *Tractor) GetShortNickname() string {
	if x != nil {
		return x.ShortNickname
	}
	return ""
}

func (x *Tractor) GetNameId() int64 {
	if x != nil {
		return x.NameId
	}
	return 0
}

func (x *Tractor) GetInfoId() int64 {
	if x != nil {
		return x.InfoId
	}
	return 0
}

func (x *Tractor) GetBases() map[string]*MarketGood {
	if x != nil {
		return x.Bases
	}
	return nil
}

func (x *Tractor) GetMass() float64 {
	if x != nil {
		return x.Mass
	}
	return 0
}

type GetHashesReply struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	HashesByNick  map[string]*Hash       `protobuf:"bytes,1,rep,name=hashes_by_nick,json=hashesByNick,proto3" json:"hashes_by_nick,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetHashesReply) Reset() {
	*x = GetHashesReply{}
	mi := &file_darkstat_proto_msgTypes[59]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetHashesReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetHashesReply) ProtoMessage() {}

func (x *GetHashesReply) ProtoReflect() protoreflect.Message {
	mi := &file_darkstat_proto_msgTypes[59]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetHashesReply.ProtoReflect.Descriptor instead.
func (*GetHashesReply) Descriptor() ([]byte, []int) {
	return file_darkstat_proto_rawDescGZIP(), []int{59}
}

func (x *GetHashesReply) GetHashesByNick() map[string]*Hash {
	if x != nil {
		return x.HashesByNick
	}
	return nil
}

type Hash struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Int32         int32                  `protobuf:"varint,1,opt,name=int32,proto3" json:"int32,omitempty"`
	Uint32        uint32                 `protobuf:"varint,2,opt,name=uint32,proto3" json:"uint32,omitempty"`
	Hex           string                 `protobuf:"bytes,3,opt,name=hex,proto3" json:"hex,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Hash) Reset() {
	*x = Hash{}
	mi := &file_darkstat_proto_msgTypes[60]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Hash) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Hash) ProtoMessage() {}

func (x *Hash) ProtoReflect() protoreflect.Message {
	mi := &file_darkstat_proto_msgTypes[60]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Hash.ProtoReflect.Descriptor instead.
func (*Hash) Descriptor() ([]byte, []int) {
	return file_darkstat_proto_rawDescGZIP(), []int{60}
}

func (x *Hash) GetInt32() int32 {
	if x != nil {
		return x.Int32
	}
	return 0
}

func (x *Hash) GetUint32() uint32 {
	if x != nil {
		return x.Uint32
	}
	return 0
}

func (x *Hash) GetHex() string {
	if x != nil {
		return x.Hex
	}
	return ""
}

type GetPoBsReply struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Items         []*PoB                 `protobuf:"bytes,1,rep,name=items,proto3" json:"items,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetPoBsReply) Reset() {
	*x = GetPoBsReply{}
	mi := &file_darkstat_proto_msgTypes[61]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetPoBsReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetPoBsReply) ProtoMessage() {}

func (x *GetPoBsReply) ProtoReflect() protoreflect.Message {
	mi := &file_darkstat_proto_msgTypes[61]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetPoBsReply.ProtoReflect.Descriptor instead.
func (*GetPoBsReply) Descriptor() ([]byte, []int) {
	return file_darkstat_proto_rawDescGZIP(), []int{61}
}

func (x *GetPoBsReply) GetItems() []*PoB {
	if x != nil {
		return x.Items
	}
	return nil
}

type PoBCore struct {
	state          protoimpl.MessageState `protogen:"open.v1"`
	Nickname       string                 `protobuf:"bytes,1,opt,name=nickname,proto3" json:"nickname,omitempty"`
	Name           string                 `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Pos            *string                `protobuf:"bytes,3,opt,name=pos,proto3,oneof" json:"pos,omitempty"`
	Level          *int64                 `protobuf:"varint,4,opt,name=level,proto3,oneof" json:"level,omitempty"`
	Money          *int64                 `protobuf:"varint,5,opt,name=money,proto3,oneof" json:"money,omitempty"`
	Health         *float64               `protobuf:"fixed64,6,opt,name=health,proto3,oneof" json:"health,omitempty"`
	DefenseMode    *int64                 `protobuf:"varint,7,opt,name=defense_mode,json=defenseMode,proto3,oneof" json:"defense_mode,omitempty"`
	SystemNick     *string                `protobuf:"bytes,8,opt,name=system_nick,json=systemNick,proto3,oneof" json:"system_nick,omitempty"`
	SystemName     *string                `protobuf:"bytes,9,opt,name=system_name,json=systemName,proto3,oneof" json:"system_name,omitempty"`
	FactionNick    *string                `protobuf:"bytes,10,opt,name=faction_nick,json=factionNick,proto3,oneof" json:"faction_nick,omitempty"`
	FactionName    *string                `protobuf:"bytes,11,opt,name=faction_name,json=factionName,proto3,oneof" json:"faction_name,omitempty"`
	ForumThreadUrl *string                `protobuf:"bytes,12,opt,name=forum_thread_url,json=forumThreadUrl,proto3,oneof" json:"forum_thread_url,omitempty"`
	CargoSpaceLeft *int64                 `protobuf:"varint,13,opt,name=cargo_space_left,json=cargoSpaceLeft,proto3,oneof" json:"cargo_space_left,omitempty"`
	BasePos        *Pos                   `protobuf:"bytes,14,opt,name=base_pos,json=basePos,proto3,oneof" json:"base_pos,omitempty"`
	SectorCoord    *string                `protobuf:"bytes,15,opt,name=sector_coord,json=sectorCoord,proto3,oneof" json:"sector_coord,omitempty"`
	Region         *string                `protobuf:"bytes,16,opt,name=region,proto3,oneof" json:"region,omitempty"`
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *PoBCore) Reset() {
	*x = PoBCore{}
	mi := &file_darkstat_proto_msgTypes[62]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PoBCore) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PoBCore) ProtoMessage() {}

func (x *PoBCore) ProtoReflect() protoreflect.Message {
	mi := &file_darkstat_proto_msgTypes[62]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PoBCore.ProtoReflect.Descriptor instead.
func (*PoBCore) Descriptor() ([]byte, []int) {
	return file_darkstat_proto_rawDescGZIP(), []int{62}
}

func (x *PoBCore) GetNickname() string {
	if x != nil {
		return x.Nickname
	}
	return ""
}

func (x *PoBCore) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *PoBCore) GetPos() string {
	if x != nil && x.Pos != nil {
		return *x.Pos
	}
	return ""
}

func (x *PoBCore) GetLevel() int64 {
	if x != nil && x.Level != nil {
		return *x.Level
	}
	return 0
}

func (x *PoBCore) GetMoney() int64 {
	if x != nil && x.Money != nil {
		return *x.Money
	}
	return 0
}

func (x *PoBCore) GetHealth() float64 {
	if x != nil && x.Health != nil {
		return *x.Health
	}
	return 0
}

func (x *PoBCore) GetDefenseMode() int64 {
	if x != nil && x.DefenseMode != nil {
		return *x.DefenseMode
	}
	return 0
}

func (x *PoBCore) GetSystemNick() string {
	if x != nil && x.SystemNick != nil {
		return *x.SystemNick
	}
	return ""
}

func (x *PoBCore) GetSystemName() string {
	if x != nil && x.SystemName != nil {
		return *x.SystemName
	}
	return ""
}

func (x *PoBCore) GetFactionNick() string {
	if x != nil && x.FactionNick != nil {
		return *x.FactionNick
	}
	return ""
}

func (x *PoBCore) GetFactionName() string {
	if x != nil && x.FactionName != nil {
		return *x.FactionName
	}
	return ""
}

func (x *PoBCore) GetForumThreadUrl() string {
	if x != nil && x.ForumThreadUrl != nil {
		return *x.ForumThreadUrl
	}
	return ""
}

func (x *PoBCore) GetCargoSpaceLeft() int64 {
	if x != nil && x.CargoSpaceLeft != nil {
		return *x.CargoSpaceLeft
	}
	return 0
}

func (x *PoBCore) GetBasePos() *Pos {
	if x != nil {
		return x.BasePos
	}
	return nil
}

func (x *PoBCore) GetSectorCoord() string {
	if x != nil && x.SectorCoord != nil {
		return *x.SectorCoord
	}
	return ""
}

func (x *PoBCore) GetRegion() string {
	if x != nil && x.Region != nil {
		return *x.Region
	}
	return ""
}

type PoB struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Core          *PoBCore               `protobuf:"bytes,1,opt,name=core,proto3" json:"core,omitempty"`
	ShopItems     []*ShopItem            `protobuf:"bytes,2,rep,name=shop_items,json=shopItems,proto3" json:"shop_items,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *PoB) Reset() {
	*x = PoB{}
	mi := &file_darkstat_proto_msgTypes[63]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PoB) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PoB) ProtoMessage() {}

func (x *PoB) ProtoReflect() protoreflect.Message {
	mi := &file_darkstat_proto_msgTypes[63]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PoB.ProtoReflect.Descriptor instead.
func (*PoB) Descriptor() ([]byte, []int) {
	return file_darkstat_proto_rawDescGZIP(), []int{63}
}

func (x *PoB) GetCore() *PoBCore {
	if x != nil {
		return x.Core
	}
	return nil
}

func (x *PoB) GetShopItems() []*ShopItem {
	if x != nil {
		return x.ShopItems
	}
	return nil
}

type ShopItem struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Nickname      string                 `protobuf:"bytes,1,opt,name=nickname,proto3" json:"nickname,omitempty"`
	Name          string                 `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Category      string                 `protobuf:"bytes,3,opt,name=category,proto3" json:"category,omitempty"`
	Id            int64                  `protobuf:"varint,4,opt,name=id,proto3" json:"id,omitempty"`
	Quantity      int64                  `protobuf:"varint,5,opt,name=quantity,proto3" json:"quantity,omitempty"`
	Price         int64                  `protobuf:"varint,6,opt,name=price,proto3" json:"price,omitempty"`
	SellPrice     int64                  `protobuf:"varint,7,opt,name=sell_price,json=sellPrice,proto3" json:"sell_price,omitempty"`
	MinStock      int64                  `protobuf:"varint,8,opt,name=min_stock,json=minStock,proto3" json:"min_stock,omitempty"`
	MaxStock      int64                  `protobuf:"varint,9,opt,name=max_stock,json=maxStock,proto3" json:"max_stock,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ShopItem) Reset() {
	*x = ShopItem{}
	mi := &file_darkstat_proto_msgTypes[64]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ShopItem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ShopItem) ProtoMessage() {}

func (x *ShopItem) ProtoReflect() protoreflect.Message {
	mi := &file_darkstat_proto_msgTypes[64]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ShopItem.ProtoReflect.Descriptor instead.
func (*ShopItem) Descriptor() ([]byte, []int) {
	return file_darkstat_proto_rawDescGZIP(), []int{64}
}

func (x *ShopItem) GetNickname() string {
	if x != nil {
		return x.Nickname
	}
	return ""
}

func (x *ShopItem) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ShopItem) GetCategory() string {
	if x != nil {
		return x.Category
	}
	return ""
}

func (x *ShopItem) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *ShopItem) GetQuantity() int64 {
	if x != nil {
		return x.Quantity
	}
	return 0
}

func (x *ShopItem) GetPrice() int64 {
	if x != nil {
		return x.Price
	}
	return 0
}

func (x *ShopItem) GetSellPrice() int64 {
	if x != nil {
		return x.SellPrice
	}
	return 0
}

func (x *ShopItem) GetMinStock() int64 {
	if x != nil {
		return x.MinStock
	}
	return 0
}

func (x *ShopItem) GetMaxStock() int64 {
	if x != nil {
		return x.MaxStock
	}
	return 0
}

type GetPoBGoodsReply struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Items         []*PoBGood             `protobuf:"bytes,1,rep,name=items,proto3" json:"items,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetPoBGoodsReply) Reset() {
	*x = GetPoBGoodsReply{}
	mi := &file_darkstat_proto_msgTypes[65]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetPoBGoodsReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetPoBGoodsReply) ProtoMessage() {}

func (x *GetPoBGoodsReply) ProtoReflect() protoreflect.Message {
	mi := &file_darkstat_proto_msgTypes[65]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetPoBGoodsReply.ProtoReflect.Descriptor instead.
func (*GetPoBGoodsReply) Descriptor() ([]byte, []int) {
	return file_darkstat_proto_rawDescGZIP(), []int{65}
}

func (x *GetPoBGoodsReply) GetItems() []*PoBGood {
	if x != nil {
		return x.Items
	}
	return nil
}

type PoBGood struct {
	state                 protoimpl.MessageState `protogen:"open.v1"`
	Nickname              string                 `protobuf:"bytes,1,opt,name=nickname,proto3" json:"nickname,omitempty"`
	Name                  string                 `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	TotalBuyableFromBases int64                  `protobuf:"varint,3,opt,name=total_buyable_from_bases,json=totalBuyableFromBases,proto3" json:"total_buyable_from_bases,omitempty"`
	TotalSellableToBases  int64                  `protobuf:"varint,4,opt,name=total_sellable_to_bases,json=totalSellableToBases,proto3" json:"total_sellable_to_bases,omitempty"`
	BestPriceToBuy        *int64                 `protobuf:"varint,5,opt,name=best_price_to_buy,json=bestPriceToBuy,proto3,oneof" json:"best_price_to_buy,omitempty"`
	BestPriceToSell       *int64                 `protobuf:"varint,6,opt,name=best_price_to_sell,json=bestPriceToSell,proto3,oneof" json:"best_price_to_sell,omitempty"`
	Category              string                 `protobuf:"bytes,7,opt,name=category,proto3" json:"category,omitempty"`
	AnyBaseSells          bool                   `protobuf:"varint,8,opt,name=any_base_sells,json=anyBaseSells,proto3" json:"any_base_sells,omitempty"`
	AnyBaseBuys           bool                   `protobuf:"varint,9,opt,name=any_base_buys,json=anyBaseBuys,proto3" json:"any_base_buys,omitempty"`
	Bases                 []*PoBGoodBase         `protobuf:"bytes,10,rep,name=bases,proto3" json:"bases,omitempty"`
	unknownFields         protoimpl.UnknownFields
	sizeCache             protoimpl.SizeCache
}

func (x *PoBGood) Reset() {
	*x = PoBGood{}
	mi := &file_darkstat_proto_msgTypes[66]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PoBGood) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PoBGood) ProtoMessage() {}

func (x *PoBGood) ProtoReflect() protoreflect.Message {
	mi := &file_darkstat_proto_msgTypes[66]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PoBGood.ProtoReflect.Descriptor instead.
func (*PoBGood) Descriptor() ([]byte, []int) {
	return file_darkstat_proto_rawDescGZIP(), []int{66}
}

func (x *PoBGood) GetNickname() string {
	if x != nil {
		return x.Nickname
	}
	return ""
}

func (x *PoBGood) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *PoBGood) GetTotalBuyableFromBases() int64 {
	if x != nil {
		return x.TotalBuyableFromBases
	}
	return 0
}

func (x *PoBGood) GetTotalSellableToBases() int64 {
	if x != nil {
		return x.TotalSellableToBases
	}
	return 0
}

func (x *PoBGood) GetBestPriceToBuy() int64 {
	if x != nil && x.BestPriceToBuy != nil {
		return *x.BestPriceToBuy
	}
	return 0
}

func (x *PoBGood) GetBestPriceToSell() int64 {
	if x != nil && x.BestPriceToSell != nil {
		return *x.BestPriceToSell
	}
	return 0
}

func (x *PoBGood) GetCategory() string {
	if x != nil {
		return x.Category
	}
	return ""
}

func (x *PoBGood) GetAnyBaseSells() bool {
	if x != nil {
		return x.AnyBaseSells
	}
	return false
}

func (x *PoBGood) GetAnyBaseBuys() bool {
	if x != nil {
		return x.AnyBaseBuys
	}
	return false
}

func (x *PoBGood) GetBases() []*PoBGoodBase {
	if x != nil {
		return x.Bases
	}
	return nil
}

type PoBGoodBase struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	ShopItem      *ShopItem              `protobuf:"bytes,1,opt,name=shop_item,json=shopItem,proto3" json:"shop_item,omitempty"`
	Base          *PoBCore               `protobuf:"bytes,2,opt,name=base,proto3" json:"base,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *PoBGoodBase) Reset() {
	*x = PoBGoodBase{}
	mi := &file_darkstat_proto_msgTypes[67]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PoBGoodBase) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PoBGoodBase) ProtoMessage() {}

func (x *PoBGoodBase) ProtoReflect() protoreflect.Message {
	mi := &file_darkstat_proto_msgTypes[67]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PoBGoodBase.ProtoReflect.Descriptor instead.
func (*PoBGoodBase) Descriptor() ([]byte, []int) {
	return file_darkstat_proto_rawDescGZIP(), []int{67}
}

func (x *PoBGoodBase) GetShopItem() *ShopItem {
	if x != nil {
		return x.ShopItem
	}
	return nil
}

func (x *PoBGoodBase) GetBase() *PoBCore {
	if x != nil {
		return x.Base
	}
	return nil
}

type GetGraphPathsInput struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Queries       []*GraphPathQuery      `protobuf:"bytes,1,rep,name=queries,proto3" json:"queries,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetGraphPathsInput) Reset() {
	*x = GetGraphPathsInput{}
	mi := &file_darkstat_proto_msgTypes[68]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetGraphPathsInput) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetGraphPathsInput) ProtoMessage() {}

func (x *GetGraphPathsInput) ProtoReflect() protoreflect.Message {
	mi := &file_darkstat_proto_msgTypes[68]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetGraphPathsInput.ProtoReflect.Descriptor instead.
func (*GetGraphPathsInput) Descriptor() ([]byte, []int) {
	return file_darkstat_proto_rawDescGZIP(), []int{68}
}

func (x *GetGraphPathsInput) GetQueries() []*GraphPathQuery {
	if x != nil {
		return x.Queries
	}
	return nil
}

type GraphPathQuery struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	From          string                 `protobuf:"bytes,1,opt,name=from,proto3" json:"from,omitempty"`
	To            string                 `protobuf:"bytes,2,opt,name=to,proto3" json:"to,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GraphPathQuery) Reset() {
	*x = GraphPathQuery{}
	mi := &file_darkstat_proto_msgTypes[69]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GraphPathQuery) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GraphPathQuery) ProtoMessage() {}

func (x *GraphPathQuery) ProtoReflect() protoreflect.Message {
	mi := &file_darkstat_proto_msgTypes[69]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GraphPathQuery.ProtoReflect.Descriptor instead.
func (*GraphPathQuery) Descriptor() ([]byte, []int) {
	return file_darkstat_proto_rawDescGZIP(), []int{69}
}

func (x *GraphPathQuery) GetFrom() string {
	if x != nil {
		return x.From
	}
	return ""
}

func (x *GraphPathQuery) GetTo() string {
	if x != nil {
		return x.To
	}
	return ""
}

type GetGraphPathsReply struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Answers       []*GetGraphPathsAnswer `protobuf:"bytes,1,rep,name=answers,proto3" json:"answers,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetGraphPathsReply) Reset() {
	*x = GetGraphPathsReply{}
	mi := &file_darkstat_proto_msgTypes[70]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetGraphPathsReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetGraphPathsReply) ProtoMessage() {}

func (x *GetGraphPathsReply) ProtoReflect() protoreflect.Message {
	mi := &file_darkstat_proto_msgTypes[70]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetGraphPathsReply.ProtoReflect.Descriptor instead.
func (*GetGraphPathsReply) Descriptor() ([]byte, []int) {
	return file_darkstat_proto_rawDescGZIP(), []int{70}
}

func (x *GetGraphPathsReply) GetAnswers() []*GetGraphPathsAnswer {
	if x != nil {
		return x.Answers
	}
	return nil
}

type GetGraphPathsAnswer struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Route         *GraphPathQuery        `protobuf:"bytes,1,opt,name=route,proto3" json:"route,omitempty"`
	Time          *GraphPathTime         `protobuf:"bytes,2,opt,name=time,proto3,oneof" json:"time,omitempty"`
	Error         *string                `protobuf:"bytes,3,opt,name=error,proto3,oneof" json:"error,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetGraphPathsAnswer) Reset() {
	*x = GetGraphPathsAnswer{}
	mi := &file_darkstat_proto_msgTypes[71]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetGraphPathsAnswer) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetGraphPathsAnswer) ProtoMessage() {}

func (x *GetGraphPathsAnswer) ProtoReflect() protoreflect.Message {
	mi := &file_darkstat_proto_msgTypes[71]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetGraphPathsAnswer.ProtoReflect.Descriptor instead.
func (*GetGraphPathsAnswer) Descriptor() ([]byte, []int) {
	return file_darkstat_proto_rawDescGZIP(), []int{71}
}

func (x *GetGraphPathsAnswer) GetRoute() *GraphPathQuery {
	if x != nil {
		return x.Route
	}
	return nil
}

func (x *GetGraphPathsAnswer) GetTime() *GraphPathTime {
	if x != nil {
		return x.Time
	}
	return nil
}

func (x *GetGraphPathsAnswer) GetError() string {
	if x != nil && x.Error != nil {
		return *x.Error
	}
	return ""
}

type GraphPathTime struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Transport     *int64                 `protobuf:"varint,1,opt,name=transport,proto3,oneof" json:"transport,omitempty"`
	Frigate       *int64                 `protobuf:"varint,2,opt,name=frigate,proto3,oneof" json:"frigate,omitempty"`
	Freighter     *int64                 `protobuf:"varint,3,opt,name=freighter,proto3,oneof" json:"freighter,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GraphPathTime) Reset() {
	*x = GraphPathTime{}
	mi := &file_darkstat_proto_msgTypes[72]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GraphPathTime) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GraphPathTime) ProtoMessage() {}

func (x *GraphPathTime) ProtoReflect() protoreflect.Message {
	mi := &file_darkstat_proto_msgTypes[72]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GraphPathTime.ProtoReflect.Descriptor instead.
func (*GraphPathTime) Descriptor() ([]byte, []int) {
	return file_darkstat_proto_rawDescGZIP(), []int{72}
}

func (x *GraphPathTime) GetTransport() int64 {
	if x != nil && x.Transport != nil {
		return *x.Transport
	}
	return 0
}

func (x *GraphPathTime) GetFrigate() int64 {
	if x != nil && x.Frigate != nil {
		return *x.Frigate
	}
	return 0
}

func (x *GraphPathTime) GetFreighter() int64 {
	if x != nil && x.Freighter != nil {
		return *x.Freighter
	}
	return 0
}

var File_darkstat_proto protoreflect.FileDescriptor

var file_darkstat_proto_rawDesc = string([]byte{
	0x0a, 0x0e, 0x64, 0x61, 0x72, 0x6b, 0x73, 0x74, 0x61, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x12, 0x09, 0x73, 0x74, 0x61, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x07, 0x0a, 0x05, 0x45,
	0x6d, 0x70, 0x74, 0x79, 0x22, 0x31, 0x0a, 0x11, 0x47, 0x65, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x63,
	0x61, 0x72, 0x64, 0x73, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x6e, 0x69, 0x63,
	0x6b, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x09, 0x6e, 0x69,
	0x63, 0x6b, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x22, 0x4b, 0x0a, 0x11, 0x47, 0x65, 0x74, 0x49, 0x6e,
	0x66, 0x6f, 0x63, 0x61, 0x72, 0x64, 0x73, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x36, 0x0a, 0x07,
	0x61, 0x6e, 0x73, 0x77, 0x65, 0x72, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1c, 0x2e,
	0x73, 0x74, 0x61, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x47, 0x65, 0x74, 0x49, 0x6e, 0x66,
	0x6f, 0x63, 0x61, 0x72, 0x64, 0x41, 0x6e, 0x73, 0x77, 0x65, 0x72, 0x52, 0x07, 0x61, 0x6e, 0x73,
	0x77, 0x65, 0x72, 0x73, 0x22, 0x91, 0x01, 0x0a, 0x11, 0x47, 0x65, 0x74, 0x49, 0x6e, 0x66, 0x6f,
	0x63, 0x61, 0x72, 0x64, 0x41, 0x6e, 0x73, 0x77, 0x65, 0x72, 0x12, 0x14, 0x0a, 0x05, 0x71, 0x75,
	0x65, 0x72, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x71, 0x75, 0x65, 0x72, 0x79,
	0x12, 0x34, 0x0a, 0x08, 0x69, 0x6e, 0x66, 0x6f, 0x63, 0x61, 0x72, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x13, 0x2e, 0x73, 0x74, 0x61, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49,
	0x6e, 0x66, 0x6f, 0x63, 0x61, 0x72, 0x64, 0x48, 0x00, 0x52, 0x08, 0x69, 0x6e, 0x66, 0x6f, 0x63,
	0x61, 0x72, 0x64, 0x88, 0x01, 0x01, 0x12, 0x19, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x48, 0x01, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x88, 0x01,
	0x01, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x63, 0x61, 0x72, 0x64, 0x42, 0x08,
	0x0a, 0x06, 0x5f, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x22, 0x39, 0x0a, 0x08, 0x49, 0x6e, 0x66, 0x6f,
	0x63, 0x61, 0x72, 0x64, 0x12, 0x2d, 0x0a, 0x05, 0x6c, 0x69, 0x6e, 0x65, 0x73, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x73, 0x74, 0x61, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x49, 0x6e, 0x66, 0x6f, 0x63, 0x61, 0x72, 0x64, 0x4c, 0x69, 0x6e, 0x65, 0x52, 0x05, 0x6c, 0x69,
	0x6e, 0x65, 0x73, 0x22, 0x43, 0x0a, 0x0c, 0x49, 0x6e, 0x66, 0x6f, 0x63, 0x61, 0x72, 0x64, 0x4c,
	0x69, 0x6e, 0x65, 0x12, 0x33, 0x0a, 0x07, 0x70, 0x68, 0x72, 0x61, 0x73, 0x65, 0x73, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x73, 0x74, 0x61, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x49, 0x6e, 0x66, 0x6f, 0x63, 0x61, 0x72, 0x64, 0x50, 0x68, 0x72, 0x61, 0x73, 0x65, 0x52,
	0x07, 0x70, 0x68, 0x72, 0x61, 0x73, 0x65, 0x73, 0x22, 0x5e, 0x0a, 0x0e, 0x49, 0x6e, 0x66, 0x6f,
	0x63, 0x61, 0x72, 0x64, 0x50, 0x68, 0x72, 0x61, 0x73, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x70, 0x68,
	0x72, 0x61, 0x73, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x70, 0x68, 0x72, 0x61,
	0x73, 0x65, 0x12, 0x17, 0x0a, 0x04, 0x6c, 0x69, 0x6e, 0x6b, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x48, 0x00, 0x52, 0x04, 0x6c, 0x69, 0x6e, 0x6b, 0x88, 0x01, 0x01, 0x12, 0x12, 0x0a, 0x04, 0x62,
	0x6f, 0x6c, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x04, 0x62, 0x6f, 0x6c, 0x64, 0x42,
	0x07, 0x0a, 0x05, 0x5f, 0x6c, 0x69, 0x6e, 0x6b, 0x22, 0x2c, 0x0a, 0x0b, 0x48, 0x65, 0x61, 0x6c,
	0x74, 0x68, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x1d, 0x0a, 0x0a, 0x69, 0x73, 0x5f, 0x68, 0x65,
	0x61, 0x6c, 0x74, 0x68, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x69, 0x73, 0x48,
	0x65, 0x61, 0x6c, 0x74, 0x68, 0x79, 0x22, 0xca, 0x01, 0x0a, 0x11, 0x47, 0x65, 0x74, 0x45, 0x71,
	0x75, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x12, 0x30, 0x0a, 0x14,
	0x69, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x5f, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x5f, 0x67,
	0x6f, 0x6f, 0x64, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x12, 0x69, 0x6e, 0x63, 0x6c,
	0x75, 0x64, 0x65, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x47, 0x6f, 0x6f, 0x64, 0x73, 0x12, 0x2e,
	0x0a, 0x13, 0x69, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x5f, 0x74, 0x65, 0x63, 0x68, 0x5f, 0x63,
	0x6f, 0x6d, 0x70, 0x61, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x11, 0x69, 0x6e, 0x63,
	0x6c, 0x75, 0x64, 0x65, 0x54, 0x65, 0x63, 0x68, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x74, 0x12, 0x28,
	0x0a, 0x10, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x5f, 0x74, 0x6f, 0x5f, 0x75, 0x73, 0x65, 0x66,
	0x75, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0e, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72,
	0x54, 0x6f, 0x55, 0x73, 0x65, 0x66, 0x75, 0x6c, 0x12, 0x29, 0x0a, 0x10, 0x66, 0x69, 0x6c, 0x74,
	0x65, 0x72, 0x5f, 0x6e, 0x69, 0x63, 0x6b, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x18, 0x04, 0x20, 0x03,
	0x28, 0x09, 0x52, 0x0f, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x4e, 0x69, 0x63, 0x6b, 0x6e, 0x61,
	0x6d, 0x65, 0x73, 0x22, 0xfb, 0x01, 0x0a, 0x0c, 0x47, 0x65, 0x74, 0x47, 0x75, 0x6e, 0x73, 0x49,
	0x6e, 0x70, 0x75, 0x74, 0x12, 0x30, 0x0a, 0x14, 0x69, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x5f,
	0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x5f, 0x67, 0x6f, 0x6f, 0x64, 0x73, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x12, 0x69, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x4d, 0x61, 0x72, 0x6b, 0x65,
	0x74, 0x47, 0x6f, 0x6f, 0x64, 0x73, 0x12, 0x2e, 0x0a, 0x13, 0x69, 0x6e, 0x63, 0x6c, 0x75, 0x64,
	0x65, 0x5f, 0x74, 0x65, 0x63, 0x68, 0x5f, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x74, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x11, 0x69, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x54, 0x65, 0x63, 0x68,
	0x43, 0x6f, 0x6d, 0x70, 0x61, 0x74, 0x12, 0x28, 0x0a, 0x10, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72,
	0x5f, 0x74, 0x6f, 0x5f, 0x75, 0x73, 0x65, 0x66, 0x75, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x0e, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x54, 0x6f, 0x55, 0x73, 0x65, 0x66, 0x75, 0x6c,
	0x12, 0x34, 0x0a, 0x16, 0x69, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x5f, 0x64, 0x61, 0x6d, 0x61,
	0x67, 0x65, 0x5f, 0x62, 0x6f, 0x6e, 0x75, 0x73, 0x65, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x14, 0x69, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x44, 0x61, 0x6d, 0x61, 0x67, 0x65, 0x42,
	0x6f, 0x6e, 0x75, 0x73, 0x65, 0x73, 0x12, 0x29, 0x0a, 0x10, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72,
	0x5f, 0x6e, 0x69, 0x63, 0x6b, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x09,
	0x52, 0x0f, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x4e, 0x69, 0x63, 0x6b, 0x6e, 0x61, 0x6d, 0x65,
	0x73, 0x22, 0xd5, 0x01, 0x0a, 0x0d, 0x47, 0x65, 0x74, 0x42, 0x61, 0x73, 0x65, 0x73, 0x49, 0x6e,
	0x70, 0x75, 0x74, 0x12, 0x30, 0x0a, 0x14, 0x69, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x5f, 0x6d,
	0x61, 0x72, 0x6b, 0x65, 0x74, 0x5f, 0x67, 0x6f, 0x6f, 0x64, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x12, 0x69, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74,
	0x47, 0x6f, 0x6f, 0x64, 0x73, 0x12, 0x28, 0x0a, 0x10, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x5f,
	0x74, 0x6f, 0x5f, 0x75, 0x73, 0x65, 0x66, 0x75, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x0e, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x54, 0x6f, 0x55, 0x73, 0x65, 0x66, 0x75, 0x6c, 0x12,
	0x29, 0x0a, 0x10, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x5f, 0x6e, 0x69, 0x63, 0x6b, 0x6e, 0x61,
	0x6d, 0x65, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0f, 0x66, 0x69, 0x6c, 0x74, 0x65,
	0x72, 0x4e, 0x69, 0x63, 0x6b, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x12, 0x3d, 0x0a, 0x1b, 0x66, 0x69,
	0x6c, 0x74, 0x65, 0x72, 0x5f, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x5f, 0x67, 0x6f, 0x6f, 0x64,
	0x5f, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x18, 0x04, 0x20, 0x03, 0x28, 0x09, 0x52,
	0x18, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x47, 0x6f, 0x6f,
	0x64, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x22, 0x99, 0x01, 0x0a, 0x10, 0x47, 0x65,
	0x74, 0x54, 0x72, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x73, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x12, 0x30,
	0x0a, 0x14, 0x69, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x5f, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74,
	0x5f, 0x67, 0x6f, 0x6f, 0x64, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x12, 0x69, 0x6e,
	0x63, 0x6c, 0x75, 0x64, 0x65, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x47, 0x6f, 0x6f, 0x64, 0x73,
	0x12, 0x28, 0x0a, 0x10, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x5f, 0x74, 0x6f, 0x5f, 0x75, 0x73,
	0x65, 0x66, 0x75, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0e, 0x66, 0x69, 0x6c, 0x74,
	0x65, 0x72, 0x54, 0x6f, 0x55, 0x73, 0x65, 0x66, 0x75, 0x6c, 0x12, 0x29, 0x0a, 0x10, 0x66, 0x69,
	0x6c, 0x74, 0x65, 0x72, 0x5f, 0x6e, 0x69, 0x63, 0x6b, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x18, 0x03,
	0x20, 0x03, 0x28, 0x09, 0x52, 0x0f, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x4e, 0x69, 0x63, 0x6b,
	0x6e, 0x61, 0x6d, 0x65, 0x73, 0x22, 0x36, 0x0a, 0x0d, 0x47, 0x65, 0x74, 0x42, 0x61, 0x73, 0x65,
	0x73, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x25, 0x0a, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x73, 0x74, 0x61, 0x74, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x42, 0x61, 0x73, 0x65, 0x52, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x22, 0xd5, 0x04,
	0x0a, 0x04, 0x42, 0x61, 0x73, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x61, 0x72,
	0x63, 0x68, 0x65, 0x74, 0x79, 0x70, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0a,
	0x61, 0x72, 0x63, 0x68, 0x65, 0x74, 0x79, 0x70, 0x65, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x6e, 0x69,
	0x63, 0x6b, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6e, 0x69,
	0x63, 0x6b, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x66, 0x61, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x66, 0x61,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x79, 0x73,
	0x74, 0x65, 0x6d, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a,
	0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x27, 0x0a, 0x0f, 0x73, 0x79,
	0x73, 0x74, 0x65, 0x6d, 0x5f, 0x6e, 0x69, 0x63, 0x6b, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0e, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x4e, 0x69, 0x63, 0x6b, 0x6e,
	0x61, 0x6d, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x5f, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e,
	0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x74, 0x72, 0x69, 0x64, 0x5f, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x73, 0x74, 0x72, 0x69, 0x64, 0x4e,
	0x61, 0x6d, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x69, 0x6e, 0x66, 0x6f, 0x63, 0x61, 0x72, 0x64, 0x5f,
	0x69, 0x64, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x69, 0x6e, 0x66, 0x6f, 0x63, 0x61,
	0x72, 0x64, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x66, 0x69, 0x6c, 0x65, 0x18, 0x0c, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x66, 0x69, 0x6c, 0x65, 0x12, 0x27, 0x0a, 0x10, 0x62, 0x67, 0x63, 0x73,
	0x5f, 0x62, 0x61, 0x73, 0x65, 0x5f, 0x72, 0x75, 0x6e, 0x5f, 0x62, 0x79, 0x18, 0x0d, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0d, 0x62, 0x67, 0x63, 0x73, 0x42, 0x61, 0x73, 0x65, 0x52, 0x75, 0x6e, 0x42,
	0x79, 0x12, 0x20, 0x0a, 0x03, 0x70, 0x6f, 0x73, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e,
	0x2e, 0x73, 0x74, 0x61, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x50, 0x6f, 0x73, 0x52, 0x03,
	0x70, 0x6f, 0x73, 0x12, 0x21, 0x0a, 0x0c, 0x73, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x6f,
	0x6f, 0x72, 0x64, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x73, 0x65, 0x63, 0x74, 0x6f,
	0x72, 0x43, 0x6f, 0x6f, 0x72, 0x64, 0x12, 0x38, 0x0a, 0x18, 0x69, 0x73, 0x5f, 0x74, 0x72, 0x61,
	0x6e, 0x73, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x75, 0x6e, 0x72, 0x65, 0x61, 0x63, 0x68, 0x61, 0x62,
	0x6c, 0x65, 0x18, 0x10, 0x20, 0x01, 0x28, 0x08, 0x52, 0x16, 0x69, 0x73, 0x54, 0x72, 0x61, 0x6e,
	0x73, 0x70, 0x6f, 0x72, 0x74, 0x55, 0x6e, 0x72, 0x65, 0x61, 0x63, 0x68, 0x61, 0x62, 0x6c, 0x65,
	0x12, 0x23, 0x0a, 0x0d, 0x69, 0x73, 0x5f, 0x72, 0x65, 0x61, 0x63, 0x68, 0x68, 0x61, 0x62, 0x6c,
	0x65, 0x18, 0x12, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0c, 0x69, 0x73, 0x52, 0x65, 0x61, 0x63, 0x68,
	0x68, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x49, 0x73, 0x50, 0x6f, 0x62, 0x18, 0x13,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x05, 0x49, 0x73, 0x50, 0x6f, 0x62, 0x12, 0x38, 0x0a, 0x0c, 0x6d,
	0x61, 0x72, 0x6b, 0x65, 0x74, 0x5f, 0x67, 0x6f, 0x6f, 0x64, 0x73, 0x18, 0x14, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x15, 0x2e, 0x73, 0x74, 0x61, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4d, 0x61,
	0x72, 0x6b, 0x65, 0x74, 0x47, 0x6f, 0x6f, 0x64, 0x52, 0x0b, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74,
	0x47, 0x6f, 0x6f, 0x64, 0x73, 0x22, 0xe2, 0x01, 0x0a, 0x0a, 0x4d, 0x69, 0x6e, 0x69, 0x6e, 0x67,
	0x49, 0x6e, 0x66, 0x6f, 0x12, 0x28, 0x0a, 0x10, 0x64, 0x79, 0x6e, 0x61, 0x6d, 0x69, 0x63, 0x5f,
	0x6c, 0x6f, 0x6f, 0x74, 0x5f, 0x6d, 0x69, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0e,
	0x64, 0x79, 0x6e, 0x61, 0x6d, 0x69, 0x63, 0x4c, 0x6f, 0x6f, 0x74, 0x4d, 0x69, 0x6e, 0x12, 0x28,
	0x0a, 0x10, 0x64, 0x79, 0x6e, 0x61, 0x6d, 0x69, 0x63, 0x5f, 0x6c, 0x6f, 0x6f, 0x74, 0x5f, 0x6d,
	0x61, 0x78, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0e, 0x64, 0x79, 0x6e, 0x61, 0x6d, 0x69,
	0x63, 0x4c, 0x6f, 0x6f, 0x74, 0x4d, 0x61, 0x78, 0x12, 0x36, 0x0a, 0x17, 0x64, 0x79, 0x6e, 0x61,
	0x6d, 0x69, 0x63, 0x5f, 0x6c, 0x6f, 0x6f, 0x74, 0x5f, 0x64, 0x69, 0x66, 0x66, 0x69, 0x63, 0x75,
	0x6c, 0x74, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x15, 0x64, 0x79, 0x6e, 0x61, 0x6d,
	0x69, 0x63, 0x4c, 0x6f, 0x6f, 0x74, 0x44, 0x69, 0x66, 0x66, 0x69, 0x63, 0x75, 0x6c, 0x74, 0x79,
	0x12, 0x39, 0x0a, 0x0a, 0x6d, 0x69, 0x6e, 0x65, 0x64, 0x5f, 0x67, 0x6f, 0x6f, 0x64, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x73, 0x74, 0x61, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x47, 0x6f, 0x6f, 0x64, 0x48, 0x00, 0x52, 0x09, 0x6d,
	0x69, 0x6e, 0x65, 0x64, 0x47, 0x6f, 0x6f, 0x64, 0x88, 0x01, 0x01, 0x42, 0x0d, 0x0a, 0x0b, 0x5f,
	0x6d, 0x69, 0x6e, 0x65, 0x64, 0x5f, 0x67, 0x6f, 0x6f, 0x64, 0x22, 0x96, 0x05, 0x0a, 0x0a, 0x4d,
	0x61, 0x72, 0x6b, 0x65, 0x74, 0x47, 0x6f, 0x6f, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x6e, 0x69, 0x63,
	0x6b, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6e, 0x69, 0x63,
	0x6b, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x73, 0x68, 0x69, 0x70, 0x5f, 0x6e, 0x69,
	0x63, 0x6b, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x73, 0x68,
	0x69, 0x70, 0x4e, 0x69, 0x63, 0x6b, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1d,
	0x0a, 0x0a, 0x70, 0x72, 0x69, 0x63, 0x65, 0x5f, 0x62, 0x61, 0x73, 0x65, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x09, 0x70, 0x72, 0x69, 0x63, 0x65, 0x42, 0x61, 0x73, 0x65, 0x12, 0x17, 0x0a,
	0x07, 0x68, 0x70, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06,
	0x68, 0x70, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f,
	0x72, 0x79, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f,
	0x72, 0x79, 0x12, 0x25, 0x0a, 0x0e, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x5f, 0x72, 0x65, 0x71, 0x75,
	0x69, 0x72, 0x65, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0d, 0x6c, 0x65, 0x76, 0x65,
	0x6c, 0x52, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x72, 0x65, 0x70,
	0x5f, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x01, 0x52,
	0x0b, 0x72, 0x65, 0x70, 0x52, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x12, 0x32, 0x0a, 0x13,
	0x70, 0x72, 0x69, 0x63, 0x65, 0x5f, 0x62, 0x61, 0x73, 0x65, 0x5f, 0x62, 0x75, 0x79, 0x73, 0x5f,
	0x66, 0x6f, 0x72, 0x18, 0x09, 0x20, 0x01, 0x28, 0x03, 0x48, 0x00, 0x52, 0x10, 0x70, 0x72, 0x69,
	0x63, 0x65, 0x42, 0x61, 0x73, 0x65, 0x42, 0x75, 0x79, 0x73, 0x46, 0x6f, 0x72, 0x88, 0x01, 0x01,
	0x12, 0x2f, 0x0a, 0x14, 0x70, 0x72, 0x69, 0x63, 0x65, 0x5f, 0x62, 0x61, 0x73, 0x65, 0x5f, 0x73,
	0x65, 0x6c, 0x6c, 0x73, 0x5f, 0x66, 0x6f, 0x72, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x03, 0x52, 0x11,
	0x70, 0x72, 0x69, 0x63, 0x65, 0x42, 0x61, 0x73, 0x65, 0x53, 0x65, 0x6c, 0x6c, 0x73, 0x46, 0x6f,
	0x72, 0x12, 0x16, 0x0a, 0x06, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28,
	0x01, 0x52, 0x06, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x68, 0x69,
	0x70, 0x5f, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x73,
	0x68, 0x69, 0x70, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x62, 0x61, 0x73, 0x65,
	0x5f, 0x73, 0x65, 0x6c, 0x6c, 0x73, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x62, 0x61,
	0x73, 0x65, 0x53, 0x65, 0x6c, 0x6c, 0x73, 0x12, 0x35, 0x0a, 0x17, 0x69, 0x73, 0x5f, 0x73, 0x65,
	0x72, 0x76, 0x65, 0x72, 0x5f, 0x73, 0x69, 0x64, 0x65, 0x5f, 0x6f, 0x76, 0x65, 0x72, 0x72, 0x69,
	0x64, 0x65, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x08, 0x52, 0x14, 0x69, 0x73, 0x53, 0x65, 0x72, 0x76,
	0x65, 0x72, 0x53, 0x69, 0x64, 0x65, 0x4f, 0x76, 0x65, 0x72, 0x72, 0x69, 0x64, 0x65, 0x12, 0x1f,
	0x0a, 0x0b, 0x6e, 0x6f, 0x74, 0x5f, 0x62, 0x75, 0x79, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x0f, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x0a, 0x6e, 0x6f, 0x74, 0x42, 0x75, 0x79, 0x61, 0x62, 0x6c, 0x65, 0x12,
	0x38, 0x0a, 0x18, 0x69, 0x73, 0x5f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x70, 0x6f, 0x72, 0x74, 0x5f,
	0x75, 0x6e, 0x72, 0x65, 0x61, 0x63, 0x68, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x10, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x16, 0x69, 0x73, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x70, 0x6f, 0x72, 0x74, 0x55, 0x6e,
	0x72, 0x65, 0x61, 0x63, 0x68, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x30, 0x0a, 0x09, 0x62, 0x61, 0x73,
	0x65, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x11, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x73,
	0x74, 0x61, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x42, 0x61, 0x73, 0x65, 0x49, 0x6e, 0x66,
	0x6f, 0x52, 0x08, 0x62, 0x61, 0x73, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x42, 0x16, 0x0a, 0x14, 0x5f,
	0x70, 0x72, 0x69, 0x63, 0x65, 0x5f, 0x62, 0x61, 0x73, 0x65, 0x5f, 0x62, 0x75, 0x79, 0x73, 0x5f,
	0x66, 0x6f, 0x72, 0x22, 0xff, 0x01, 0x0a, 0x08, 0x42, 0x61, 0x73, 0x65, 0x49, 0x6e, 0x66, 0x6f,
	0x12, 0x23, 0x0a, 0x0d, 0x62, 0x61, 0x73, 0x65, 0x5f, 0x6e, 0x69, 0x63, 0x6b, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x62, 0x61, 0x73, 0x65, 0x4e, 0x69, 0x63,
	0x6b, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x62, 0x61, 0x73, 0x65, 0x5f, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x62, 0x61, 0x73, 0x65, 0x4e, 0x61,
	0x6d, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x5f, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x4e,
	0x61, 0x6d, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x5f, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e,
	0x4e, 0x61, 0x6d, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x66, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x66, 0x61, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x29, 0x0a, 0x08, 0x62, 0x61, 0x73, 0x65, 0x5f,
	0x70, 0x6f, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x73, 0x74, 0x61, 0x74,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x50, 0x6f, 0x73, 0x52, 0x07, 0x62, 0x61, 0x73, 0x65, 0x50,
	0x6f, 0x73, 0x12, 0x21, 0x0a, 0x0c, 0x73, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x6f, 0x6f,
	0x72, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x73, 0x65, 0x63, 0x74, 0x6f, 0x72,
	0x43, 0x6f, 0x6f, 0x72, 0x64, 0x22, 0x2f, 0x0a, 0x03, 0x50, 0x6f, 0x73, 0x12, 0x0c, 0x0a, 0x01,
	0x58, 0x18, 0x01, 0x20, 0x01, 0x28, 0x01, 0x52, 0x01, 0x58, 0x12, 0x0c, 0x0a, 0x01, 0x59, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x01, 0x52, 0x01, 0x59, 0x12, 0x0c, 0x0a, 0x01, 0x5a, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x01, 0x52, 0x01, 0x5a, 0x22, 0x9c, 0x01, 0x0a, 0x13, 0x47, 0x65, 0x74, 0x43, 0x6f,
	0x6d, 0x6d, 0x6f, 0x64, 0x69, 0x74, 0x69, 0x65, 0x73, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x12, 0x30,
	0x0a, 0x14, 0x69, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x5f, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74,
	0x5f, 0x67, 0x6f, 0x6f, 0x64, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x12, 0x69, 0x6e,
	0x63, 0x6c, 0x75, 0x64, 0x65, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x47, 0x6f, 0x6f, 0x64, 0x73,
	0x12, 0x28, 0x0a, 0x10, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x5f, 0x74, 0x6f, 0x5f, 0x75, 0x73,
	0x65, 0x66, 0x75, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0e, 0x66, 0x69, 0x6c, 0x74,
	0x65, 0x72, 0x54, 0x6f, 0x55, 0x73, 0x65, 0x66, 0x75, 0x6c, 0x12, 0x29, 0x0a, 0x10, 0x66, 0x69,
	0x6c, 0x74, 0x65, 0x72, 0x5f, 0x6e, 0x69, 0x63, 0x6b, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x18, 0x03,
	0x20, 0x03, 0x28, 0x09, 0x52, 0x0f, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x4e, 0x69, 0x63, 0x6b,
	0x6e, 0x61, 0x6d, 0x65, 0x73, 0x22, 0x41, 0x0a, 0x13, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x6d, 0x6d,
	0x6f, 0x64, 0x69, 0x74, 0x69, 0x65, 0x73, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x2a, 0x0a, 0x05,
	0x69, 0x74, 0x65, 0x6d, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x73, 0x74,
	0x61, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x64, 0x69, 0x74,
	0x79, 0x52, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x22, 0xa0, 0x04, 0x0a, 0x09, 0x43, 0x6f, 0x6d,
	0x6d, 0x6f, 0x64, 0x69, 0x74, 0x79, 0x12, 0x1a, 0x0a, 0x08, 0x6e, 0x69, 0x63, 0x6b, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6e, 0x69, 0x63, 0x6b, 0x6e, 0x61,
	0x6d, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x72, 0x69, 0x63, 0x65, 0x5f, 0x62, 0x61, 0x73, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x70, 0x72, 0x69, 0x63, 0x65, 0x42, 0x61, 0x73,
	0x65, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x63, 0x6f, 0x6d, 0x62, 0x69, 0x6e, 0x61,
	0x62, 0x6c, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x63, 0x6f, 0x6d, 0x62, 0x69,
	0x6e, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x01, 0x52, 0x06, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x12, 0x1d, 0x0a,
	0x0a, 0x73, 0x68, 0x69, 0x70, 0x5f, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x09, 0x73, 0x68, 0x69, 0x70, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x12, 0x17, 0x0a, 0x07,
	0x6e, 0x61, 0x6d, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x6e,
	0x61, 0x6d, 0x65, 0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x69, 0x6e, 0x66, 0x6f, 0x63, 0x61, 0x72,
	0x64, 0x5f, 0x69, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x69, 0x6e, 0x66, 0x6f,
	0x63, 0x61, 0x72, 0x64, 0x49, 0x64, 0x12, 0x35, 0x0a, 0x05, 0x62, 0x61, 0x73, 0x65, 0x73, 0x18,
	0x09, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x73, 0x74, 0x61, 0x74, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x64, 0x69, 0x74, 0x79, 0x2e, 0x42, 0x61, 0x73, 0x65,
	0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x05, 0x62, 0x61, 0x73, 0x65, 0x73, 0x12, 0x36, 0x0a,
	0x18, 0x70, 0x72, 0x69, 0x63, 0x65, 0x5f, 0x62, 0x65, 0x73, 0x74, 0x5f, 0x62, 0x61, 0x73, 0x65,
	0x5f, 0x62, 0x75, 0x79, 0x73, 0x5f, 0x66, 0x6f, 0x72, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x14, 0x70, 0x72, 0x69, 0x63, 0x65, 0x42, 0x65, 0x73, 0x74, 0x42, 0x61, 0x73, 0x65, 0x42, 0x75,
	0x79, 0x73, 0x46, 0x6f, 0x72, 0x12, 0x38, 0x0a, 0x19, 0x70, 0x72, 0x69, 0x63, 0x65, 0x5f, 0x62,
	0x65, 0x73, 0x74, 0x5f, 0x62, 0x61, 0x73, 0x65, 0x5f, 0x73, 0x65, 0x6c, 0x6c, 0x73, 0x5f, 0x66,
	0x6f, 0x72, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x03, 0x52, 0x15, 0x70, 0x72, 0x69, 0x63, 0x65, 0x42,
	0x65, 0x73, 0x74, 0x42, 0x61, 0x73, 0x65, 0x53, 0x65, 0x6c, 0x6c, 0x73, 0x46, 0x6f, 0x72, 0x12,
	0x25, 0x0a, 0x0e, 0x70, 0x72, 0x6f, 0x66, 0x66, 0x69, 0x74, 0x5f, 0x6d, 0x61, 0x72, 0x67, 0x69,
	0x6e, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0d, 0x70, 0x72, 0x6f, 0x66, 0x66, 0x69, 0x74,
	0x4d, 0x61, 0x72, 0x67, 0x69, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x6d, 0x61, 0x73, 0x73, 0x18, 0x0d,
	0x20, 0x01, 0x28, 0x01, 0x52, 0x04, 0x6d, 0x61, 0x73, 0x73, 0x1a, 0x4f, 0x0a, 0x0a, 0x42, 0x61,
	0x73, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x2b, 0x0a, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x73, 0x74, 0x61, 0x74,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x47, 0x6f, 0x6f, 0x64,
	0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x35, 0x0a, 0x0c, 0x47,
	0x65, 0x74, 0x41, 0x6d, 0x6d, 0x6f, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x25, 0x0a, 0x05, 0x69,
	0x74, 0x65, 0x6d, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x73, 0x74, 0x61,
	0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x41, 0x6d, 0x6d, 0x6f, 0x52, 0x05, 0x69, 0x74, 0x65,
	0x6d, 0x73, 0x22, 0x85, 0x05, 0x0a, 0x04, 0x41, 0x6d, 0x6d, 0x6f, 0x12, 0x12, 0x0a, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12,
	0x14, 0x0a, 0x05, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05,
	0x70, 0x72, 0x69, 0x63, 0x65, 0x12, 0x17, 0x0a, 0x07, 0x68, 0x69, 0x74, 0x5f, 0x70, 0x74, 0x73,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x68, 0x69, 0x74, 0x50, 0x74, 0x73, 0x12, 0x16,
	0x0a, 0x06, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x01, 0x52, 0x06,
	0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x12, 0x2b, 0x0a, 0x11, 0x6d, 0x75, 0x6e, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x5f, 0x6c, 0x69, 0x66, 0x65, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x01, 0x52, 0x10, 0x6d, 0x75, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x69, 0x66, 0x65, 0x74,
	0x69, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x6e, 0x69, 0x63, 0x6b, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6e, 0x69, 0x63, 0x6b, 0x6e, 0x61, 0x6d, 0x65, 0x12,
	0x17, 0x0a, 0x07, 0x6e, 0x61, 0x6d, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x06, 0x6e, 0x61, 0x6d, 0x65, 0x49, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x69, 0x6e, 0x66, 0x6f,
	0x5f, 0x69, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x69, 0x6e, 0x66, 0x6f, 0x49,
	0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x65, 0x65, 0x6b, 0x65, 0x72, 0x5f, 0x74, 0x79, 0x70, 0x65,
	0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x73, 0x65, 0x65, 0x6b, 0x65, 0x72, 0x54, 0x79,
	0x70, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x73, 0x65, 0x65, 0x6b, 0x65, 0x72, 0x5f, 0x72, 0x61, 0x6e,
	0x67, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x73, 0x65, 0x65, 0x6b, 0x65, 0x72,
	0x52, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x24, 0x0a, 0x0e, 0x73, 0x65, 0x65, 0x6b, 0x65, 0x72, 0x5f,
	0x66, 0x6f, 0x76, 0x5f, 0x64, 0x65, 0x67, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0c, 0x73,
	0x65, 0x65, 0x6b, 0x65, 0x72, 0x46, 0x6f, 0x76, 0x44, 0x65, 0x67, 0x12, 0x30, 0x0a, 0x05, 0x62,
	0x61, 0x73, 0x65, 0x73, 0x18, 0x0c, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x73, 0x74, 0x61,
	0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x41, 0x6d, 0x6d, 0x6f, 0x2e, 0x42, 0x61, 0x73, 0x65,
	0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x05, 0x62, 0x61, 0x73, 0x65, 0x73, 0x12, 0x57, 0x0a,
	0x15, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x79, 0x5f, 0x74, 0x65, 0x63, 0x68, 0x5f,
	0x63, 0x6f, 0x6d, 0x70, 0x61, 0x74, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x73,
	0x74, 0x61, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x44, 0x69, 0x73, 0x63, 0x6f, 0x76, 0x65,
	0x72, 0x79, 0x54, 0x65, 0x63, 0x68, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x74, 0x48, 0x00, 0x52, 0x13,
	0x64, 0x69, 0x73, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x79, 0x54, 0x65, 0x63, 0x68, 0x43, 0x6f, 0x6d,
	0x70, 0x61, 0x74, 0x88, 0x01, 0x01, 0x12, 0x33, 0x0a, 0x0a, 0x61, 0x6d, 0x6d, 0x6f, 0x5f, 0x6c,
	0x69, 0x6d, 0x69, 0x74, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x73, 0x74, 0x61,
	0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x41, 0x6d, 0x6d, 0x6f, 0x4c, 0x69, 0x6d, 0x69, 0x74,
	0x52, 0x09, 0x61, 0x6d, 0x6d, 0x6f, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x6d,
	0x61, 0x73, 0x73, 0x18, 0x10, 0x20, 0x01, 0x28, 0x01, 0x52, 0x04, 0x6d, 0x61, 0x73, 0x73, 0x1a,
	0x4f, 0x0a, 0x0a, 0x42, 0x61, 0x73, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a,
	0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12,
	0x2b, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15,
	0x2e, 0x73, 0x74, 0x61, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4d, 0x61, 0x72, 0x6b, 0x65,
	0x74, 0x47, 0x6f, 0x6f, 0x64, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01,
	0x42, 0x18, 0x0a, 0x16, 0x5f, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x79, 0x5f, 0x74,
	0x65, 0x63, 0x68, 0x5f, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x74, 0x22, 0xd3, 0x01, 0x0a, 0x13, 0x44,
	0x69, 0x73, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x79, 0x54, 0x65, 0x63, 0x68, 0x43, 0x6f, 0x6d, 0x70,
	0x61, 0x74, 0x12, 0x5c, 0x0a, 0x10, 0x74, 0x65, 0x63, 0x68, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x74,
	0x5f, 0x62, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x32, 0x2e, 0x73,
	0x74, 0x61, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x44, 0x69, 0x73, 0x63, 0x6f, 0x76, 0x65,
	0x72, 0x79, 0x54, 0x65, 0x63, 0x68, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x74, 0x2e, 0x54, 0x65, 0x63,
	0x68, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x74, 0x42, 0x79, 0x49, 0x64, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x52, 0x0e, 0x74, 0x65, 0x63, 0x68, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x74, 0x42, 0x79, 0x49, 0x64,
	0x12, 0x1b, 0x0a, 0x09, 0x74, 0x65, 0x63, 0x68, 0x5f, 0x63, 0x65, 0x6c, 0x6c, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x74, 0x65, 0x63, 0x68, 0x43, 0x65, 0x6c, 0x6c, 0x1a, 0x41, 0x0a,
	0x13, 0x54, 0x65, 0x63, 0x68, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x74, 0x42, 0x79, 0x49, 0x64, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x01, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01,
	0x22, 0xa9, 0x01, 0x0a, 0x10, 0x54, 0x65, 0x63, 0x68, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x74, 0x41,
	0x6e, 0x73, 0x77, 0x65, 0x72, 0x12, 0x44, 0x0a, 0x0b, 0x74, 0x65, 0x63, 0x68, 0x5f, 0x63, 0x6f,
	0x6d, 0x70, 0x61, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x73, 0x74, 0x61,
	0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x44, 0x69, 0x73, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x79,
	0x54, 0x65, 0x63, 0x68, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x74, 0x48, 0x00, 0x52, 0x0a, 0x74, 0x65,
	0x63, 0x68, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x74, 0x88, 0x01, 0x01, 0x12, 0x19, 0x0a, 0x05, 0x65,
	0x72, 0x72, 0x6f, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x48, 0x01, 0x52, 0x05, 0x65, 0x72,
	0x72, 0x6f, 0x72, 0x88, 0x01, 0x01, 0x12, 0x1a, 0x0a, 0x08, 0x6e, 0x69, 0x63, 0x6b, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6e, 0x69, 0x63, 0x6b, 0x6e, 0x61,
	0x6d, 0x65, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x74, 0x65, 0x63, 0x68, 0x5f, 0x63, 0x6f, 0x6d, 0x70,
	0x61, 0x74, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x22, 0x32, 0x0a, 0x12,
	0x47, 0x65, 0x74, 0x54, 0x65, 0x63, 0x68, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x74, 0x49, 0x6e, 0x70,
	0x75, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x6e, 0x69, 0x63, 0x6b, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x09, 0x6e, 0x69, 0x63, 0x6b, 0x6e, 0x61, 0x6d, 0x65, 0x73,
	0x22, 0x4b, 0x0a, 0x12, 0x47, 0x65, 0x74, 0x54, 0x65, 0x63, 0x68, 0x43, 0x6f, 0x6d, 0x70, 0x61,
	0x74, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x35, 0x0a, 0x07, 0x61, 0x6e, 0x73, 0x77, 0x65, 0x72,
	0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x73, 0x74, 0x61, 0x74, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x65, 0x63, 0x68, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x74, 0x41, 0x6e,
	0x73, 0x77, 0x65, 0x72, 0x52, 0x07, 0x61, 0x6e, 0x73, 0x77, 0x65, 0x72, 0x73, 0x22, 0x4a, 0x0a,
	0x17, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x4d, 0x65, 0x61, 0x73, 0x75,
	0x72, 0x65, 0x73, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x2f, 0x0a, 0x05, 0x69, 0x74, 0x65, 0x6d,
	0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x73, 0x74, 0x61, 0x74, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x4d, 0x65, 0x61, 0x73, 0x75,
	0x72, 0x65, 0x52, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x22, 0xfa, 0x04, 0x0a, 0x0e, 0x43, 0x6f,
	0x75, 0x6e, 0x74, 0x65, 0x72, 0x4d, 0x65, 0x61, 0x73, 0x75, 0x72, 0x65, 0x12, 0x12, 0x0a, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x12, 0x14, 0x0a, 0x05, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x05, 0x70, 0x72, 0x69, 0x63, 0x65, 0x12, 0x17, 0x0a, 0x07, 0x68, 0x69, 0x74, 0x5f, 0x70, 0x74,
	0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x68, 0x69, 0x74, 0x50, 0x74, 0x73, 0x12,
	0x19, 0x0a, 0x08, 0x61, 0x69, 0x5f, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x07, 0x61, 0x69, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x6c, 0x69,
	0x66, 0x65, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x6c, 0x69,
	0x66, 0x65, 0x74, 0x69, 0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x25, 0x0a, 0x0e,
	0x64, 0x69, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x70, 0x63, 0x74, 0x67, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x0d, 0x64, 0x69, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x50,
	0x63, 0x74, 0x67, 0x12, 0x1a, 0x0a, 0x08, 0x6c, 0x6f, 0x6f, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x6c, 0x6f, 0x6f, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x12,
	0x1a, 0x0a, 0x08, 0x6e, 0x69, 0x63, 0x6b, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x6e, 0x69, 0x63, 0x6b, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x17, 0x0a, 0x07, 0x6e,
	0x61, 0x6d, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x6e, 0x61,
	0x6d, 0x65, 0x49, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x69, 0x6e, 0x66, 0x6f, 0x5f, 0x69, 0x64, 0x18,
	0x0b, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x69, 0x6e, 0x66, 0x6f, 0x49, 0x64, 0x12, 0x3a, 0x0a,
	0x05, 0x62, 0x61, 0x73, 0x65, 0x73, 0x18, 0x0c, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x73,
	0x74, 0x61, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72,
	0x4d, 0x65, 0x61, 0x73, 0x75, 0x72, 0x65, 0x2e, 0x42, 0x61, 0x73, 0x65, 0x73, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x52, 0x05, 0x62, 0x61, 0x73, 0x65, 0x73, 0x12, 0x57, 0x0a, 0x15, 0x64, 0x69, 0x73,
	0x63, 0x6f, 0x76, 0x65, 0x72, 0x79, 0x5f, 0x74, 0x65, 0x63, 0x68, 0x5f, 0x63, 0x6f, 0x6d, 0x70,
	0x61, 0x74, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x73, 0x74, 0x61, 0x74, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x44, 0x69, 0x73, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x79, 0x54, 0x65,
	0x63, 0x68, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x74, 0x48, 0x00, 0x52, 0x13, 0x64, 0x69, 0x73, 0x63,
	0x6f, 0x76, 0x65, 0x72, 0x79, 0x54, 0x65, 0x63, 0x68, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x74, 0x88,
	0x01, 0x01, 0x12, 0x33, 0x0a, 0x0a, 0x61, 0x6d, 0x6d, 0x6f, 0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74,
	0x18, 0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x73, 0x74, 0x61, 0x74, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x41, 0x6d, 0x6d, 0x6f, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x52, 0x09, 0x61, 0x6d,
	0x6d, 0x6f, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x6d, 0x61, 0x73, 0x73, 0x18,
	0x10, 0x20, 0x01, 0x28, 0x01, 0x52, 0x04, 0x6d, 0x61, 0x73, 0x73, 0x1a, 0x4f, 0x0a, 0x0a, 0x42,
	0x61, 0x73, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x2b, 0x0a, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x73, 0x74, 0x61,
	0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x47, 0x6f, 0x6f,
	0x64, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x42, 0x18, 0x0a, 0x16,
	0x5f, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x79, 0x5f, 0x74, 0x65, 0x63, 0x68, 0x5f,
	0x63, 0x6f, 0x6d, 0x70, 0x61, 0x74, 0x22, 0x3a, 0x0a, 0x0f, 0x47, 0x65, 0x74, 0x45, 0x6e, 0x67,
	0x69, 0x6e, 0x65, 0x73, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x27, 0x0a, 0x05, 0x69, 0x74, 0x65,
	0x6d, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x73, 0x74, 0x61, 0x74, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x52, 0x05, 0x69, 0x74, 0x65,
	0x6d, 0x73, 0x22, 0xca, 0x05, 0x0a, 0x06, 0x45, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x12, 0x12, 0x0a,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x12, 0x14, 0x0a, 0x05, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x05, 0x70, 0x72, 0x69, 0x63, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x63, 0x72, 0x75, 0x69, 0x73,
	0x65, 0x5f, 0x73, 0x70, 0x65, 0x65, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x63,
	0x72, 0x75, 0x69, 0x73, 0x65, 0x53, 0x70, 0x65, 0x65, 0x64, 0x12, 0x2c, 0x0a, 0x12, 0x63, 0x72,
	0x75, 0x69, 0x73, 0x65, 0x5f, 0x63, 0x68, 0x61, 0x72, 0x67, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x10, 0x63, 0x72, 0x75, 0x69, 0x73, 0x65, 0x43, 0x68,
	0x61, 0x72, 0x67, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x6c, 0x69, 0x6e, 0x65,
	0x61, 0x72, 0x5f, 0x64, 0x72, 0x61, 0x67, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x6c,
	0x69, 0x6e, 0x65, 0x61, 0x72, 0x44, 0x72, 0x61, 0x67, 0x12, 0x1b, 0x0a, 0x09, 0x6d, 0x61, 0x78,
	0x5f, 0x66, 0x6f, 0x72, 0x63, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x6d, 0x61,
	0x78, 0x46, 0x6f, 0x72, 0x63, 0x65, 0x12, 0x29, 0x0a, 0x10, 0x72, 0x65, 0x76, 0x65, 0x72, 0x73,
	0x65, 0x5f, 0x66, 0x72, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x07, 0x20, 0x01, 0x28, 0x01,
	0x52, 0x0f, 0x72, 0x65, 0x76, 0x65, 0x72, 0x73, 0x65, 0x46, 0x72, 0x61, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x23, 0x0a, 0x0d, 0x69, 0x6d, 0x70, 0x75, 0x6c, 0x73, 0x65, 0x5f, 0x73, 0x70, 0x65,
	0x65, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0c, 0x69, 0x6d, 0x70, 0x75, 0x6c, 0x73,
	0x65, 0x53, 0x70, 0x65, 0x65, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x68, 0x70, 0x5f, 0x74, 0x79, 0x70,
	0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x68, 0x70, 0x54, 0x79, 0x70, 0x65, 0x12,
	0x21, 0x0a, 0x0c, 0x66, 0x6c, 0x61, 0x6d, 0x65, 0x5f, 0x65, 0x66, 0x66, 0x65, 0x63, 0x74, 0x18,
	0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x66, 0x6c, 0x61, 0x6d, 0x65, 0x45, 0x66, 0x66, 0x65,
	0x63, 0x74, 0x12, 0x21, 0x0a, 0x0c, 0x74, 0x72, 0x61, 0x69, 0x6c, 0x5f, 0x65, 0x66, 0x66, 0x65,
	0x63, 0x74, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x74, 0x72, 0x61, 0x69, 0x6c, 0x45,
	0x66, 0x66, 0x65, 0x63, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x6e, 0x69, 0x63, 0x6b, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6e, 0x69, 0x63, 0x6b, 0x6e, 0x61, 0x6d,
	0x65, 0x12, 0x17, 0x0a, 0x07, 0x6e, 0x61, 0x6d, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x0d, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x06, 0x6e, 0x61, 0x6d, 0x65, 0x49, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x69, 0x6e,
	0x66, 0x6f, 0x5f, 0x69, 0x64, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x69, 0x6e, 0x66,
	0x6f, 0x49, 0x64, 0x12, 0x32, 0x0a, 0x05, 0x62, 0x61, 0x73, 0x65, 0x73, 0x18, 0x0f, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x73, 0x74, 0x61, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45,
	0x6e, 0x67, 0x69, 0x6e, 0x65, 0x2e, 0x42, 0x61, 0x73, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x52, 0x05, 0x62, 0x61, 0x73, 0x65, 0x73, 0x12, 0x57, 0x0a, 0x15, 0x64, 0x69, 0x73, 0x63, 0x6f,
	0x76, 0x65, 0x72, 0x79, 0x5f, 0x74, 0x65, 0x63, 0x68, 0x5f, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x74,
	0x18, 0x10, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x73, 0x74, 0x61, 0x74, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x44, 0x69, 0x73, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x79, 0x54, 0x65, 0x63, 0x68,
	0x43, 0x6f, 0x6d, 0x70, 0x61, 0x74, 0x48, 0x00, 0x52, 0x13, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x76,
	0x65, 0x72, 0x79, 0x54, 0x65, 0x63, 0x68, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x74, 0x88, 0x01, 0x01,
	0x12, 0x12, 0x0a, 0x04, 0x6d, 0x61, 0x73, 0x73, 0x18, 0x11, 0x20, 0x01, 0x28, 0x01, 0x52, 0x04,
	0x6d, 0x61, 0x73, 0x73, 0x1a, 0x4f, 0x0a, 0x0a, 0x42, 0x61, 0x73, 0x65, 0x73, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x03, 0x6b, 0x65, 0x79, 0x12, 0x2b, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x73, 0x74, 0x61, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x47, 0x6f, 0x6f, 0x64, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x3a, 0x02, 0x38, 0x01, 0x42, 0x18, 0x0a, 0x16, 0x5f, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x76,
	0x65, 0x72, 0x79, 0x5f, 0x74, 0x65, 0x63, 0x68, 0x5f, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x74, 0x22,
	0x94, 0x01, 0x0a, 0x10, 0x47, 0x65, 0x74, 0x46, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x49,
	0x6e, 0x70, 0x75, 0x74, 0x12, 0x2f, 0x0a, 0x13, 0x69, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x5f,
	0x72, 0x65, 0x70, 0x75, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x12, 0x69, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x52, 0x65, 0x70, 0x75, 0x74, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x25, 0x0a, 0x0e, 0x69, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65,
	0x5f, 0x62, 0x72, 0x69, 0x62, 0x65, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0d, 0x69,
	0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x42, 0x72, 0x69, 0x62, 0x65, 0x73, 0x12, 0x28, 0x0a, 0x10,
	0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x5f, 0x74, 0x6f, 0x5f, 0x75, 0x73, 0x65, 0x66, 0x75, 0x6c,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0e, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x54, 0x6f,
	0x55, 0x73, 0x65, 0x66, 0x75, 0x6c, 0x22, 0x3c, 0x0a, 0x10, 0x47, 0x65, 0x74, 0x46, 0x61, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x28, 0x0a, 0x05, 0x69, 0x74,
	0x65, 0x6d, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x73, 0x74, 0x61, 0x74,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x46, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x05, 0x69,
	0x74, 0x65, 0x6d, 0x73, 0x22, 0xa3, 0x03, 0x0a, 0x07, 0x46, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x68, 0x6f, 0x72, 0x74, 0x5f, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x68, 0x6f, 0x72, 0x74, 0x4e,
	0x61, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x6e, 0x69, 0x63, 0x6b, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6e, 0x69, 0x63, 0x6b, 0x6e, 0x61, 0x6d, 0x65, 0x12,
	0x2d, 0x0a, 0x12, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x64, 0x65, 0x73, 0x74, 0x72, 0x75,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x01, 0x52, 0x11, 0x6f, 0x62, 0x6a,
	0x65, 0x63, 0x74, 0x44, 0x65, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x27,
	0x0a, 0x0f, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73,
	0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0e, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0x53, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x12, 0x27, 0x0a, 0x0f, 0x6d, 0x69, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x5f, 0x66, 0x61, 0x69, 0x6c, 0x75, 0x72, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x01,
	0x52, 0x0e, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x46, 0x61, 0x69, 0x6c, 0x75, 0x72, 0x65,
	0x12, 0x23, 0x0a, 0x0d, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x61, 0x62, 0x6f, 0x72,
	0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0c, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0x41, 0x62, 0x6f, 0x72, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x69, 0x6e, 0x66, 0x6f, 0x6e, 0x61, 0x6d,
	0x65, 0x5f, 0x69, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x69, 0x6e, 0x66, 0x6f,
	0x6e, 0x61, 0x6d, 0x65, 0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x69, 0x6e, 0x66, 0x6f, 0x63, 0x61,
	0x72, 0x64, 0x5f, 0x69, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x69, 0x6e, 0x66,
	0x6f, 0x63, 0x61, 0x72, 0x64, 0x49, 0x64, 0x12, 0x37, 0x0a, 0x0b, 0x72, 0x65, 0x70, 0x75, 0x74,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x73,
	0x74, 0x61, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x65, 0x70, 0x75, 0x74, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x0b, 0x72, 0x65, 0x70, 0x75, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x12, 0x28, 0x0a, 0x06, 0x62, 0x72, 0x69, 0x62, 0x65, 0x73, 0x18, 0x0b, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x10, 0x2e, 0x73, 0x74, 0x61, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x42, 0x72, 0x69,
	0x62, 0x65, 0x52, 0x06, 0x62, 0x72, 0x69, 0x62, 0x65, 0x73, 0x22, 0x68, 0x0a, 0x0a, 0x52, 0x65,
	0x70, 0x75, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x10, 0x0a, 0x03,
	0x72, 0x65, 0x70, 0x18, 0x02, 0x20, 0x01, 0x28, 0x01, 0x52, 0x03, 0x72, 0x65, 0x70, 0x12, 0x18,
	0x0a, 0x07, 0x65, 0x6d, 0x70, 0x61, 0x74, 0x68, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x01, 0x52,
	0x07, 0x65, 0x6d, 0x70, 0x61, 0x74, 0x68, 0x79, 0x12, 0x1a, 0x0a, 0x08, 0x6e, 0x69, 0x63, 0x6b,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6e, 0x69, 0x63, 0x6b,
	0x6e, 0x61, 0x6d, 0x65, 0x22, 0x76, 0x0a, 0x05, 0x42, 0x72, 0x69, 0x62, 0x65, 0x12, 0x23, 0x0a,
	0x0d, 0x62, 0x61, 0x73, 0x65, 0x5f, 0x6e, 0x69, 0x63, 0x6b, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x62, 0x61, 0x73, 0x65, 0x4e, 0x69, 0x63, 0x6b, 0x6e, 0x61,
	0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x63, 0x68, 0x61, 0x6e, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x01, 0x52, 0x06, 0x63, 0x68, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x30, 0x0a, 0x09, 0x62, 0x61,
	0x73, 0x65, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e,
	0x73, 0x74, 0x61, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x42, 0x61, 0x73, 0x65, 0x49, 0x6e,
	0x66, 0x6f, 0x52, 0x08, 0x62, 0x61, 0x73, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0x34, 0x0a, 0x0c,
	0x47, 0x65, 0x74, 0x47, 0x75, 0x6e, 0x73, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x24, 0x0a, 0x05,
	0x69, 0x74, 0x65, 0x6d, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x73, 0x74,
	0x61, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x47, 0x75, 0x6e, 0x52, 0x05, 0x69, 0x74, 0x65,
	0x6d, 0x73, 0x22, 0xaf, 0x0e, 0x0a, 0x03, 0x47, 0x75, 0x6e, 0x12, 0x2f, 0x0a, 0x05, 0x62, 0x61,
	0x73, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x73, 0x74, 0x61, 0x74,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x47, 0x75, 0x6e, 0x2e, 0x42, 0x61, 0x73, 0x65, 0x73, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x52, 0x05, 0x62, 0x61, 0x73, 0x65, 0x73, 0x12, 0x57, 0x0a, 0x15, 0x64,
	0x69, 0x73, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x79, 0x5f, 0x74, 0x65, 0x63, 0x68, 0x5f, 0x63, 0x6f,
	0x6d, 0x70, 0x61, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x73, 0x74, 0x61,
	0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x44, 0x69, 0x73, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x79,
	0x54, 0x65, 0x63, 0x68, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x74, 0x48, 0x00, 0x52, 0x13, 0x64, 0x69,
	0x73, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x79, 0x54, 0x65, 0x63, 0x68, 0x43, 0x6f, 0x6d, 0x70, 0x61,
	0x74, 0x88, 0x01, 0x01, 0x12, 0x1a, 0x0a, 0x08, 0x6e, 0x69, 0x63, 0x6b, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6e, 0x69, 0x63, 0x6b, 0x6e, 0x61, 0x6d, 0x65,
	0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x70, 0x72, 0x69, 0x63,
	0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x70, 0x72, 0x69, 0x63, 0x65, 0x12, 0x14,
	0x0a, 0x05, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x63,
	0x6c, 0x61, 0x73, 0x73, 0x12, 0x17, 0x0a, 0x07, 0x68, 0x70, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x68, 0x70, 0x54, 0x79, 0x70, 0x65, 0x12, 0x19, 0x0a,
	0x08, 0x69, 0x64, 0x73, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x07, 0x69, 0x64, 0x73, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x69, 0x64, 0x73, 0x5f,
	0x69, 0x6e, 0x66, 0x6f, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x69, 0x64, 0x73, 0x49,
	0x6e, 0x66, 0x6f, 0x12, 0x16, 0x0a, 0x06, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x18, 0x0b, 0x20,
	0x01, 0x28, 0x01, 0x52, 0x06, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x12, 0x17, 0x0a, 0x07, 0x68,
	0x69, 0x74, 0x5f, 0x70, 0x74, 0x73, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x68, 0x69,
	0x74, 0x50, 0x74, 0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x70, 0x6f, 0x77, 0x65, 0x72, 0x5f, 0x75, 0x73,
	0x61, 0x67, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0a, 0x70, 0x6f, 0x77, 0x65, 0x72,
	0x55, 0x73, 0x61, 0x67, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x66, 0x69, 0x72, 0x65, 0x18,
	0x0e, 0x20, 0x01, 0x28, 0x01, 0x52, 0x06, 0x72, 0x65, 0x66, 0x69, 0x72, 0x65, 0x12, 0x14, 0x0a,
	0x05, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x01, 0x52, 0x05, 0x72, 0x61,
	0x6e, 0x67, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x74, 0x6f, 0x75, 0x67, 0x68, 0x6e, 0x65, 0x73, 0x73,
	0x18, 0x10, 0x20, 0x01, 0x28, 0x01, 0x52, 0x09, 0x74, 0x6f, 0x75, 0x67, 0x68, 0x6e, 0x65, 0x73,
	0x73, 0x12, 0x24, 0x0a, 0x0e, 0x69, 0x73, 0x5f, 0x61, 0x75, 0x74, 0x6f, 0x5f, 0x74, 0x75, 0x72,
	0x72, 0x65, 0x74, 0x18, 0x11, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0c, 0x69, 0x73, 0x41, 0x75, 0x74,
	0x6f, 0x54, 0x75, 0x72, 0x72, 0x65, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x6c, 0x6f, 0x6f, 0x74, 0x61,
	0x62, 0x6c, 0x65, 0x18, 0x12, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x6c, 0x6f, 0x6f, 0x74, 0x61,
	0x62, 0x6c, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x5f,
	0x61, 0x6d, 0x6d, 0x6f, 0x18, 0x13, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0c, 0x72, 0x65, 0x71, 0x75,
	0x69, 0x72, 0x65, 0x64, 0x41, 0x6d, 0x6d, 0x6f, 0x12, 0x1f, 0x0a, 0x0b, 0x68, 0x75, 0x6c, 0x6c,
	0x5f, 0x64, 0x61, 0x6d, 0x61, 0x67, 0x65, 0x18, 0x14, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x68,
	0x75, 0x6c, 0x6c, 0x44, 0x61, 0x6d, 0x61, 0x67, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x65, 0x6e, 0x65,
	0x72, 0x67, 0x79, 0x5f, 0x64, 0x61, 0x6d, 0x61, 0x67, 0x65, 0x18, 0x15, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x0c, 0x65, 0x6e, 0x65, 0x72, 0x67, 0x79, 0x44, 0x61, 0x6d, 0x61, 0x67, 0x65, 0x12, 0x23,
	0x0a, 0x0d, 0x73, 0x68, 0x69, 0x65, 0x6c, 0x64, 0x5f, 0x64, 0x61, 0x6d, 0x61, 0x67, 0x65, 0x18,
	0x16, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0c, 0x73, 0x68, 0x69, 0x65, 0x6c, 0x64, 0x44, 0x61, 0x6d,
	0x61, 0x67, 0x65, 0x12, 0x2a, 0x0a, 0x11, 0x61, 0x76, 0x67, 0x5f, 0x73, 0x68, 0x69, 0x65, 0x6c,
	0x64, 0x5f, 0x64, 0x61, 0x6d, 0x61, 0x67, 0x65, 0x18, 0x17, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0f,
	0x61, 0x76, 0x67, 0x53, 0x68, 0x69, 0x65, 0x6c, 0x64, 0x44, 0x61, 0x6d, 0x61, 0x67, 0x65, 0x12,
	0x1f, 0x0a, 0x0b, 0x64, 0x61, 0x6d, 0x61, 0x67, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x18,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x64, 0x61, 0x6d, 0x61, 0x67, 0x65, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x1b, 0x0a, 0x09, 0x6c, 0x69, 0x66, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x19, 0x20,
	0x01, 0x28, 0x01, 0x52, 0x08, 0x6c, 0x69, 0x66, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x14, 0x0a,
	0x05, 0x73, 0x70, 0x65, 0x65, 0x64, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x01, 0x52, 0x05, 0x73, 0x70,
	0x65, 0x65, 0x64, 0x12, 0x22, 0x0a, 0x0d, 0x67, 0x75, 0x6e, 0x5f, 0x74, 0x75, 0x72, 0x6e, 0x5f,
	0x72, 0x61, 0x74, 0x65, 0x18, 0x1b, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0b, 0x67, 0x75, 0x6e, 0x54,
	0x75, 0x72, 0x6e, 0x52, 0x61, 0x74, 0x65, 0x12, 0x29, 0x0a, 0x10, 0x64, 0x69, 0x73, 0x70, 0x65,
	0x72, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x61, 0x6e, 0x67, 0x6c, 0x65, 0x18, 0x1c, 0x20, 0x01, 0x28,
	0x01, 0x52, 0x0f, 0x64, 0x69, 0x73, 0x70, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x41, 0x6e, 0x67,
	0x6c, 0x65, 0x12, 0x2d, 0x0a, 0x13, 0x68, 0x75, 0x6c, 0x6c, 0x5f, 0x64, 0x61, 0x6d, 0x61, 0x67,
	0x65, 0x5f, 0x70, 0x65, 0x72, 0x5f, 0x73, 0x65, 0x63, 0x18, 0x1d, 0x20, 0x01, 0x28, 0x01, 0x52,
	0x10, 0x68, 0x75, 0x6c, 0x6c, 0x44, 0x61, 0x6d, 0x61, 0x67, 0x65, 0x50, 0x65, 0x72, 0x53, 0x65,
	0x63, 0x12, 0x38, 0x0a, 0x19, 0x61, 0x76, 0x67, 0x5f, 0x73, 0x68, 0x69, 0x65, 0x6c, 0x64, 0x5f,
	0x64, 0x61, 0x6d, 0x61, 0x67, 0x65, 0x5f, 0x70, 0x65, 0x72, 0x5f, 0x73, 0x65, 0x63, 0x18, 0x1e,
	0x20, 0x01, 0x28, 0x01, 0x52, 0x15, 0x61, 0x76, 0x67, 0x53, 0x68, 0x69, 0x65, 0x6c, 0x64, 0x44,
	0x61, 0x6d, 0x61, 0x67, 0x65, 0x50, 0x65, 0x72, 0x53, 0x65, 0x63, 0x12, 0x31, 0x0a, 0x15, 0x65,
	0x6e, 0x65, 0x72, 0x67, 0x79, 0x5f, 0x64, 0x61, 0x6d, 0x61, 0x67, 0x65, 0x5f, 0x70, 0x65, 0x72,
	0x5f, 0x73, 0x65, 0x63, 0x18, 0x1f, 0x20, 0x01, 0x28, 0x01, 0x52, 0x12, 0x65, 0x6e, 0x65, 0x72,
	0x67, 0x79, 0x44, 0x61, 0x6d, 0x61, 0x67, 0x65, 0x50, 0x65, 0x72, 0x53, 0x65, 0x63, 0x12, 0x2d,
	0x0a, 0x13, 0x70, 0x6f, 0x77, 0x65, 0x72, 0x5f, 0x75, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x70, 0x65,
	0x72, 0x5f, 0x73, 0x65, 0x63, 0x18, 0x20, 0x20, 0x01, 0x28, 0x01, 0x52, 0x10, 0x70, 0x6f, 0x77,
	0x65, 0x72, 0x55, 0x73, 0x61, 0x67, 0x65, 0x50, 0x65, 0x72, 0x53, 0x65, 0x63, 0x12, 0x25, 0x0a,
	0x0e, 0x61, 0x76, 0x67, 0x5f, 0x65, 0x66, 0x66, 0x69, 0x63, 0x69, 0x65, 0x6e, 0x63, 0x79, 0x18,
	0x21, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0d, 0x61, 0x76, 0x67, 0x45, 0x66, 0x66, 0x69, 0x63, 0x69,
	0x65, 0x6e, 0x63, 0x79, 0x12, 0x27, 0x0a, 0x0f, 0x68, 0x75, 0x6c, 0x6c, 0x5f, 0x65, 0x66, 0x66,
	0x69, 0x63, 0x69, 0x65, 0x6e, 0x63, 0x79, 0x18, 0x22, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0e, 0x68,
	0x75, 0x6c, 0x6c, 0x45, 0x66, 0x66, 0x69, 0x63, 0x69, 0x65, 0x6e, 0x63, 0x79, 0x12, 0x2b, 0x0a,
	0x11, 0x73, 0x68, 0x69, 0x65, 0x6c, 0x64, 0x5f, 0x65, 0x66, 0x66, 0x69, 0x63, 0x69, 0x65, 0x6e,
	0x63, 0x79, 0x18, 0x23, 0x20, 0x01, 0x28, 0x01, 0x52, 0x10, 0x73, 0x68, 0x69, 0x65, 0x6c, 0x64,
	0x45, 0x66, 0x66, 0x69, 0x63, 0x69, 0x65, 0x6e, 0x63, 0x79, 0x12, 0x38, 0x0a, 0x18, 0x65, 0x6e,
	0x65, 0x72, 0x67, 0x79, 0x5f, 0x64, 0x61, 0x6d, 0x61, 0x67, 0x65, 0x5f, 0x65, 0x66, 0x66, 0x69,
	0x63, 0x69, 0x65, 0x6e, 0x63, 0x79, 0x18, 0x24, 0x20, 0x01, 0x28, 0x01, 0x52, 0x16, 0x65, 0x6e,
	0x65, 0x72, 0x67, 0x79, 0x44, 0x61, 0x6d, 0x61, 0x67, 0x65, 0x45, 0x66, 0x66, 0x69, 0x63, 0x69,
	0x65, 0x6e, 0x63, 0x79, 0x12, 0x3d, 0x0a, 0x0e, 0x64, 0x61, 0x6d, 0x61, 0x67, 0x65, 0x5f, 0x62,
	0x6f, 0x6e, 0x75, 0x73, 0x65, 0x73, 0x18, 0x25, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x73,
	0x74, 0x61, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x44, 0x61, 0x6d, 0x61, 0x67, 0x65, 0x42,
	0x6f, 0x6e, 0x75, 0x73, 0x52, 0x0d, 0x64, 0x61, 0x6d, 0x61, 0x67, 0x65, 0x42, 0x6f, 0x6e, 0x75,
	0x73, 0x65, 0x73, 0x12, 0x2c, 0x0a, 0x07, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6c, 0x65, 0x18, 0x26,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x73, 0x74, 0x61, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x4d, 0x69, 0x73, 0x73, 0x69, 0x6c, 0x65, 0x52, 0x07, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6c,
	0x65, 0x12, 0x39, 0x0a, 0x0c, 0x67, 0x75, 0x6e, 0x5f, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x65,
	0x64, 0x18, 0x27, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x73, 0x74, 0x61, 0x74, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x47, 0x75, 0x6e, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x52,
	0x0b, 0x67, 0x75, 0x6e, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x12, 0x24, 0x0a, 0x0b,
	0x6e, 0x75, 0x6d, 0x5f, 0x62, 0x61, 0x72, 0x72, 0x65, 0x6c, 0x73, 0x18, 0x28, 0x20, 0x01, 0x28,
	0x03, 0x48, 0x01, 0x52, 0x0a, 0x6e, 0x75, 0x6d, 0x42, 0x61, 0x72, 0x72, 0x65, 0x6c, 0x73, 0x88,
	0x01, 0x01, 0x12, 0x38, 0x0a, 0x0a, 0x62, 0x75, 0x72, 0x73, 0x74, 0x5f, 0x66, 0x69, 0x72, 0x65,
	0x18, 0x29, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x73, 0x74, 0x61, 0x74, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x42, 0x75, 0x72, 0x73, 0x74, 0x46, 0x69, 0x72, 0x65, 0x48, 0x02, 0x52, 0x09,
	0x62, 0x75, 0x72, 0x73, 0x74, 0x46, 0x69, 0x72, 0x65, 0x88, 0x01, 0x01, 0x12, 0x33, 0x0a, 0x0a,
	0x61, 0x6d, 0x6d, 0x6f, 0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x2a, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x14, 0x2e, 0x73, 0x74, 0x61, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x41, 0x6d, 0x6d,
	0x6f, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x52, 0x09, 0x61, 0x6d, 0x6d, 0x6f, 0x4c, 0x69, 0x6d, 0x69,
	0x74, 0x12, 0x12, 0x0a, 0x04, 0x6d, 0x61, 0x73, 0x73, 0x18, 0x2b, 0x20, 0x01, 0x28, 0x01, 0x52,
	0x04, 0x6d, 0x61, 0x73, 0x73, 0x12, 0x35, 0x0a, 0x09, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x5f, 0x67,
	0x75, 0x6e, 0x18, 0x2c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x73, 0x74, 0x61, 0x74, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x44, 0x69, 0x73, 0x63, 0x6f, 0x47, 0x75, 0x6e, 0x48, 0x03, 0x52,
	0x08, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x47, 0x75, 0x6e, 0x88, 0x01, 0x01, 0x1a, 0x4f, 0x0a, 0x0a,
	0x42, 0x61, 0x73, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65,
	0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x2b, 0x0a, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x73, 0x74,
	0x61, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x47, 0x6f,
	0x6f, 0x64, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x42, 0x18, 0x0a,
	0x16, 0x5f, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x79, 0x5f, 0x74, 0x65, 0x63, 0x68,
	0x5f, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x74, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x6e, 0x75, 0x6d, 0x5f,
	0x62, 0x61, 0x72, 0x72, 0x65, 0x6c, 0x73, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x62, 0x75, 0x72, 0x73,
	0x74, 0x5f, 0x66, 0x69, 0x72, 0x65, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x64, 0x69, 0x73, 0x63, 0x6f,
	0x5f, 0x67, 0x75, 0x6e, 0x22, 0x3d, 0x0a, 0x0b, 0x44, 0x61, 0x6d, 0x61, 0x67, 0x65, 0x42, 0x6f,
	0x6e, 0x75, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x6d, 0x6f, 0x64, 0x69, 0x66,
	0x69, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x01, 0x52, 0x08, 0x6d, 0x6f, 0x64, 0x69, 0x66,
	0x69, 0x65, 0x72, 0x22, 0x3b, 0x0a, 0x07, 0x4d, 0x69, 0x73, 0x73, 0x69, 0x6c, 0x65, 0x12, 0x30,
	0x0a, 0x14, 0x6d, 0x61, 0x78, 0x5f, 0x61, 0x6e, 0x67, 0x75, 0x6c, 0x61, 0x72, 0x5f, 0x76, 0x65,
	0x6c, 0x6f, 0x63, 0x69, 0x74, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x01, 0x52, 0x12, 0x6d, 0x61,
	0x78, 0x41, 0x6e, 0x67, 0x75, 0x6c, 0x61, 0x72, 0x56, 0x65, 0x6c, 0x6f, 0x63, 0x69, 0x74, 0x79,
	0x22, 0x90, 0x01, 0x0a, 0x0b, 0x47, 0x75, 0x6e, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x65, 0x64,
	0x12, 0x2e, 0x0a, 0x13, 0x66, 0x6c, 0x61, 0x73, 0x68, 0x5f, 0x70, 0x61, 0x72, 0x74, 0x69, 0x63,
	0x6c, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x66,
	0x6c, 0x61, 0x73, 0x68, 0x50, 0x61, 0x72, 0x74, 0x69, 0x63, 0x6c, 0x65, 0x4e, 0x61, 0x6d, 0x65,
	0x12, 0x21, 0x0a, 0x0c, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x5f, 0x65, 0x66, 0x66, 0x65, 0x63, 0x74,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x45, 0x66, 0x66,
	0x65, 0x63, 0x74, 0x12, 0x2e, 0x0a, 0x13, 0x6d, 0x75, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x5f,
	0x68, 0x69, 0x74, 0x5f, 0x65, 0x66, 0x66, 0x65, 0x63, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x11, 0x6d, 0x75, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x69, 0x74, 0x45, 0x66, 0x66,
	0x65, 0x63, 0x74, 0x22, 0x82, 0x03, 0x0a, 0x09, 0x42, 0x75, 0x72, 0x73, 0x74, 0x46, 0x69, 0x72,
	0x65, 0x12, 0x29, 0x0a, 0x10, 0x73, 0x75, 0x73, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x64, 0x5f, 0x72,
	0x65, 0x66, 0x69, 0x72, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0f, 0x73, 0x75, 0x73,
	0x74, 0x61, 0x69, 0x6e, 0x65, 0x64, 0x52, 0x65, 0x66, 0x69, 0x72, 0x65, 0x12, 0x12, 0x0a, 0x04,
	0x61, 0x6d, 0x6d, 0x6f, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x61, 0x6d, 0x6d, 0x6f,
	0x12, 0x1f, 0x0a, 0x0b, 0x72, 0x65, 0x6c, 0x6f, 0x61, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0a, 0x72, 0x65, 0x6c, 0x6f, 0x61, 0x64, 0x54, 0x69, 0x6d,
	0x65, 0x12, 0x40, 0x0a, 0x1d, 0x73, 0x75, 0x73, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x64, 0x5f, 0x68,
	0x75, 0x6c, 0x6c, 0x5f, 0x64, 0x61, 0x6d, 0x61, 0x67, 0x65, 0x5f, 0x70, 0x65, 0x72, 0x5f, 0x73,
	0x65, 0x63, 0x18, 0x04, 0x20, 0x01, 0x28, 0x01, 0x52, 0x19, 0x73, 0x75, 0x73, 0x74, 0x61, 0x69,
	0x6e, 0x65, 0x64, 0x48, 0x75, 0x6c, 0x6c, 0x44, 0x61, 0x6d, 0x61, 0x67, 0x65, 0x50, 0x65, 0x72,
	0x53, 0x65, 0x63, 0x12, 0x4b, 0x0a, 0x23, 0x73, 0x75, 0x73, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x64,
	0x5f, 0x61, 0x76, 0x67, 0x5f, 0x73, 0x68, 0x69, 0x65, 0x6c, 0x64, 0x5f, 0x64, 0x61, 0x6d, 0x61,
	0x67, 0x65, 0x5f, 0x70, 0x65, 0x72, 0x5f, 0x73, 0x65, 0x63, 0x18, 0x05, 0x20, 0x01, 0x28, 0x01,
	0x52, 0x1e, 0x73, 0x75, 0x73, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x64, 0x41, 0x76, 0x67, 0x53, 0x68,
	0x69, 0x65, 0x6c, 0x64, 0x44, 0x61, 0x6d, 0x61, 0x67, 0x65, 0x50, 0x65, 0x72, 0x53, 0x65, 0x63,
	0x12, 0x44, 0x0a, 0x1f, 0x73, 0x75, 0x73, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x64, 0x5f, 0x65, 0x6e,
	0x65, 0x72, 0x67, 0x79, 0x5f, 0x64, 0x61, 0x6d, 0x61, 0x67, 0x65, 0x5f, 0x70, 0x65, 0x72, 0x5f,
	0x73, 0x65, 0x63, 0x18, 0x06, 0x20, 0x01, 0x28, 0x01, 0x52, 0x1b, 0x73, 0x75, 0x73, 0x74, 0x61,
	0x69, 0x6e, 0x65, 0x64, 0x45, 0x6e, 0x65, 0x72, 0x67, 0x79, 0x44, 0x61, 0x6d, 0x61, 0x67, 0x65,
	0x50, 0x65, 0x72, 0x53, 0x65, 0x63, 0x12, 0x40, 0x0a, 0x1d, 0x73, 0x75, 0x73, 0x74, 0x61, 0x69,
	0x6e, 0x65, 0x64, 0x5f, 0x70, 0x6f, 0x77, 0x65, 0x72, 0x5f, 0x75, 0x73, 0x61, 0x67, 0x65, 0x5f,
	0x70, 0x65, 0x72, 0x5f, 0x73, 0x65, 0x63, 0x18, 0x07, 0x20, 0x01, 0x28, 0x01, 0x52, 0x19, 0x73,
	0x75, 0x73, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x64, 0x50, 0x6f, 0x77, 0x65, 0x72, 0x55, 0x73, 0x61,
	0x67, 0x65, 0x50, 0x65, 0x72, 0x53, 0x65, 0x63, 0x22, 0x27, 0x0a, 0x08, 0x44, 0x69, 0x73, 0x63,
	0x6f, 0x47, 0x75, 0x6e, 0x12, 0x1b, 0x0a, 0x09, 0x61, 0x72, 0x6d, 0x6f, 0x72, 0x5f, 0x70, 0x65,
	0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x01, 0x52, 0x08, 0x61, 0x72, 0x6d, 0x6f, 0x72, 0x50, 0x65,
	0x6e, 0x22, 0x36, 0x0a, 0x0d, 0x47, 0x65, 0x74, 0x4d, 0x69, 0x6e, 0x65, 0x73, 0x52, 0x65, 0x70,
	0x6c, 0x79, 0x12, 0x25, 0x0a, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x0f, 0x2e, 0x73, 0x74, 0x61, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4d, 0x69,
	0x6e, 0x65, 0x52, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x22, 0xae, 0x08, 0x0a, 0x04, 0x4d, 0x69,
	0x6e, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x70, 0x72, 0x69, 0x63, 0x65, 0x12, 0x1d, 0x0a, 0x0a,
	0x61, 0x6d, 0x6d, 0x6f, 0x5f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x09, 0x61, 0x6d, 0x6d, 0x6f, 0x50, 0x72, 0x69, 0x63, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x6e,
	0x69, 0x63, 0x6b, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6e,
	0x69, 0x63, 0x6b, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x31, 0x0a, 0x14, 0x70, 0x72, 0x6f, 0x6a, 0x65,
	0x63, 0x74, 0x69, 0x6c, 0x65, 0x5f, 0x61, 0x72, 0x63, 0x68, 0x65, 0x74, 0x79, 0x70, 0x65, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x13, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x69, 0x6c,
	0x65, 0x41, 0x72, 0x63, 0x68, 0x65, 0x74, 0x79, 0x70, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x69, 0x64,
	0x73, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x69, 0x64,
	0x73, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x69, 0x64, 0x73, 0x5f, 0x69, 0x6e, 0x66,
	0x6f, 0x18, 0x07, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x69, 0x64, 0x73, 0x49, 0x6e, 0x66, 0x6f,
	0x12, 0x1f, 0x0a, 0x0b, 0x68, 0x75, 0x6c, 0x6c, 0x5f, 0x64, 0x61, 0x6d, 0x61, 0x67, 0x65, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x68, 0x75, 0x6c, 0x6c, 0x44, 0x61, 0x6d, 0x61, 0x67,
	0x65, 0x12, 0x25, 0x0a, 0x0e, 0x65, 0x6e, 0x65, 0x72, 0x67, 0x79, 0x5f, 0x64, 0x61, 0x6d, 0x61,
	0x6e, 0x67, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0d, 0x65, 0x6e, 0x65, 0x72, 0x67,
	0x79, 0x44, 0x61, 0x6d, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x73, 0x68, 0x69, 0x65,
	0x6c, 0x64, 0x5f, 0x64, 0x61, 0x6d, 0x61, 0x67, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x0c, 0x73, 0x68, 0x69, 0x65, 0x6c, 0x64, 0x44, 0x61, 0x6d, 0x61, 0x67, 0x65, 0x12, 0x1f, 0x0a,
	0x0b, 0x70, 0x6f, 0x77, 0x65, 0x72, 0x5f, 0x75, 0x73, 0x61, 0x67, 0x65, 0x18, 0x0b, 0x20, 0x01,
	0x28, 0x01, 0x52, 0x0a, 0x70, 0x6f, 0x77, 0x65, 0x72, 0x55, 0x73, 0x61, 0x67, 0x65, 0x12, 0x14,
	0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x01, 0x52, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x66, 0x69, 0x72, 0x65, 0x18, 0x0d,
	0x20, 0x01, 0x28, 0x01, 0x52, 0x06, 0x72, 0x65, 0x66, 0x69, 0x72, 0x65, 0x12, 0x2f, 0x0a, 0x13,
	0x64, 0x65, 0x74, 0x6f, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x64, 0x69, 0x73, 0x74, 0x61,
	0x6e, 0x63, 0x65, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x01, 0x52, 0x12, 0x64, 0x65, 0x74, 0x6f, 0x6e,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x69, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x16, 0x0a,
	0x06, 0x72, 0x61, 0x64, 0x69, 0x75, 0x73, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x01, 0x52, 0x06, 0x72,
	0x61, 0x64, 0x69, 0x75, 0x73, 0x12, 0x23, 0x0a, 0x0d, 0x73, 0x65, 0x65, 0x6b, 0x5f, 0x64, 0x69,
	0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x18, 0x10, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0c, 0x73, 0x65,
	0x65, 0x6b, 0x44, 0x69, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x74, 0x6f,
	0x70, 0x5f, 0x73, 0x70, 0x65, 0x65, 0x64, 0x18, 0x11, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x74,
	0x6f, 0x70, 0x53, 0x70, 0x65, 0x65, 0x64, 0x12, 0x22, 0x0a, 0x0c, 0x61, 0x63, 0x63, 0x65, 0x6c,
	0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x12, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0c, 0x61,
	0x63, 0x63, 0x65, 0x6c, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1f, 0x0a, 0x0b, 0x6c,
	0x69, 0x6e, 0x65, 0x61, 0x72, 0x5f, 0x64, 0x72, 0x61, 0x67, 0x18, 0x13, 0x20, 0x01, 0x28, 0x01,
	0x52, 0x0a, 0x6c, 0x69, 0x6e, 0x65, 0x61, 0x72, 0x44, 0x72, 0x61, 0x67, 0x12, 0x1b, 0x0a, 0x09,
	0x6c, 0x69, 0x66, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x14, 0x20, 0x01, 0x28, 0x01, 0x52,
	0x08, 0x6c, 0x69, 0x66, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x6f, 0x77, 0x6e,
	0x65, 0x72, 0x5f, 0x73, 0x61, 0x66, 0x65, 0x18, 0x15, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x6f,
	0x77, 0x6e, 0x65, 0x72, 0x53, 0x61, 0x66, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x74, 0x6f, 0x75, 0x67,
	0x68, 0x6e, 0x65, 0x73, 0x73, 0x18, 0x16, 0x20, 0x01, 0x28, 0x01, 0x52, 0x09, 0x74, 0x6f, 0x75,
	0x67, 0x68, 0x6e, 0x65, 0x73, 0x73, 0x12, 0x17, 0x0a, 0x07, 0x68, 0x69, 0x74, 0x5f, 0x70, 0x74,
	0x73, 0x18, 0x17, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x68, 0x69, 0x74, 0x50, 0x74, 0x73, 0x12,
	0x1a, 0x0a, 0x08, 0x6c, 0x6f, 0x6f, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x18, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x08, 0x6c, 0x6f, 0x6f, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x33, 0x0a, 0x0a, 0x61,
	0x6d, 0x6d, 0x6f, 0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x19, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x14, 0x2e, 0x73, 0x74, 0x61, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x41, 0x6d, 0x6d, 0x6f,
	0x4c, 0x69, 0x6d, 0x69, 0x74, 0x52, 0x09, 0x61, 0x6d, 0x6d, 0x6f, 0x4c, 0x69, 0x6d, 0x69, 0x74,
	0x12, 0x12, 0x0a, 0x04, 0x6d, 0x61, 0x73, 0x73, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x01, 0x52, 0x04,
	0x6d, 0x61, 0x73, 0x73, 0x12, 0x30, 0x0a, 0x05, 0x62, 0x61, 0x73, 0x65, 0x73, 0x18, 0x1b, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x73, 0x74, 0x61, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x4d, 0x69, 0x6e, 0x65, 0x2e, 0x42, 0x61, 0x73, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52,
	0x05, 0x62, 0x61, 0x73, 0x65, 0x73, 0x12, 0x57, 0x0a, 0x15, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x76,
	0x65, 0x72, 0x79, 0x5f, 0x74, 0x65, 0x63, 0x68, 0x5f, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x74, 0x18,
	0x1c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x73, 0x74, 0x61, 0x74, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x44, 0x69, 0x73, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x79, 0x54, 0x65, 0x63, 0x68, 0x43,
	0x6f, 0x6d, 0x70, 0x61, 0x74, 0x48, 0x00, 0x52, 0x13, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x76, 0x65,
	0x72, 0x79, 0x54, 0x65, 0x63, 0x68, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x74, 0x88, 0x01, 0x01, 0x1a,
	0x4f, 0x0a, 0x0a, 0x42, 0x61, 0x73, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a,
	0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12,
	0x2b, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15,
	0x2e, 0x73, 0x74, 0x61, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4d, 0x61, 0x72, 0x6b, 0x65,
	0x74, 0x47, 0x6f, 0x6f, 0x64, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01,
	0x42, 0x18, 0x0a, 0x16, 0x5f, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x79, 0x5f, 0x74,
	0x65, 0x63, 0x68, 0x5f, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x74, 0x22, 0x91, 0x01, 0x0a, 0x09, 0x41,
	0x6d, 0x6d, 0x6f, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x31, 0x0a, 0x12, 0x61, 0x6d, 0x6f, 0x75,
	0x6e, 0x74, 0x5f, 0x69, 0x6e, 0x5f, 0x63, 0x61, 0x74, 0x72, 0x69, 0x64, 0x67, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x03, 0x48, 0x00, 0x52, 0x10, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x6e,
	0x43, 0x61, 0x74, 0x72, 0x69, 0x64, 0x67, 0x65, 0x88, 0x01, 0x01, 0x12, 0x28, 0x0a, 0x0d, 0x6d,
	0x61, 0x78, 0x5f, 0x63, 0x61, 0x74, 0x72, 0x69, 0x64, 0x67, 0x65, 0x73, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x03, 0x48, 0x01, 0x52, 0x0c, 0x6d, 0x61, 0x78, 0x43, 0x61, 0x74, 0x72, 0x69, 0x64, 0x67,
	0x65, 0x73, 0x88, 0x01, 0x01, 0x42, 0x15, 0x0a, 0x13, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74,
	0x5f, 0x69, 0x6e, 0x5f, 0x63, 0x61, 0x74, 0x72, 0x69, 0x64, 0x67, 0x65, 0x42, 0x10, 0x0a, 0x0e,
	0x5f, 0x6d, 0x61, 0x78, 0x5f, 0x63, 0x61, 0x74, 0x72, 0x69, 0x64, 0x67, 0x65, 0x73, 0x22, 0x3c,
	0x0a, 0x10, 0x47, 0x65, 0x74, 0x53, 0x63, 0x61, 0x6e, 0x6e, 0x65, 0x72, 0x73, 0x52, 0x65, 0x70,
	0x6c, 0x79, 0x12, 0x28, 0x0a, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x12, 0x2e, 0x73, 0x74, 0x61, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x63,
	0x61, 0x6e, 0x6e, 0x65, 0x72, 0x52, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x22, 0xea, 0x03, 0x0a,
	0x07, 0x53, 0x63, 0x61, 0x6e, 0x6e, 0x65, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05,
	0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x70, 0x72, 0x69,
	0x63, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x05, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x28, 0x0a, 0x10, 0x63, 0x61, 0x72, 0x67,
	0x6f, 0x5f, 0x73, 0x63, 0x61, 0x6e, 0x5f, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x0e, 0x63, 0x61, 0x72, 0x67, 0x6f, 0x53, 0x63, 0x61, 0x6e, 0x52, 0x61, 0x6e,
	0x67, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x6c, 0x6f, 0x6f, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x6c, 0x6f, 0x6f, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x1a,
	0x0a, 0x08, 0x6e, 0x69, 0x63, 0x6b, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x6e, 0x69, 0x63, 0x6b, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x17, 0x0a, 0x07, 0x6e, 0x61,
	0x6d, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x6e, 0x61, 0x6d,
	0x65, 0x49, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x69, 0x6e, 0x66, 0x6f, 0x5f, 0x69, 0x64, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x69, 0x6e, 0x66, 0x6f, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04,
	0x6d, 0x61, 0x73, 0x73, 0x18, 0x09, 0x20, 0x01, 0x28, 0x01, 0x52, 0x04, 0x6d, 0x61, 0x73, 0x73,
	0x12, 0x33, 0x0a, 0x05, 0x62, 0x61, 0x73, 0x65, 0x73, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x1d, 0x2e, 0x73, 0x74, 0x61, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x63, 0x61, 0x6e,
	0x6e, 0x65, 0x72, 0x2e, 0x42, 0x61, 0x73, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x05,
	0x62, 0x61, 0x73, 0x65, 0x73, 0x12, 0x57, 0x0a, 0x15, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x76, 0x65,
	0x72, 0x79, 0x5f, 0x74, 0x65, 0x63, 0x68, 0x5f, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x74, 0x18, 0x0b,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x73, 0x74, 0x61, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x44, 0x69, 0x73, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x79, 0x54, 0x65, 0x63, 0x68, 0x43, 0x6f,
	0x6d, 0x70, 0x61, 0x74, 0x48, 0x00, 0x52, 0x13, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x76, 0x65, 0x72,
	0x79, 0x54, 0x65, 0x63, 0x68, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x74, 0x88, 0x01, 0x01, 0x1a, 0x4f,
	0x0a, 0x0a, 0x42, 0x61, 0x73, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03,
	0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x2b,
	0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e,
	0x73, 0x74, 0x61, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74,
	0x47, 0x6f, 0x6f, 0x64, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x42,
	0x18, 0x0a, 0x16, 0x5f, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x79, 0x5f, 0x74, 0x65,
	0x63, 0x68, 0x5f, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x74, 0x22, 0x3a, 0x0a, 0x0f, 0x47, 0x65, 0x74,
	0x53, 0x68, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x27, 0x0a, 0x05,
	0x69, 0x74, 0x65, 0x6d, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x73, 0x74,
	0x61, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x68, 0x69, 0x65, 0x6c, 0x64, 0x52, 0x05,
	0x69, 0x74, 0x65, 0x6d, 0x73, 0x22, 0xad, 0x06, 0x0a, 0x06, 0x53, 0x68, 0x69, 0x65, 0x6c, 0x64,
	0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x05, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79,
	0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x1e,
	0x0a, 0x0a, 0x74, 0x65, 0x63, 0x68, 0x6e, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0a, 0x74, 0x65, 0x63, 0x68, 0x6e, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x12, 0x14,
	0x0a, 0x05, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x70,
	0x72, 0x69, 0x63, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x61, 0x70, 0x61, 0x63, 0x69, 0x74, 0x79,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x63, 0x61, 0x70, 0x61, 0x63, 0x69, 0x74, 0x79,
	0x12, 0x2b, 0x0a, 0x11, 0x72, 0x65, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x5f, 0x72, 0x61, 0x74, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x03, 0x52, 0x10, 0x72, 0x65, 0x67,
	0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x61, 0x74, 0x65, 0x12, 0x2e, 0x0a,
	0x13, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x74, 0x5f, 0x70, 0x6f, 0x77, 0x65, 0x72, 0x5f,
	0x64, 0x72, 0x61, 0x77, 0x18, 0x08, 0x20, 0x01, 0x28, 0x03, 0x52, 0x11, 0x63, 0x6f, 0x6e, 0x73,
	0x74, 0x61, 0x6e, 0x74, 0x50, 0x6f, 0x77, 0x65, 0x72, 0x44, 0x72, 0x61, 0x77, 0x12, 0x14, 0x0a,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x01, 0x52, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x12, 0x2c, 0x0a, 0x12, 0x72, 0x65, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x5f, 0x70,
	0x6f, 0x77, 0x65, 0x72, 0x5f, 0x64, 0x72, 0x61, 0x77, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x10, 0x72, 0x65, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x50, 0x6f, 0x77, 0x65, 0x72, 0x44, 0x72, 0x61,
	0x77, 0x12, 0x28, 0x0a, 0x10, 0x6f, 0x66, 0x66, 0x5f, 0x72, 0x65, 0x62, 0x75, 0x69, 0x6c, 0x64,
	0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0e, 0x6f, 0x66, 0x66,
	0x52, 0x65, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x74,
	0x6f, 0x75, 0x67, 0x68, 0x6e, 0x65, 0x73, 0x73, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x01, 0x52, 0x09,
	0x74, 0x6f, 0x75, 0x67, 0x68, 0x6e, 0x65, 0x73, 0x73, 0x12, 0x17, 0x0a, 0x07, 0x68, 0x69, 0x74,
	0x5f, 0x70, 0x74, 0x73, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x68, 0x69, 0x74, 0x50,
	0x74, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x6c, 0x6f, 0x6f, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x0e,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x6c, 0x6f, 0x6f, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x1a,
	0x0a, 0x08, 0x6e, 0x69, 0x63, 0x6b, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x6e, 0x69, 0x63, 0x6b, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x17, 0x0a, 0x07, 0x68, 0x70,
	0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x10, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x68, 0x70, 0x54,
	0x79, 0x70, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x69, 0x64, 0x73, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x11, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x69, 0x64, 0x73, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x19,
	0x0a, 0x08, 0x69, 0x64, 0x73, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x12, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x07, 0x69, 0x64, 0x73, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x12, 0x0a, 0x04, 0x6d, 0x61, 0x73,
	0x73, 0x18, 0x13, 0x20, 0x01, 0x28, 0x01, 0x52, 0x04, 0x6d, 0x61, 0x73, 0x73, 0x12, 0x32, 0x0a,
	0x05, 0x62, 0x61, 0x73, 0x65, 0x73, 0x18, 0x14, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x73,
	0x74, 0x61, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x68, 0x69, 0x65, 0x6c, 0x64, 0x2e,
	0x42, 0x61, 0x73, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x05, 0x62, 0x61, 0x73, 0x65,
	0x73, 0x12, 0x57, 0x0a, 0x15, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x79, 0x5f, 0x74,
	0x65, 0x63, 0x68, 0x5f, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x74, 0x18, 0x15, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1e, 0x2e, 0x73, 0x74, 0x61, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x44, 0x69, 0x73,
	0x63, 0x6f, 0x76, 0x65, 0x72, 0x79, 0x54, 0x65, 0x63, 0x68, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x74,
	0x48, 0x00, 0x52, 0x13, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x79, 0x54, 0x65, 0x63,
	0x68, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x74, 0x88, 0x01, 0x01, 0x1a, 0x4f, 0x0a, 0x0a, 0x42, 0x61,
	0x73, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x2b, 0x0a, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x73, 0x74, 0x61, 0x74,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x47, 0x6f, 0x6f, 0x64,
	0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x42, 0x18, 0x0a, 0x16, 0x5f,
	0x64, 0x69, 0x73, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x79, 0x5f, 0x74, 0x65, 0x63, 0x68, 0x5f, 0x63,
	0x6f, 0x6d, 0x70, 0x61, 0x74, 0x22, 0x36, 0x0a, 0x0d, 0x47, 0x65, 0x74, 0x53, 0x68, 0x69, 0x70,
	0x73, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x25, 0x0a, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x73, 0x74, 0x61, 0x74, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x53, 0x68, 0x69, 0x70, 0x52, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x22, 0x93, 0x0b,
	0x0a, 0x04, 0x53, 0x68, 0x69, 0x70, 0x12, 0x1a, 0x0a, 0x08, 0x6e, 0x69, 0x63, 0x6b, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6e, 0x69, 0x63, 0x6b, 0x6e, 0x61,
	0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x12, 0x12, 0x0a, 0x04,
	0x74, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65,
	0x12, 0x14, 0x0a, 0x05, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x05, 0x70, 0x72, 0x69, 0x63, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x61, 0x72, 0x6d, 0x6f, 0x72, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x61, 0x72, 0x6d, 0x6f, 0x72, 0x12, 0x1b, 0x0a, 0x09,
	0x68, 0x6f, 0x6c, 0x64, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x08, 0x68, 0x6f, 0x6c, 0x64, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x6e, 0x61, 0x6e,
	0x6f, 0x62, 0x6f, 0x74, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x6e, 0x61, 0x6e,
	0x6f, 0x62, 0x6f, 0x74, 0x73, 0x12, 0x1c, 0x0a, 0x09, 0x62, 0x61, 0x74, 0x74, 0x65, 0x72, 0x69,
	0x65, 0x73, 0x18, 0x09, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x62, 0x61, 0x74, 0x74, 0x65, 0x72,
	0x69, 0x65, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x6d, 0x61, 0x73, 0x73, 0x18, 0x0a, 0x20, 0x01, 0x28,
	0x01, 0x52, 0x04, 0x6d, 0x61, 0x73, 0x73, 0x12, 0x25, 0x0a, 0x0e, 0x70, 0x6f, 0x77, 0x65, 0x72,
	0x5f, 0x63, 0x61, 0x70, 0x61, 0x63, 0x69, 0x74, 0x79, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x0d, 0x70, 0x6f, 0x77, 0x65, 0x72, 0x43, 0x61, 0x70, 0x61, 0x63, 0x69, 0x74, 0x79, 0x12, 0x2e,
	0x0a, 0x13, 0x70, 0x6f, 0x77, 0x65, 0x72, 0x5f, 0x72, 0x65, 0x63, 0x68, 0x61, 0x72, 0x67, 0x65,
	0x5f, 0x72, 0x61, 0x74, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x03, 0x52, 0x11, 0x70, 0x6f, 0x77,
	0x65, 0x72, 0x52, 0x65, 0x63, 0x68, 0x61, 0x72, 0x67, 0x65, 0x52, 0x61, 0x74, 0x65, 0x12, 0x21,
	0x0a, 0x0c, 0x63, 0x72, 0x75, 0x69, 0x73, 0x65, 0x5f, 0x73, 0x70, 0x65, 0x65, 0x64, 0x18, 0x0d,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x63, 0x72, 0x75, 0x69, 0x73, 0x65, 0x53, 0x70, 0x65, 0x65,
	0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x6c, 0x69, 0x6e, 0x65, 0x61, 0x72, 0x5f, 0x64, 0x72, 0x61, 0x67,
	0x18, 0x0e, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0a, 0x6c, 0x69, 0x6e, 0x65, 0x61, 0x72, 0x44, 0x72,
	0x61, 0x67, 0x12, 0x28, 0x0a, 0x10, 0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x5f, 0x6d, 0x61, 0x78,
	0x5f, 0x66, 0x6f, 0x72, 0x63, 0x65, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0e, 0x65, 0x6e,
	0x67, 0x69, 0x6e, 0x65, 0x4d, 0x61, 0x78, 0x46, 0x6f, 0x72, 0x63, 0x65, 0x12, 0x23, 0x0a, 0x0d,
	0x69, 0x6d, 0x70, 0x75, 0x6c, 0x73, 0x65, 0x5f, 0x73, 0x70, 0x65, 0x65, 0x64, 0x18, 0x10, 0x20,
	0x01, 0x28, 0x01, 0x52, 0x0c, 0x69, 0x6d, 0x70, 0x75, 0x6c, 0x73, 0x65, 0x53, 0x70, 0x65, 0x65,
	0x64, 0x12, 0x25, 0x0a, 0x0e, 0x74, 0x68, 0x72, 0x75, 0x73, 0x74, 0x65, 0x72, 0x5f, 0x73, 0x70,
	0x65, 0x65, 0x64, 0x18, 0x11, 0x20, 0x03, 0x28, 0x03, 0x52, 0x0d, 0x74, 0x68, 0x72, 0x75, 0x73,
	0x74, 0x65, 0x72, 0x53, 0x70, 0x65, 0x65, 0x64, 0x12, 0x29, 0x0a, 0x10, 0x72, 0x65, 0x76, 0x65,
	0x72, 0x73, 0x65, 0x5f, 0x66, 0x72, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x12, 0x20, 0x01,
	0x28, 0x01, 0x52, 0x0f, 0x72, 0x65, 0x76, 0x65, 0x72, 0x73, 0x65, 0x46, 0x72, 0x61, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x27, 0x0a, 0x0f, 0x74, 0x68, 0x72, 0x75, 0x73, 0x74, 0x5f, 0x63, 0x61,
	0x70, 0x61, 0x63, 0x69, 0x74, 0x79, 0x18, 0x13, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0e, 0x74, 0x68,
	0x72, 0x75, 0x73, 0x74, 0x43, 0x61, 0x70, 0x61, 0x63, 0x69, 0x74, 0x79, 0x12, 0x27, 0x0a, 0x0f,
	0x74, 0x68, 0x72, 0x75, 0x73, 0x74, 0x5f, 0x72, 0x65, 0x63, 0x68, 0x61, 0x72, 0x67, 0x65, 0x18,
	0x14, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0e, 0x74, 0x68, 0x72, 0x75, 0x73, 0x74, 0x52, 0x65, 0x63,
	0x68, 0x61, 0x72, 0x67, 0x65, 0x12, 0x34, 0x0a, 0x17, 0x6d, 0x61, 0x78, 0x5f, 0x61, 0x6e, 0x67,
	0x75, 0x6c, 0x61, 0x72, 0x5f, 0x73, 0x70, 0x65, 0x65, 0x64, 0x5f, 0x64, 0x65, 0x67, 0x5f, 0x73,
	0x18, 0x15, 0x20, 0x01, 0x28, 0x01, 0x52, 0x13, 0x6d, 0x61, 0x78, 0x41, 0x6e, 0x67, 0x75, 0x6c,
	0x61, 0x72, 0x53, 0x70, 0x65, 0x65, 0x64, 0x44, 0x65, 0x67, 0x53, 0x12, 0x49, 0x0a, 0x22, 0x61,
	0x6e, 0x67, 0x75, 0x6c, 0x61, 0x72, 0x5f, 0x64, 0x69, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x5f,
	0x66, 0x72, 0x6f, 0x6d, 0x30, 0x5f, 0x74, 0x6f, 0x5f, 0x68, 0x61, 0x6c, 0x66, 0x5f, 0x73, 0x65,
	0x63, 0x18, 0x16, 0x20, 0x01, 0x28, 0x01, 0x52, 0x1d, 0x61, 0x6e, 0x67, 0x75, 0x6c, 0x61, 0x72,
	0x44, 0x69, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x46, 0x72, 0x6f, 0x6d, 0x30, 0x54, 0x6f, 0x48,
	0x61, 0x6c, 0x66, 0x53, 0x65, 0x63, 0x12, 0x3c, 0x0a, 0x1b, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x74,
	0x6f, 0x39, 0x30, 0x5f, 0x6d, 0x61, 0x78, 0x5f, 0x61, 0x6e, 0x67, 0x75, 0x6c, 0x61, 0x72, 0x5f,
	0x73, 0x70, 0x65, 0x65, 0x64, 0x18, 0x17, 0x20, 0x01, 0x28, 0x01, 0x52, 0x17, 0x74, 0x69, 0x6d,
	0x65, 0x54, 0x6f, 0x39, 0x30, 0x4d, 0x61, 0x78, 0x41, 0x6e, 0x67, 0x75, 0x6c, 0x61, 0x72, 0x53,
	0x70, 0x65, 0x65, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x6e, 0x75, 0x64, 0x67, 0x65, 0x5f, 0x66, 0x6f,
	0x72, 0x63, 0x65, 0x18, 0x18, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0a, 0x6e, 0x75, 0x64, 0x67, 0x65,
	0x46, 0x6f, 0x72, 0x63, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x73, 0x74, 0x72, 0x61, 0x66, 0x65, 0x5f,
	0x66, 0x6f, 0x72, 0x63, 0x65, 0x18, 0x19, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0b, 0x73, 0x74, 0x72,
	0x61, 0x66, 0x65, 0x46, 0x6f, 0x72, 0x63, 0x65, 0x12, 0x17, 0x0a, 0x07, 0x6e, 0x61, 0x6d, 0x65,
	0x5f, 0x69, 0x64, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x6e, 0x61, 0x6d, 0x65, 0x49,
	0x64, 0x12, 0x17, 0x0a, 0x07, 0x69, 0x6e, 0x66, 0x6f, 0x5f, 0x69, 0x64, 0x18, 0x1b, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x06, 0x69, 0x6e, 0x66, 0x6f, 0x49, 0x64, 0x12, 0x2e, 0x0a, 0x05, 0x73, 0x6c,
	0x6f, 0x74, 0x73, 0x18, 0x1c, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x73, 0x74, 0x61, 0x74,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x71, 0x75, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x53,
	0x6c, 0x6f, 0x74, 0x52, 0x05, 0x73, 0x6c, 0x6f, 0x74, 0x73, 0x12, 0x2b, 0x0a, 0x11, 0x62, 0x69,
	0x67, 0x67, 0x65, 0x73, 0x74, 0x5f, 0x68, 0x61, 0x72, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x18,
	0x1d, 0x20, 0x03, 0x28, 0x09, 0x52, 0x10, 0x62, 0x69, 0x67, 0x67, 0x65, 0x73, 0x74, 0x48, 0x61,
	0x72, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x12, 0x3b, 0x0a, 0x0d, 0x73, 0x68, 0x69, 0x70, 0x5f,
	0x70, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x73, 0x18, 0x1e, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x16,
	0x2e, 0x73, 0x74, 0x61, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x68, 0x69, 0x70, 0x50,
	0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x52, 0x0c, 0x73, 0x68, 0x69, 0x70, 0x50, 0x61, 0x63, 0x6b,
	0x61, 0x67, 0x65, 0x73, 0x12, 0x30, 0x0a, 0x05, 0x62, 0x61, 0x73, 0x65, 0x73, 0x18, 0x1f, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x73, 0x74, 0x61, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x53, 0x68, 0x69, 0x70, 0x2e, 0x42, 0x61, 0x73, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52,
	0x05, 0x62, 0x61, 0x73, 0x65, 0x73, 0x12, 0x57, 0x0a, 0x15, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x76,
	0x65, 0x72, 0x79, 0x5f, 0x74, 0x65, 0x63, 0x68, 0x5f, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x74, 0x18,
	0x20, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x73, 0x74, 0x61, 0x74, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x44, 0x69, 0x73, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x79, 0x54, 0x65, 0x63, 0x68, 0x43,
	0x6f, 0x6d, 0x70, 0x61, 0x74, 0x48, 0x00, 0x52, 0x13, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x76, 0x65,
	0x72, 0x79, 0x54, 0x65, 0x63, 0x68, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x74, 0x88, 0x01, 0x01, 0x12,
	0x38, 0x0a, 0x0a, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x5f, 0x73, 0x68, 0x69, 0x70, 0x18, 0x21, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x73, 0x74, 0x61, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x44, 0x69, 0x73, 0x63, 0x6f, 0x53, 0x68, 0x69, 0x70, 0x48, 0x01, 0x52, 0x09, 0x64, 0x69, 0x73,
	0x63, 0x6f, 0x53, 0x68, 0x69, 0x70, 0x88, 0x01, 0x01, 0x1a, 0x4f, 0x0a, 0x0a, 0x42, 0x61, 0x73,
	0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x2b, 0x0a, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x73, 0x74, 0x61, 0x74, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x47, 0x6f, 0x6f, 0x64, 0x52,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x42, 0x18, 0x0a, 0x16, 0x5f, 0x64,
	0x69, 0x73, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x79, 0x5f, 0x74, 0x65, 0x63, 0x68, 0x5f, 0x63, 0x6f,
	0x6d, 0x70, 0x61, 0x74, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x5f, 0x73,
	0x68, 0x69, 0x70, 0x22, 0x51, 0x0a, 0x0d, 0x45, 0x71, 0x75, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74,
	0x53, 0x6c, 0x6f, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x73, 0x6c, 0x6f, 0x74, 0x5f, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x73, 0x6c, 0x6f, 0x74, 0x4e, 0x61, 0x6d,
	0x65, 0x12, 0x23, 0x0a, 0x0d, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64, 0x5f, 0x65, 0x71, 0x75,
	0x69, 0x70, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0c, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x65,
	0x64, 0x45, 0x71, 0x75, 0x69, 0x70, 0x22, 0x29, 0x0a, 0x0b, 0x53, 0x68, 0x69, 0x70, 0x50, 0x61,
	0x63, 0x6b, 0x61, 0x67, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x6e, 0x69, 0x63, 0x6b, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6e, 0x69, 0x63, 0x6b, 0x6e, 0x61, 0x6d,
	0x65, 0x22, 0x2a, 0x0a, 0x09, 0x44, 0x69, 0x73, 0x63, 0x6f, 0x53, 0x68, 0x69, 0x70, 0x12, 0x1d,
	0x0a, 0x0a, 0x61, 0x72, 0x6d, 0x6f, 0x72, 0x5f, 0x6d, 0x75, 0x6c, 0x74, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x01, 0x52, 0x09, 0x61, 0x72, 0x6d, 0x6f, 0x72, 0x4d, 0x75, 0x6c, 0x74, 0x22, 0x3e, 0x0a,
	0x11, 0x47, 0x65, 0x74, 0x54, 0x68, 0x72, 0x75, 0x73, 0x74, 0x65, 0x72, 0x73, 0x52, 0x65, 0x70,
	0x6c, 0x79, 0x12, 0x29, 0x0a, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x13, 0x2e, 0x73, 0x74, 0x61, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x68,
	0x72, 0x75, 0x73, 0x74, 0x65, 0x72, 0x52, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x22, 0xb9, 0x04,
	0x0a, 0x08, 0x54, 0x68, 0x72, 0x75, 0x73, 0x74, 0x65, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x14,
	0x0a, 0x05, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x70,
	0x72, 0x69, 0x63, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x6d, 0x61, 0x78, 0x5f, 0x66, 0x6f, 0x72, 0x63,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x6d, 0x61, 0x78, 0x46, 0x6f, 0x72, 0x63,
	0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x70, 0x6f, 0x77, 0x65, 0x72, 0x5f, 0x75, 0x73, 0x61, 0x67, 0x65,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x70, 0x6f, 0x77, 0x65, 0x72, 0x55, 0x73, 0x61,
	0x67, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x65, 0x66, 0x66, 0x69, 0x63, 0x69, 0x65, 0x6e, 0x63, 0x79,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0a, 0x65, 0x66, 0x66, 0x69, 0x63, 0x69, 0x65, 0x6e,
	0x63, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x01, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x17, 0x0a, 0x07, 0x68, 0x69, 0x74, 0x5f,
	0x70, 0x74, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x68, 0x69, 0x74, 0x50, 0x74,
	0x73, 0x12, 0x1a, 0x0a, 0x08, 0x6c, 0x6f, 0x6f, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x08, 0x6c, 0x6f, 0x6f, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x1a, 0x0a,
	0x08, 0x6e, 0x69, 0x63, 0x6b, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x6e, 0x69, 0x63, 0x6b, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x17, 0x0a, 0x07, 0x6e, 0x61, 0x6d,
	0x65, 0x5f, 0x69, 0x64, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x6e, 0x61, 0x6d, 0x65,
	0x49, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x69, 0x6e, 0x66, 0x6f, 0x5f, 0x69, 0x64, 0x18, 0x0b, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x06, 0x69, 0x6e, 0x66, 0x6f, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6d,
	0x61, 0x73, 0x73, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x01, 0x52, 0x04, 0x6d, 0x61, 0x73, 0x73, 0x12,
	0x34, 0x0a, 0x05, 0x62, 0x61, 0x73, 0x65, 0x73, 0x18, 0x0d, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e,
	0x2e, 0x73, 0x74, 0x61, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x68, 0x72, 0x75, 0x73,
	0x74, 0x65, 0x72, 0x2e, 0x42, 0x61, 0x73, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x05,
	0x62, 0x61, 0x73, 0x65, 0x73, 0x12, 0x57, 0x0a, 0x15, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x76, 0x65,
	0x72, 0x79, 0x5f, 0x74, 0x65, 0x63, 0x68, 0x5f, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x74, 0x18, 0x0e,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x73, 0x74, 0x61, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x44, 0x69, 0x73, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x79, 0x54, 0x65, 0x63, 0x68, 0x43, 0x6f,
	0x6d, 0x70, 0x61, 0x74, 0x48, 0x00, 0x52, 0x13, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x76, 0x65, 0x72,
	0x79, 0x54, 0x65, 0x63, 0x68, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x74, 0x88, 0x01, 0x01, 0x1a, 0x4f,
	0x0a, 0x0a, 0x42, 0x61, 0x73, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03,
	0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x2b,
	0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e,
	0x73, 0x74, 0x61, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74,
	0x47, 0x6f, 0x6f, 0x64, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x42,
	0x18, 0x0a, 0x16, 0x5f, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x79, 0x5f, 0x74, 0x65,
	0x63, 0x68, 0x5f, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x74, 0x22, 0x3c, 0x0a, 0x10, 0x47, 0x65, 0x74,
	0x54, 0x72, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x73, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x28, 0x0a,
	0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x73,
	0x74, 0x61, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x72, 0x61, 0x63, 0x74, 0x6f, 0x72,
	0x52, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x22, 0x9e, 0x03, 0x0a, 0x07, 0x54, 0x72, 0x61, 0x63,
	0x74, 0x6f, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x70, 0x72, 0x69, 0x63, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x70, 0x72, 0x69, 0x63, 0x65, 0x12, 0x1d, 0x0a,
	0x0a, 0x6d, 0x61, 0x78, 0x5f, 0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x09, 0x6d, 0x61, 0x78, 0x4c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x12, 0x1f, 0x0a, 0x0b,
	0x72, 0x65, 0x61, 0x63, 0x68, 0x5f, 0x73, 0x70, 0x65, 0x65, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x0a, 0x72, 0x65, 0x61, 0x63, 0x68, 0x53, 0x70, 0x65, 0x65, 0x64, 0x12, 0x1a, 0x0a,
	0x08, 0x6c, 0x6f, 0x6f, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x08, 0x6c, 0x6f, 0x6f, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x6e, 0x69, 0x63,
	0x6b, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6e, 0x69, 0x63,
	0x6b, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x25, 0x0a, 0x0e, 0x73, 0x68, 0x6f, 0x72, 0x74, 0x5f, 0x6e,
	0x69, 0x63, 0x6b, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x73,
	0x68, 0x6f, 0x72, 0x74, 0x4e, 0x69, 0x63, 0x6b, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x17, 0x0a, 0x07,
	0x6e, 0x61, 0x6d, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x6e,
	0x61, 0x6d, 0x65, 0x49, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x69, 0x6e, 0x66, 0x6f, 0x5f, 0x69, 0x64,
	0x18, 0x09, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x69, 0x6e, 0x66, 0x6f, 0x49, 0x64, 0x12, 0x33,
	0x0a, 0x05, 0x62, 0x61, 0x73, 0x65, 0x73, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1d, 0x2e,
	0x73, 0x74, 0x61, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x72, 0x61, 0x63, 0x74, 0x6f,
	0x72, 0x2e, 0x42, 0x61, 0x73, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x05, 0x62, 0x61,
	0x73, 0x65, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x6d, 0x61, 0x73, 0x73, 0x18, 0x0b, 0x20, 0x01, 0x28,
	0x01, 0x52, 0x04, 0x6d, 0x61, 0x73, 0x73, 0x1a, 0x4f, 0x0a, 0x0a, 0x42, 0x61, 0x73, 0x65, 0x73,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x2b, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x73, 0x74, 0x61, 0x74, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x47, 0x6f, 0x6f, 0x64, 0x52, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xb5, 0x01, 0x0a, 0x0e, 0x47, 0x65, 0x74,
	0x48, 0x61, 0x73, 0x68, 0x65, 0x73, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x51, 0x0a, 0x0e, 0x68,
	0x61, 0x73, 0x68, 0x65, 0x73, 0x5f, 0x62, 0x79, 0x5f, 0x6e, 0x69, 0x63, 0x6b, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x73, 0x74, 0x61, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x47, 0x65, 0x74, 0x48, 0x61, 0x73, 0x68, 0x65, 0x73, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x2e, 0x48,
	0x61, 0x73, 0x68, 0x65, 0x73, 0x42, 0x79, 0x4e, 0x69, 0x63, 0x6b, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x52, 0x0c, 0x68, 0x61, 0x73, 0x68, 0x65, 0x73, 0x42, 0x79, 0x4e, 0x69, 0x63, 0x6b, 0x1a, 0x50,
	0x0a, 0x11, 0x48, 0x61, 0x73, 0x68, 0x65, 0x73, 0x42, 0x79, 0x4e, 0x69, 0x63, 0x6b, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x25, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x73, 0x74, 0x61, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x48, 0x61, 0x73, 0x68, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01,
	0x22, 0x46, 0x0a, 0x04, 0x48, 0x61, 0x73, 0x68, 0x12, 0x14, 0x0a, 0x05, 0x69, 0x6e, 0x74, 0x33,
	0x32, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x12, 0x16,
	0x0a, 0x06, 0x75, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06,
	0x75, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x12, 0x10, 0x0a, 0x03, 0x68, 0x65, 0x78, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x03, 0x68, 0x65, 0x78, 0x22, 0x34, 0x0a, 0x0c, 0x47, 0x65, 0x74, 0x50,
	0x6f, 0x42, 0x73, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x24, 0x0a, 0x05, 0x69, 0x74, 0x65, 0x6d,
	0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x73, 0x74, 0x61, 0x74, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x50, 0x6f, 0x42, 0x52, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x22, 0x87,
	0x06, 0x0a, 0x07, 0x50, 0x6f, 0x42, 0x43, 0x6f, 0x72, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x6e, 0x69,
	0x63, 0x6b, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6e, 0x69,
	0x63, 0x6b, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x15, 0x0a, 0x03, 0x70, 0x6f,
	0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x03, 0x70, 0x6f, 0x73, 0x88, 0x01,
	0x01, 0x12, 0x19, 0x0a, 0x05, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03,
	0x48, 0x01, 0x52, 0x05, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x88, 0x01, 0x01, 0x12, 0x19, 0x0a, 0x05,
	0x6d, 0x6f, 0x6e, 0x65, 0x79, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x48, 0x02, 0x52, 0x05, 0x6d,
	0x6f, 0x6e, 0x65, 0x79, 0x88, 0x01, 0x01, 0x12, 0x1b, 0x0a, 0x06, 0x68, 0x65, 0x61, 0x6c, 0x74,
	0x68, 0x18, 0x06, 0x20, 0x01, 0x28, 0x01, 0x48, 0x03, 0x52, 0x06, 0x68, 0x65, 0x61, 0x6c, 0x74,
	0x68, 0x88, 0x01, 0x01, 0x12, 0x26, 0x0a, 0x0c, 0x64, 0x65, 0x66, 0x65, 0x6e, 0x73, 0x65, 0x5f,
	0x6d, 0x6f, 0x64, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x03, 0x48, 0x04, 0x52, 0x0b, 0x64, 0x65,
	0x66, 0x65, 0x6e, 0x73, 0x65, 0x4d, 0x6f, 0x64, 0x65, 0x88, 0x01, 0x01, 0x12, 0x24, 0x0a, 0x0b,
	0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x5f, 0x6e, 0x69, 0x63, 0x6b, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x09, 0x48, 0x05, 0x52, 0x0a, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x4e, 0x69, 0x63, 0x6b, 0x88,
	0x01, 0x01, 0x12, 0x24, 0x0a, 0x0b, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x5f, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x48, 0x06, 0x52, 0x0a, 0x73, 0x79, 0x73, 0x74, 0x65,
	0x6d, 0x4e, 0x61, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x26, 0x0a, 0x0c, 0x66, 0x61, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x5f, 0x6e, 0x69, 0x63, 0x6b, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x48, 0x07,
	0x52, 0x0b, 0x66, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4e, 0x69, 0x63, 0x6b, 0x88, 0x01, 0x01,
	0x12, 0x26, 0x0a, 0x0c, 0x66, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x48, 0x08, 0x52, 0x0b, 0x66, 0x61, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x2d, 0x0a, 0x10, 0x66, 0x6f, 0x72, 0x75,
	0x6d, 0x5f, 0x74, 0x68, 0x72, 0x65, 0x61, 0x64, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x0c, 0x20, 0x01,
	0x28, 0x09, 0x48, 0x09, 0x52, 0x0e, 0x66, 0x6f, 0x72, 0x75, 0x6d, 0x54, 0x68, 0x72, 0x65, 0x61,
	0x64, 0x55, 0x72, 0x6c, 0x88, 0x01, 0x01, 0x12, 0x2d, 0x0a, 0x10, 0x63, 0x61, 0x72, 0x67, 0x6f,
	0x5f, 0x73, 0x70, 0x61, 0x63, 0x65, 0x5f, 0x6c, 0x65, 0x66, 0x74, 0x18, 0x0d, 0x20, 0x01, 0x28,
	0x03, 0x48, 0x0a, 0x52, 0x0e, 0x63, 0x61, 0x72, 0x67, 0x6f, 0x53, 0x70, 0x61, 0x63, 0x65, 0x4c,
	0x65, 0x66, 0x74, 0x88, 0x01, 0x01, 0x12, 0x2e, 0x0a, 0x08, 0x62, 0x61, 0x73, 0x65, 0x5f, 0x70,
	0x6f, 0x73, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x73, 0x74, 0x61, 0x74, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x50, 0x6f, 0x73, 0x48, 0x0b, 0x52, 0x07, 0x62, 0x61, 0x73, 0x65,
	0x50, 0x6f, 0x73, 0x88, 0x01, 0x01, 0x12, 0x26, 0x0a, 0x0c, 0x73, 0x65, 0x63, 0x74, 0x6f, 0x72,
	0x5f, 0x63, 0x6f, 0x6f, 0x72, 0x64, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x48, 0x0c, 0x52, 0x0b,
	0x73, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x43, 0x6f, 0x6f, 0x72, 0x64, 0x88, 0x01, 0x01, 0x12, 0x1b,
	0x0a, 0x06, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x18, 0x10, 0x20, 0x01, 0x28, 0x09, 0x48, 0x0d,
	0x52, 0x06, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x88, 0x01, 0x01, 0x42, 0x06, 0x0a, 0x04, 0x5f,
	0x70, 0x6f, 0x73, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x42, 0x08, 0x0a,
	0x06, 0x5f, 0x6d, 0x6f, 0x6e, 0x65, 0x79, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x68, 0x65, 0x61, 0x6c,
	0x74, 0x68, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x64, 0x65, 0x66, 0x65, 0x6e, 0x73, 0x65, 0x5f, 0x6d,
	0x6f, 0x64, 0x65, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x5f, 0x6e,
	0x69, 0x63, 0x6b, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x5f, 0x6e,
	0x61, 0x6d, 0x65, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x66, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f,
	0x6e, 0x69, 0x63, 0x6b, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x66, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x42, 0x13, 0x0a, 0x11, 0x5f, 0x66, 0x6f, 0x72, 0x75, 0x6d, 0x5f,
	0x74, 0x68, 0x72, 0x65, 0x61, 0x64, 0x5f, 0x75, 0x72, 0x6c, 0x42, 0x13, 0x0a, 0x11, 0x5f, 0x63,
	0x61, 0x72, 0x67, 0x6f, 0x5f, 0x73, 0x70, 0x61, 0x63, 0x65, 0x5f, 0x6c, 0x65, 0x66, 0x74, 0x42,
	0x0b, 0x0a, 0x09, 0x5f, 0x62, 0x61, 0x73, 0x65, 0x5f, 0x70, 0x6f, 0x73, 0x42, 0x0f, 0x0a, 0x0d,
	0x5f, 0x73, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x6f, 0x6f, 0x72, 0x64, 0x42, 0x09, 0x0a,
	0x07, 0x5f, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x22, 0x61, 0x0a, 0x03, 0x50, 0x6f, 0x42, 0x12,
	0x26, 0x0a, 0x04, 0x63, 0x6f, 0x72, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e,
	0x73, 0x74, 0x61, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x50, 0x6f, 0x42, 0x43, 0x6f, 0x72,
	0x65, 0x52, 0x04, 0x63, 0x6f, 0x72, 0x65, 0x12, 0x32, 0x0a, 0x0a, 0x73, 0x68, 0x6f, 0x70, 0x5f,
	0x69, 0x74, 0x65, 0x6d, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x73, 0x74,
	0x61, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x68, 0x6f, 0x70, 0x49, 0x74, 0x65, 0x6d,
	0x52, 0x09, 0x73, 0x68, 0x6f, 0x70, 0x49, 0x74, 0x65, 0x6d, 0x73, 0x22, 0xf1, 0x01, 0x0a, 0x08,
	0x53, 0x68, 0x6f, 0x70, 0x49, 0x74, 0x65, 0x6d, 0x12, 0x1a, 0x0a, 0x08, 0x6e, 0x69, 0x63, 0x6b,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6e, 0x69, 0x63, 0x6b,
	0x6e, 0x61, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x61, 0x74, 0x65,
	0x67, 0x6f, 0x72, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x63, 0x61, 0x74, 0x65,
	0x67, 0x6f, 0x72, 0x79, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x02, 0x69, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x71, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x71, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79,
	0x12, 0x14, 0x0a, 0x05, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x05, 0x70, 0x72, 0x69, 0x63, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x65, 0x6c, 0x6c, 0x5f, 0x70,
	0x72, 0x69, 0x63, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x73, 0x65, 0x6c, 0x6c,
	0x50, 0x72, 0x69, 0x63, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x6d, 0x69, 0x6e, 0x5f, 0x73, 0x74, 0x6f,
	0x63, 0x6b, 0x18, 0x08, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x6d, 0x69, 0x6e, 0x53, 0x74, 0x6f,
	0x63, 0x6b, 0x12, 0x1b, 0x0a, 0x09, 0x6d, 0x61, 0x78, 0x5f, 0x73, 0x74, 0x6f, 0x63, 0x6b, 0x18,
	0x09, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x6d, 0x61, 0x78, 0x53, 0x74, 0x6f, 0x63, 0x6b, 0x22,
	0x3c, 0x0a, 0x10, 0x47, 0x65, 0x74, 0x50, 0x6f, 0x42, 0x47, 0x6f, 0x6f, 0x64, 0x73, 0x52, 0x65,
	0x70, 0x6c, 0x79, 0x12, 0x28, 0x0a, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x12, 0x2e, 0x73, 0x74, 0x61, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x50,
	0x6f, 0x42, 0x47, 0x6f, 0x6f, 0x64, 0x52, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x22, 0xcc, 0x03,
	0x0a, 0x07, 0x50, 0x6f, 0x42, 0x47, 0x6f, 0x6f, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x6e, 0x69, 0x63,
	0x6b, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6e, 0x69, 0x63,
	0x6b, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x37, 0x0a, 0x18, 0x74, 0x6f, 0x74,
	0x61, 0x6c, 0x5f, 0x62, 0x75, 0x79, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x66, 0x72, 0x6f, 0x6d, 0x5f,
	0x62, 0x61, 0x73, 0x65, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x15, 0x74, 0x6f, 0x74,
	0x61, 0x6c, 0x42, 0x75, 0x79, 0x61, 0x62, 0x6c, 0x65, 0x46, 0x72, 0x6f, 0x6d, 0x42, 0x61, 0x73,
	0x65, 0x73, 0x12, 0x35, 0x0a, 0x17, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x73, 0x65, 0x6c, 0x6c,
	0x61, 0x62, 0x6c, 0x65, 0x5f, 0x74, 0x6f, 0x5f, 0x62, 0x61, 0x73, 0x65, 0x73, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x14, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x53, 0x65, 0x6c, 0x6c, 0x61, 0x62,
	0x6c, 0x65, 0x54, 0x6f, 0x42, 0x61, 0x73, 0x65, 0x73, 0x12, 0x2e, 0x0a, 0x11, 0x62, 0x65, 0x73,
	0x74, 0x5f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x5f, 0x74, 0x6f, 0x5f, 0x62, 0x75, 0x79, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x03, 0x48, 0x00, 0x52, 0x0e, 0x62, 0x65, 0x73, 0x74, 0x50, 0x72, 0x69, 0x63,
	0x65, 0x54, 0x6f, 0x42, 0x75, 0x79, 0x88, 0x01, 0x01, 0x12, 0x30, 0x0a, 0x12, 0x62, 0x65, 0x73,
	0x74, 0x5f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x5f, 0x74, 0x6f, 0x5f, 0x73, 0x65, 0x6c, 0x6c, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x03, 0x48, 0x01, 0x52, 0x0f, 0x62, 0x65, 0x73, 0x74, 0x50, 0x72, 0x69,
	0x63, 0x65, 0x54, 0x6f, 0x53, 0x65, 0x6c, 0x6c, 0x88, 0x01, 0x01, 0x12, 0x1a, 0x0a, 0x08, 0x63,
	0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x63,
	0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x12, 0x24, 0x0a, 0x0e, 0x61, 0x6e, 0x79, 0x5f, 0x62,
	0x61, 0x73, 0x65, 0x5f, 0x73, 0x65, 0x6c, 0x6c, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x0c, 0x61, 0x6e, 0x79, 0x42, 0x61, 0x73, 0x65, 0x53, 0x65, 0x6c, 0x6c, 0x73, 0x12, 0x22, 0x0a,
	0x0d, 0x61, 0x6e, 0x79, 0x5f, 0x62, 0x61, 0x73, 0x65, 0x5f, 0x62, 0x75, 0x79, 0x73, 0x18, 0x09,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x61, 0x6e, 0x79, 0x42, 0x61, 0x73, 0x65, 0x42, 0x75, 0x79,
	0x73, 0x12, 0x2c, 0x0a, 0x05, 0x62, 0x61, 0x73, 0x65, 0x73, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x16, 0x2e, 0x73, 0x74, 0x61, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x50, 0x6f, 0x42,
	0x47, 0x6f, 0x6f, 0x64, 0x42, 0x61, 0x73, 0x65, 0x52, 0x05, 0x62, 0x61, 0x73, 0x65, 0x73, 0x42,
	0x14, 0x0a, 0x12, 0x5f, 0x62, 0x65, 0x73, 0x74, 0x5f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x5f, 0x74,
	0x6f, 0x5f, 0x62, 0x75, 0x79, 0x42, 0x15, 0x0a, 0x13, 0x5f, 0x62, 0x65, 0x73, 0x74, 0x5f, 0x70,
	0x72, 0x69, 0x63, 0x65, 0x5f, 0x74, 0x6f, 0x5f, 0x73, 0x65, 0x6c, 0x6c, 0x22, 0x67, 0x0a, 0x0b,
	0x50, 0x6f, 0x42, 0x47, 0x6f, 0x6f, 0x64, 0x42, 0x61, 0x73, 0x65, 0x12, 0x30, 0x0a, 0x09, 0x73,
	0x68, 0x6f, 0x70, 0x5f, 0x69, 0x74, 0x65, 0x6d, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13,
	0x2e, 0x73, 0x74, 0x61, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x68, 0x6f, 0x70, 0x49,
	0x74, 0x65, 0x6d, 0x52, 0x08, 0x73, 0x68, 0x6f, 0x70, 0x49, 0x74, 0x65, 0x6d, 0x12, 0x26, 0x0a,
	0x04, 0x62, 0x61, 0x73, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x73, 0x74,
	0x61, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x50, 0x6f, 0x42, 0x43, 0x6f, 0x72, 0x65, 0x52,
	0x04, 0x62, 0x61, 0x73, 0x65, 0x22, 0x49, 0x0a, 0x12, 0x47, 0x65, 0x74, 0x47, 0x72, 0x61, 0x70,
	0x68, 0x50, 0x61, 0x74, 0x68, 0x73, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x12, 0x33, 0x0a, 0x07, 0x71,
	0x75, 0x65, 0x72, 0x69, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x73,
	0x74, 0x61, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x47, 0x72, 0x61, 0x70, 0x68, 0x50, 0x61,
	0x74, 0x68, 0x51, 0x75, 0x65, 0x72, 0x79, 0x52, 0x07, 0x71, 0x75, 0x65, 0x72, 0x69, 0x65, 0x73,
	0x22, 0x34, 0x0a, 0x0e, 0x47, 0x72, 0x61, 0x70, 0x68, 0x50, 0x61, 0x74, 0x68, 0x51, 0x75, 0x65,
	0x72, 0x79, 0x12, 0x12, 0x0a, 0x04, 0x66, 0x72, 0x6f, 0x6d, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x66, 0x72, 0x6f, 0x6d, 0x12, 0x0e, 0x0a, 0x02, 0x74, 0x6f, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x02, 0x74, 0x6f, 0x22, 0x4e, 0x0a, 0x12, 0x47, 0x65, 0x74, 0x47, 0x72, 0x61,
	0x70, 0x68, 0x50, 0x61, 0x74, 0x68, 0x73, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x38, 0x0a, 0x07,
	0x61, 0x6e, 0x73, 0x77, 0x65, 0x72, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e,
	0x73, 0x74, 0x61, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x47, 0x65, 0x74, 0x47, 0x72, 0x61,
	0x70, 0x68, 0x50, 0x61, 0x74, 0x68, 0x73, 0x41, 0x6e, 0x73, 0x77, 0x65, 0x72, 0x52, 0x07, 0x61,
	0x6e, 0x73, 0x77, 0x65, 0x72, 0x73, 0x22, 0xa7, 0x01, 0x0a, 0x13, 0x47, 0x65, 0x74, 0x47, 0x72,
	0x61, 0x70, 0x68, 0x50, 0x61, 0x74, 0x68, 0x73, 0x41, 0x6e, 0x73, 0x77, 0x65, 0x72, 0x12, 0x2f,
	0x0a, 0x05, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e,
	0x73, 0x74, 0x61, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x47, 0x72, 0x61, 0x70, 0x68, 0x50,
	0x61, 0x74, 0x68, 0x51, 0x75, 0x65, 0x72, 0x79, 0x52, 0x05, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x12,
	0x31, 0x0a, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e,
	0x73, 0x74, 0x61, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x47, 0x72, 0x61, 0x70, 0x68, 0x50,
	0x61, 0x74, 0x68, 0x54, 0x69, 0x6d, 0x65, 0x48, 0x00, 0x52, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x88,
	0x01, 0x01, 0x12, 0x19, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x48, 0x01, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x88, 0x01, 0x01, 0x42, 0x07, 0x0a,
	0x05, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x65, 0x72, 0x72, 0x6f, 0x72,
	0x22, 0x9c, 0x01, 0x0a, 0x0d, 0x47, 0x72, 0x61, 0x70, 0x68, 0x50, 0x61, 0x74, 0x68, 0x54, 0x69,
	0x6d, 0x65, 0x12, 0x21, 0x0a, 0x09, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x70, 0x6f, 0x72, 0x74, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x03, 0x48, 0x00, 0x52, 0x09, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x70, 0x6f,
	0x72, 0x74, 0x88, 0x01, 0x01, 0x12, 0x1d, 0x0a, 0x07, 0x66, 0x72, 0x69, 0x67, 0x61, 0x74, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x48, 0x01, 0x52, 0x07, 0x66, 0x72, 0x69, 0x67, 0x61, 0x74,
	0x65, 0x88, 0x01, 0x01, 0x12, 0x21, 0x0a, 0x09, 0x66, 0x72, 0x65, 0x69, 0x67, 0x68, 0x74, 0x65,
	0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x48, 0x02, 0x52, 0x09, 0x66, 0x72, 0x65, 0x69, 0x67,
	0x68, 0x74, 0x65, 0x72, 0x88, 0x01, 0x01, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x74, 0x72, 0x61, 0x6e,
	0x73, 0x70, 0x6f, 0x72, 0x74, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x66, 0x72, 0x69, 0x67, 0x61, 0x74,
	0x65, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x66, 0x72, 0x65, 0x69, 0x67, 0x68, 0x74, 0x65, 0x72, 0x32,
	0xa6, 0x0c, 0x0a, 0x08, 0x44, 0x61, 0x72, 0x6b, 0x73, 0x74, 0x61, 0x74, 0x12, 0x35, 0x0a, 0x09,
	0x47, 0x65, 0x74, 0x48, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x12, 0x10, 0x2e, 0x73, 0x74, 0x61, 0x74,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a, 0x16, 0x2e, 0x73, 0x74,
	0x61, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x48, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x52, 0x65,
	0x70, 0x6c, 0x79, 0x12, 0x41, 0x0a, 0x0b, 0x47, 0x65, 0x74, 0x42, 0x61, 0x73, 0x65, 0x73, 0x4e,
	0x70, 0x63, 0x12, 0x18, 0x2e, 0x73, 0x74, 0x61, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x47,
	0x65, 0x74, 0x42, 0x61, 0x73, 0x65, 0x73, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x1a, 0x18, 0x2e, 0x73,
	0x74, 0x61, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x47, 0x65, 0x74, 0x42, 0x61, 0x73, 0x65,
	0x73, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x4e, 0x0a, 0x18, 0x47, 0x65, 0x74, 0x42, 0x61, 0x73,
	0x65, 0x73, 0x4d, 0x69, 0x6e, 0x69, 0x6e, 0x67, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x12, 0x18, 0x2e, 0x73, 0x74, 0x61, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x47,
	0x65, 0x74, 0x42, 0x61, 0x73, 0x65, 0x73, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x1a, 0x18, 0x2e, 0x73,
	0x74, 0x61, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x47, 0x65, 0x74, 0x42, 0x61, 0x73, 0x65,
	0x73, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x42, 0x0a, 0x0c, 0x47, 0x65, 0x74, 0x42, 0x61, 0x73,
	0x65, 0x73, 0x50, 0x6f, 0x42, 0x73, 0x12, 0x18, 0x2e, 0x73, 0x74, 0x61, 0x74, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x47, 0x65, 0x74, 0x42, 0x61, 0x73, 0x65, 0x73, 0x49, 0x6e, 0x70, 0x75, 0x74,
	0x1a, 0x18, 0x2e, 0x73, 0x74, 0x61, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x47, 0x65, 0x74,
	0x42, 0x61, 0x73, 0x65, 0x73, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x34, 0x0a, 0x07, 0x47, 0x65,
	0x74, 0x50, 0x6f, 0x42, 0x73, 0x12, 0x10, 0x2e, 0x73, 0x74, 0x61, 0x74, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a, 0x17, 0x2e, 0x73, 0x74, 0x61, 0x74, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x47, 0x65, 0x74, 0x50, 0x6f, 0x42, 0x73, 0x52, 0x65, 0x70, 0x6c, 0x79,
	0x12, 0x3c, 0x0a, 0x0b, 0x47, 0x65, 0x74, 0x50, 0x6f, 0x42, 0x47, 0x6f, 0x6f, 0x64, 0x73, 0x12,
	0x10, 0x2e, 0x73, 0x74, 0x61, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x6d, 0x70, 0x74,
	0x79, 0x1a, 0x1b, 0x2e, 0x73, 0x74, 0x61, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x47, 0x65,
	0x74, 0x50, 0x6f, 0x42, 0x47, 0x6f, 0x6f, 0x64, 0x73, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x52,
	0x0a, 0x0e, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x64, 0x69, 0x74, 0x69, 0x65, 0x73,
	0x12, 0x1e, 0x2e, 0x73, 0x74, 0x61, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x47, 0x65, 0x74,
	0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x64, 0x69, 0x74, 0x69, 0x65, 0x73, 0x49, 0x6e, 0x70, 0x75, 0x74,
	0x1a, 0x1e, 0x2e, 0x73, 0x74, 0x61, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x47, 0x65, 0x74,
	0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x64, 0x69, 0x74, 0x69, 0x65, 0x73, 0x52, 0x65, 0x70, 0x6c, 0x79,
	0x22, 0x00, 0x12, 0x3d, 0x0a, 0x07, 0x47, 0x65, 0x74, 0x47, 0x75, 0x6e, 0x73, 0x12, 0x17, 0x2e,
	0x73, 0x74, 0x61, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x47, 0x65, 0x74, 0x47, 0x75, 0x6e,
	0x73, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x1a, 0x17, 0x2e, 0x73, 0x74, 0x61, 0x74, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x47, 0x65, 0x74, 0x47, 0x75, 0x6e, 0x73, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22,
	0x00, 0x12, 0x41, 0x0a, 0x0b, 0x47, 0x65, 0x74, 0x4d, 0x69, 0x73, 0x73, 0x69, 0x6c, 0x65, 0x73,
	0x12, 0x17, 0x2e, 0x73, 0x74, 0x61, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x47, 0x65, 0x74,
	0x47, 0x75, 0x6e, 0x73, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x1a, 0x17, 0x2e, 0x73, 0x74, 0x61, 0x74,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x47, 0x65, 0x74, 0x47, 0x75, 0x6e, 0x73, 0x52, 0x65, 0x70,
	0x6c, 0x79, 0x22, 0x00, 0x12, 0x43, 0x0a, 0x08, 0x47, 0x65, 0x74, 0x41, 0x6d, 0x6d, 0x6f, 0x73,
	0x12, 0x1c, 0x2e, 0x73, 0x74, 0x61, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x47, 0x65, 0x74,
	0x45, 0x71, 0x75, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x1a, 0x17,
	0x2e, 0x73, 0x74, 0x61, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x47, 0x65, 0x74, 0x41, 0x6d,
	0x6d, 0x6f, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x00, 0x12, 0x58, 0x0a, 0x12, 0x47, 0x65, 0x74,
	0x43, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x4d, 0x65, 0x61, 0x73, 0x75, 0x72, 0x65, 0x73, 0x12,
	0x1c, 0x2e, 0x73, 0x74, 0x61, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x47, 0x65, 0x74, 0x45,
	0x71, 0x75, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x1a, 0x22, 0x2e,
	0x73, 0x74, 0x61, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x75,
	0x6e, 0x74, 0x65, 0x72, 0x4d, 0x65, 0x61, 0x73, 0x75, 0x72, 0x65, 0x73, 0x52, 0x65, 0x70, 0x6c,
	0x79, 0x22, 0x00, 0x12, 0x48, 0x0a, 0x0a, 0x47, 0x65, 0x74, 0x45, 0x6e, 0x67, 0x69, 0x6e, 0x65,
	0x73, 0x12, 0x1c, 0x2e, 0x73, 0x74, 0x61, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x47, 0x65,
	0x74, 0x45, 0x71, 0x75, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x1a,
	0x1a, 0x2e, 0x73, 0x74, 0x61, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x47, 0x65, 0x74, 0x45,
	0x6e, 0x67, 0x69, 0x6e, 0x65, 0x73, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x00, 0x12, 0x44, 0x0a,
	0x08, 0x47, 0x65, 0x74, 0x4d, 0x69, 0x6e, 0x65, 0x73, 0x12, 0x1c, 0x2e, 0x73, 0x74, 0x61, 0x74,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x47, 0x65, 0x74, 0x45, 0x71, 0x75, 0x69, 0x70, 0x6d, 0x65,
	0x6e, 0x74, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x1a, 0x18, 0x2e, 0x73, 0x74, 0x61, 0x74, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x47, 0x65, 0x74, 0x4d, 0x69, 0x6e, 0x65, 0x73, 0x52, 0x65, 0x70, 0x6c,
	0x79, 0x22, 0x00, 0x12, 0x4a, 0x0a, 0x0b, 0x47, 0x65, 0x74, 0x53, 0x63, 0x61, 0x6e, 0x6e, 0x65,
	0x72, 0x73, 0x12, 0x1c, 0x2e, 0x73, 0x74, 0x61, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x47,
	0x65, 0x74, 0x45, 0x71, 0x75, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x6e, 0x70, 0x75, 0x74,
	0x1a, 0x1b, 0x2e, 0x73, 0x74, 0x61, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x47, 0x65, 0x74,
	0x53, 0x63, 0x61, 0x6e, 0x6e, 0x65, 0x72, 0x73, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x00, 0x12,
	0x48, 0x0a, 0x0a, 0x47, 0x65, 0x74, 0x53, 0x68, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x12, 0x1c, 0x2e,
	0x73, 0x74, 0x61, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x47, 0x65, 0x74, 0x45, 0x71, 0x75,
	0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x1a, 0x1a, 0x2e, 0x73, 0x74,
	0x61, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x47, 0x65, 0x74, 0x53, 0x68, 0x69, 0x65, 0x6c,
	0x64, 0x73, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x00, 0x12, 0x44, 0x0a, 0x08, 0x47, 0x65, 0x74,
	0x53, 0x68, 0x69, 0x70, 0x73, 0x12, 0x1c, 0x2e, 0x73, 0x74, 0x61, 0x74, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x47, 0x65, 0x74, 0x45, 0x71, 0x75, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x6e,
	0x70, 0x75, 0x74, 0x1a, 0x18, 0x2e, 0x73, 0x74, 0x61, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x47, 0x65, 0x74, 0x53, 0x68, 0x69, 0x70, 0x73, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x00, 0x12,
	0x4c, 0x0a, 0x0c, 0x47, 0x65, 0x74, 0x54, 0x68, 0x72, 0x75, 0x73, 0x74, 0x65, 0x72, 0x73, 0x12,
	0x1c, 0x2e, 0x73, 0x74, 0x61, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x47, 0x65, 0x74, 0x45,
	0x71, 0x75, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x1a, 0x1c, 0x2e,
	0x73, 0x74, 0x61, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x47, 0x65, 0x74, 0x54, 0x68, 0x72,
	0x75, 0x73, 0x74, 0x65, 0x72, 0x73, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x00, 0x12, 0x49, 0x0a,
	0x0b, 0x47, 0x65, 0x74, 0x46, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x1b, 0x2e, 0x73,
	0x74, 0x61, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x47, 0x65, 0x74, 0x46, 0x61, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x1a, 0x1b, 0x2e, 0x73, 0x74, 0x61, 0x74,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x47, 0x65, 0x74, 0x46, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x00, 0x12, 0x49, 0x0a, 0x0b, 0x47, 0x65, 0x74, 0x54,
	0x72, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x73, 0x12, 0x1b, 0x2e, 0x73, 0x74, 0x61, 0x74, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x47, 0x65, 0x74, 0x54, 0x72, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x73, 0x49,
	0x6e, 0x70, 0x75, 0x74, 0x1a, 0x1b, 0x2e, 0x73, 0x74, 0x61, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x47, 0x65, 0x74, 0x54, 0x72, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x73, 0x52, 0x65, 0x70, 0x6c,
	0x79, 0x22, 0x00, 0x12, 0x38, 0x0a, 0x09, 0x47, 0x65, 0x74, 0x48, 0x61, 0x73, 0x68, 0x65, 0x73,
	0x12, 0x10, 0x2e, 0x73, 0x74, 0x61, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x6d, 0x70,
	0x74, 0x79, 0x1a, 0x19, 0x2e, 0x73, 0x74, 0x61, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x47,
	0x65, 0x74, 0x48, 0x61, 0x73, 0x68, 0x65, 0x73, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x4a, 0x0a,
	0x0c, 0x47, 0x65, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x63, 0x61, 0x72, 0x64, 0x73, 0x12, 0x1c, 0x2e,
	0x73, 0x74, 0x61, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x47, 0x65, 0x74, 0x49, 0x6e, 0x66,
	0x6f, 0x63, 0x61, 0x72, 0x64, 0x73, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x1a, 0x1c, 0x2e, 0x73, 0x74,
	0x61, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x47, 0x65, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x63,
	0x61, 0x72, 0x64, 0x73, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x4d, 0x0a, 0x0d, 0x47, 0x65, 0x74,
	0x47, 0x72, 0x61, 0x70, 0x68, 0x50, 0x61, 0x74, 0x68, 0x73, 0x12, 0x1d, 0x2e, 0x73, 0x74, 0x61,
	0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x47, 0x65, 0x74, 0x47, 0x72, 0x61, 0x70, 0x68, 0x50,
	0x61, 0x74, 0x68, 0x73, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x1a, 0x1d, 0x2e, 0x73, 0x74, 0x61, 0x74,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x47, 0x65, 0x74, 0x47, 0x72, 0x61, 0x70, 0x68, 0x50, 0x61,
	0x74, 0x68, 0x73, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x42, 0x3d, 0x5a, 0x3b, 0x67, 0x69, 0x74, 0x68,
	0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x64, 0x61, 0x72, 0x6b, 0x6c, 0x61, 0x62, 0x38, 0x2f,
	0x66, 0x6c, 0x2d, 0x64, 0x61, 0x72, 0x6b, 0x73, 0x74, 0x61, 0x74, 0x2f, 0x64, 0x61, 0x72, 0x6b,
	0x61, 0x70, 0x69, 0x73, 0x2f, 0x64, 0x61, 0x72, 0x6b, 0x67, 0x72, 0x70, 0x63, 0x2f, 0x73, 0x74,
	0x61, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
})

var (
	file_darkstat_proto_rawDescOnce sync.Once
	file_darkstat_proto_rawDescData []byte
)

func file_darkstat_proto_rawDescGZIP() []byte {
	file_darkstat_proto_rawDescOnce.Do(func() {
		file_darkstat_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_darkstat_proto_rawDesc), len(file_darkstat_proto_rawDesc)))
	})
	return file_darkstat_proto_rawDescData
}

var file_darkstat_proto_msgTypes = make([]protoimpl.MessageInfo, 86)
var file_darkstat_proto_goTypes = []any{
	(*Empty)(nil),                   // 0: statproto.Empty
	(*GetInfocardsInput)(nil),       // 1: statproto.GetInfocardsInput
	(*GetInfocardsReply)(nil),       // 2: statproto.GetInfocardsReply
	(*GetInfocardAnswer)(nil),       // 3: statproto.GetInfocardAnswer
	(*Infocard)(nil),                // 4: statproto.Infocard
	(*InfocardLine)(nil),            // 5: statproto.InfocardLine
	(*InfocardPhrase)(nil),          // 6: statproto.InfocardPhrase
	(*HealthReply)(nil),             // 7: statproto.HealthReply
	(*GetEquipmentInput)(nil),       // 8: statproto.GetEquipmentInput
	(*GetGunsInput)(nil),            // 9: statproto.GetGunsInput
	(*GetBasesInput)(nil),           // 10: statproto.GetBasesInput
	(*GetTractorsInput)(nil),        // 11: statproto.GetTractorsInput
	(*GetBasesReply)(nil),           // 12: statproto.GetBasesReply
	(*Base)(nil),                    // 13: statproto.Base
	(*MiningInfo)(nil),              // 14: statproto.MiningInfo
	(*MarketGood)(nil),              // 15: statproto.MarketGood
	(*BaseInfo)(nil),                // 16: statproto.BaseInfo
	(*Pos)(nil),                     // 17: statproto.Pos
	(*GetCommoditiesInput)(nil),     // 18: statproto.GetCommoditiesInput
	(*GetCommoditiesReply)(nil),     // 19: statproto.GetCommoditiesReply
	(*Commodity)(nil),               // 20: statproto.Commodity
	(*GetAmmoReply)(nil),            // 21: statproto.GetAmmoReply
	(*Ammo)(nil),                    // 22: statproto.Ammo
	(*DiscoveryTechCompat)(nil),     // 23: statproto.DiscoveryTechCompat
	(*TechCompatAnswer)(nil),        // 24: statproto.TechCompatAnswer
	(*GetTechCompatInput)(nil),      // 25: statproto.GetTechCompatInput
	(*GetTechCompatReply)(nil),      // 26: statproto.GetTechCompatReply
	(*GetCounterMeasuresReply)(nil), // 27: statproto.GetCounterMeasuresReply
	(*CounterMeasure)(nil),          // 28: statproto.CounterMeasure
	(*GetEnginesReply)(nil),         // 29: statproto.GetEnginesReply
	(*Engine)(nil),                  // 30: statproto.Engine
	(*GetFactionsInput)(nil),        // 31: statproto.GetFactionsInput
	(*GetFactionsReply)(nil),        // 32: statproto.GetFactionsReply
	(*Faction)(nil),                 // 33: statproto.Faction
	(*Reputation)(nil),              // 34: statproto.Reputation
	(*Bribe)(nil),                   // 35: statproto.Bribe
	(*GetGunsReply)(nil),            // 36: statproto.GetGunsReply
	(*Gun)(nil),                     // 37: statproto.Gun
	(*DamageBonus)(nil),             // 38: statproto.DamageBonus
	(*Missile)(nil),                 // 39: statproto.Missile
	(*GunDetailed)(nil),             // 40: statproto.GunDetailed
	(*BurstFire)(nil),               // 41: statproto.BurstFire
	(*DiscoGun)(nil),                // 42: statproto.DiscoGun
	(*GetMinesReply)(nil),           // 43: statproto.GetMinesReply
	(*Mine)(nil),                    // 44: statproto.Mine
	(*AmmoLimit)(nil),               // 45: statproto.AmmoLimit
	(*GetScannersReply)(nil),        // 46: statproto.GetScannersReply
	(*Scanner)(nil),                 // 47: statproto.Scanner
	(*GetShieldsReply)(nil),         // 48: statproto.GetShieldsReply
	(*Shield)(nil),                  // 49: statproto.Shield
	(*GetShipsReply)(nil),           // 50: statproto.GetShipsReply
	(*Ship)(nil),                    // 51: statproto.Ship
	(*EquipmentSlot)(nil),           // 52: statproto.EquipmentSlot
	(*ShipPackage)(nil),             // 53: statproto.ShipPackage
	(*DiscoShip)(nil),               // 54: statproto.DiscoShip
	(*GetThrustersReply)(nil),       // 55: statproto.GetThrustersReply
	(*Thruster)(nil),                // 56: statproto.Thruster
	(*GetTractorsReply)(nil),        // 57: statproto.GetTractorsReply
	(*Tractor)(nil),                 // 58: statproto.Tractor
	(*GetHashesReply)(nil),          // 59: statproto.GetHashesReply
	(*Hash)(nil),                    // 60: statproto.Hash
	(*GetPoBsReply)(nil),            // 61: statproto.GetPoBsReply
	(*PoBCore)(nil),                 // 62: statproto.PoBCore
	(*PoB)(nil),                     // 63: statproto.PoB
	(*ShopItem)(nil),                // 64: statproto.ShopItem
	(*GetPoBGoodsReply)(nil),        // 65: statproto.GetPoBGoodsReply
	(*PoBGood)(nil),                 // 66: statproto.PoBGood
	(*PoBGoodBase)(nil),             // 67: statproto.PoBGoodBase
	(*GetGraphPathsInput)(nil),      // 68: statproto.GetGraphPathsInput
	(*GraphPathQuery)(nil),          // 69: statproto.GraphPathQuery
	(*GetGraphPathsReply)(nil),      // 70: statproto.GetGraphPathsReply
	(*GetGraphPathsAnswer)(nil),     // 71: statproto.GetGraphPathsAnswer
	(*GraphPathTime)(nil),           // 72: statproto.GraphPathTime
	nil,                             // 73: statproto.Commodity.BasesEntry
	nil,                             // 74: statproto.Ammo.BasesEntry
	nil,                             // 75: statproto.DiscoveryTechCompat.TechcompatByIdEntry
	nil,                             // 76: statproto.CounterMeasure.BasesEntry
	nil,                             // 77: statproto.Engine.BasesEntry
	nil,                             // 78: statproto.Gun.BasesEntry
	nil,                             // 79: statproto.Mine.BasesEntry
	nil,                             // 80: statproto.Scanner.BasesEntry
	nil,                             // 81: statproto.Shield.BasesEntry
	nil,                             // 82: statproto.Ship.BasesEntry
	nil,                             // 83: statproto.Thruster.BasesEntry
	nil,                             // 84: statproto.Tractor.BasesEntry
	nil,                             // 85: statproto.GetHashesReply.HashesByNickEntry
}
var file_darkstat_proto_depIdxs = []int32{
	3,   // 0: statproto.GetInfocardsReply.answers:type_name -> statproto.GetInfocardAnswer
	4,   // 1: statproto.GetInfocardAnswer.infocard:type_name -> statproto.Infocard
	5,   // 2: statproto.Infocard.lines:type_name -> statproto.InfocardLine
	6,   // 3: statproto.InfocardLine.phrases:type_name -> statproto.InfocardPhrase
	13,  // 4: statproto.GetBasesReply.items:type_name -> statproto.Base
	17,  // 5: statproto.Base.pos:type_name -> statproto.Pos
	15,  // 6: statproto.Base.market_goods:type_name -> statproto.MarketGood
	15,  // 7: statproto.MiningInfo.mined_good:type_name -> statproto.MarketGood
	16,  // 8: statproto.MarketGood.base_info:type_name -> statproto.BaseInfo
	17,  // 9: statproto.BaseInfo.base_pos:type_name -> statproto.Pos
	20,  // 10: statproto.GetCommoditiesReply.items:type_name -> statproto.Commodity
	73,  // 11: statproto.Commodity.bases:type_name -> statproto.Commodity.BasesEntry
	22,  // 12: statproto.GetAmmoReply.items:type_name -> statproto.Ammo
	74,  // 13: statproto.Ammo.bases:type_name -> statproto.Ammo.BasesEntry
	23,  // 14: statproto.Ammo.discovery_tech_compat:type_name -> statproto.DiscoveryTechCompat
	45,  // 15: statproto.Ammo.ammo_limit:type_name -> statproto.AmmoLimit
	75,  // 16: statproto.DiscoveryTechCompat.techcompat_by_id:type_name -> statproto.DiscoveryTechCompat.TechcompatByIdEntry
	23,  // 17: statproto.TechCompatAnswer.tech_compat:type_name -> statproto.DiscoveryTechCompat
	24,  // 18: statproto.GetTechCompatReply.answers:type_name -> statproto.TechCompatAnswer
	28,  // 19: statproto.GetCounterMeasuresReply.items:type_name -> statproto.CounterMeasure
	76,  // 20: statproto.CounterMeasure.bases:type_name -> statproto.CounterMeasure.BasesEntry
	23,  // 21: statproto.CounterMeasure.discovery_tech_compat:type_name -> statproto.DiscoveryTechCompat
	45,  // 22: statproto.CounterMeasure.ammo_limit:type_name -> statproto.AmmoLimit
	30,  // 23: statproto.GetEnginesReply.items:type_name -> statproto.Engine
	77,  // 24: statproto.Engine.bases:type_name -> statproto.Engine.BasesEntry
	23,  // 25: statproto.Engine.discovery_tech_compat:type_name -> statproto.DiscoveryTechCompat
	33,  // 26: statproto.GetFactionsReply.items:type_name -> statproto.Faction
	34,  // 27: statproto.Faction.reputations:type_name -> statproto.Reputation
	35,  // 28: statproto.Faction.bribes:type_name -> statproto.Bribe
	16,  // 29: statproto.Bribe.base_info:type_name -> statproto.BaseInfo
	37,  // 30: statproto.GetGunsReply.items:type_name -> statproto.Gun
	78,  // 31: statproto.Gun.bases:type_name -> statproto.Gun.BasesEntry
	23,  // 32: statproto.Gun.discovery_tech_compat:type_name -> statproto.DiscoveryTechCompat
	38,  // 33: statproto.Gun.damage_bonuses:type_name -> statproto.DamageBonus
	39,  // 34: statproto.Gun.missile:type_name -> statproto.Missile
	40,  // 35: statproto.Gun.gun_detailed:type_name -> statproto.GunDetailed
	41,  // 36: statproto.Gun.burst_fire:type_name -> statproto.BurstFire
	45,  // 37: statproto.Gun.ammo_limit:type_name -> statproto.AmmoLimit
	42,  // 38: statproto.Gun.disco_gun:type_name -> statproto.DiscoGun
	44,  // 39: statproto.GetMinesReply.items:type_name -> statproto.Mine
	45,  // 40: statproto.Mine.ammo_limit:type_name -> statproto.AmmoLimit
	79,  // 41: statproto.Mine.bases:type_name -> statproto.Mine.BasesEntry
	23,  // 42: statproto.Mine.discovery_tech_compat:type_name -> statproto.DiscoveryTechCompat
	47,  // 43: statproto.GetScannersReply.items:type_name -> statproto.Scanner
	80,  // 44: statproto.Scanner.bases:type_name -> statproto.Scanner.BasesEntry
	23,  // 45: statproto.Scanner.discovery_tech_compat:type_name -> statproto.DiscoveryTechCompat
	49,  // 46: statproto.GetShieldsReply.items:type_name -> statproto.Shield
	81,  // 47: statproto.Shield.bases:type_name -> statproto.Shield.BasesEntry
	23,  // 48: statproto.Shield.discovery_tech_compat:type_name -> statproto.DiscoveryTechCompat
	51,  // 49: statproto.GetShipsReply.items:type_name -> statproto.Ship
	52,  // 50: statproto.Ship.slots:type_name -> statproto.EquipmentSlot
	53,  // 51: statproto.Ship.ship_packages:type_name -> statproto.ShipPackage
	82,  // 52: statproto.Ship.bases:type_name -> statproto.Ship.BasesEntry
	23,  // 53: statproto.Ship.discovery_tech_compat:type_name -> statproto.DiscoveryTechCompat
	54,  // 54: statproto.Ship.disco_ship:type_name -> statproto.DiscoShip
	56,  // 55: statproto.GetThrustersReply.items:type_name -> statproto.Thruster
	83,  // 56: statproto.Thruster.bases:type_name -> statproto.Thruster.BasesEntry
	23,  // 57: statproto.Thruster.discovery_tech_compat:type_name -> statproto.DiscoveryTechCompat
	58,  // 58: statproto.GetTractorsReply.items:type_name -> statproto.Tractor
	84,  // 59: statproto.Tractor.bases:type_name -> statproto.Tractor.BasesEntry
	85,  // 60: statproto.GetHashesReply.hashes_by_nick:type_name -> statproto.GetHashesReply.HashesByNickEntry
	63,  // 61: statproto.GetPoBsReply.items:type_name -> statproto.PoB
	17,  // 62: statproto.PoBCore.base_pos:type_name -> statproto.Pos
	62,  // 63: statproto.PoB.core:type_name -> statproto.PoBCore
	64,  // 64: statproto.PoB.shop_items:type_name -> statproto.ShopItem
	66,  // 65: statproto.GetPoBGoodsReply.items:type_name -> statproto.PoBGood
	67,  // 66: statproto.PoBGood.bases:type_name -> statproto.PoBGoodBase
	64,  // 67: statproto.PoBGoodBase.shop_item:type_name -> statproto.ShopItem
	62,  // 68: statproto.PoBGoodBase.base:type_name -> statproto.PoBCore
	69,  // 69: statproto.GetGraphPathsInput.queries:type_name -> statproto.GraphPathQuery
	71,  // 70: statproto.GetGraphPathsReply.answers:type_name -> statproto.GetGraphPathsAnswer
	69,  // 71: statproto.GetGraphPathsAnswer.route:type_name -> statproto.GraphPathQuery
	72,  // 72: statproto.GetGraphPathsAnswer.time:type_name -> statproto.GraphPathTime
	15,  // 73: statproto.Commodity.BasesEntry.value:type_name -> statproto.MarketGood
	15,  // 74: statproto.Ammo.BasesEntry.value:type_name -> statproto.MarketGood
	15,  // 75: statproto.CounterMeasure.BasesEntry.value:type_name -> statproto.MarketGood
	15,  // 76: statproto.Engine.BasesEntry.value:type_name -> statproto.MarketGood
	15,  // 77: statproto.Gun.BasesEntry.value:type_name -> statproto.MarketGood
	15,  // 78: statproto.Mine.BasesEntry.value:type_name -> statproto.MarketGood
	15,  // 79: statproto.Scanner.BasesEntry.value:type_name -> statproto.MarketGood
	15,  // 80: statproto.Shield.BasesEntry.value:type_name -> statproto.MarketGood
	15,  // 81: statproto.Ship.BasesEntry.value:type_name -> statproto.MarketGood
	15,  // 82: statproto.Thruster.BasesEntry.value:type_name -> statproto.MarketGood
	15,  // 83: statproto.Tractor.BasesEntry.value:type_name -> statproto.MarketGood
	60,  // 84: statproto.GetHashesReply.HashesByNickEntry.value:type_name -> statproto.Hash
	0,   // 85: statproto.Darkstat.GetHealth:input_type -> statproto.Empty
	10,  // 86: statproto.Darkstat.GetBasesNpc:input_type -> statproto.GetBasesInput
	10,  // 87: statproto.Darkstat.GetBasesMiningOperations:input_type -> statproto.GetBasesInput
	10,  // 88: statproto.Darkstat.GetBasesPoBs:input_type -> statproto.GetBasesInput
	0,   // 89: statproto.Darkstat.GetPoBs:input_type -> statproto.Empty
	0,   // 90: statproto.Darkstat.GetPoBGoods:input_type -> statproto.Empty
	18,  // 91: statproto.Darkstat.GetCommodities:input_type -> statproto.GetCommoditiesInput
	9,   // 92: statproto.Darkstat.GetGuns:input_type -> statproto.GetGunsInput
	9,   // 93: statproto.Darkstat.GetMissiles:input_type -> statproto.GetGunsInput
	8,   // 94: statproto.Darkstat.GetAmmos:input_type -> statproto.GetEquipmentInput
	8,   // 95: statproto.Darkstat.GetCounterMeasures:input_type -> statproto.GetEquipmentInput
	8,   // 96: statproto.Darkstat.GetEngines:input_type -> statproto.GetEquipmentInput
	8,   // 97: statproto.Darkstat.GetMines:input_type -> statproto.GetEquipmentInput
	8,   // 98: statproto.Darkstat.GetScanners:input_type -> statproto.GetEquipmentInput
	8,   // 99: statproto.Darkstat.GetShields:input_type -> statproto.GetEquipmentInput
	8,   // 100: statproto.Darkstat.GetShips:input_type -> statproto.GetEquipmentInput
	8,   // 101: statproto.Darkstat.GetThrusters:input_type -> statproto.GetEquipmentInput
	31,  // 102: statproto.Darkstat.GetFactions:input_type -> statproto.GetFactionsInput
	11,  // 103: statproto.Darkstat.GetTractors:input_type -> statproto.GetTractorsInput
	0,   // 104: statproto.Darkstat.GetHashes:input_type -> statproto.Empty
	1,   // 105: statproto.Darkstat.GetInfocards:input_type -> statproto.GetInfocardsInput
	68,  // 106: statproto.Darkstat.GetGraphPaths:input_type -> statproto.GetGraphPathsInput
	7,   // 107: statproto.Darkstat.GetHealth:output_type -> statproto.HealthReply
	12,  // 108: statproto.Darkstat.GetBasesNpc:output_type -> statproto.GetBasesReply
	12,  // 109: statproto.Darkstat.GetBasesMiningOperations:output_type -> statproto.GetBasesReply
	12,  // 110: statproto.Darkstat.GetBasesPoBs:output_type -> statproto.GetBasesReply
	61,  // 111: statproto.Darkstat.GetPoBs:output_type -> statproto.GetPoBsReply
	65,  // 112: statproto.Darkstat.GetPoBGoods:output_type -> statproto.GetPoBGoodsReply
	19,  // 113: statproto.Darkstat.GetCommodities:output_type -> statproto.GetCommoditiesReply
	36,  // 114: statproto.Darkstat.GetGuns:output_type -> statproto.GetGunsReply
	36,  // 115: statproto.Darkstat.GetMissiles:output_type -> statproto.GetGunsReply
	21,  // 116: statproto.Darkstat.GetAmmos:output_type -> statproto.GetAmmoReply
	27,  // 117: statproto.Darkstat.GetCounterMeasures:output_type -> statproto.GetCounterMeasuresReply
	29,  // 118: statproto.Darkstat.GetEngines:output_type -> statproto.GetEnginesReply
	43,  // 119: statproto.Darkstat.GetMines:output_type -> statproto.GetMinesReply
	46,  // 120: statproto.Darkstat.GetScanners:output_type -> statproto.GetScannersReply
	48,  // 121: statproto.Darkstat.GetShields:output_type -> statproto.GetShieldsReply
	50,  // 122: statproto.Darkstat.GetShips:output_type -> statproto.GetShipsReply
	55,  // 123: statproto.Darkstat.GetThrusters:output_type -> statproto.GetThrustersReply
	32,  // 124: statproto.Darkstat.GetFactions:output_type -> statproto.GetFactionsReply
	57,  // 125: statproto.Darkstat.GetTractors:output_type -> statproto.GetTractorsReply
	59,  // 126: statproto.Darkstat.GetHashes:output_type -> statproto.GetHashesReply
	2,   // 127: statproto.Darkstat.GetInfocards:output_type -> statproto.GetInfocardsReply
	70,  // 128: statproto.Darkstat.GetGraphPaths:output_type -> statproto.GetGraphPathsReply
	107, // [107:129] is the sub-list for method output_type
	85,  // [85:107] is the sub-list for method input_type
	85,  // [85:85] is the sub-list for extension type_name
	85,  // [85:85] is the sub-list for extension extendee
	0,   // [0:85] is the sub-list for field type_name
}

func init() { file_darkstat_proto_init() }
func file_darkstat_proto_init() {
	if File_darkstat_proto != nil {
		return
	}
	file_darkstat_proto_msgTypes[3].OneofWrappers = []any{}
	file_darkstat_proto_msgTypes[6].OneofWrappers = []any{}
	file_darkstat_proto_msgTypes[14].OneofWrappers = []any{}
	file_darkstat_proto_msgTypes[15].OneofWrappers = []any{}
	file_darkstat_proto_msgTypes[22].OneofWrappers = []any{}
	file_darkstat_proto_msgTypes[24].OneofWrappers = []any{}
	file_darkstat_proto_msgTypes[28].OneofWrappers = []any{}
	file_darkstat_proto_msgTypes[30].OneofWrappers = []any{}
	file_darkstat_proto_msgTypes[37].OneofWrappers = []any{}
	file_darkstat_proto_msgTypes[44].OneofWrappers = []any{}
	file_darkstat_proto_msgTypes[45].OneofWrappers = []any{}
	file_darkstat_proto_msgTypes[47].OneofWrappers = []any{}
	file_darkstat_proto_msgTypes[49].OneofWrappers = []any{}
	file_darkstat_proto_msgTypes[51].OneofWrappers = []any{}
	file_darkstat_proto_msgTypes[56].OneofWrappers = []any{}
	file_darkstat_proto_msgTypes[62].OneofWrappers = []any{}
	file_darkstat_proto_msgTypes[66].OneofWrappers = []any{}
	file_darkstat_proto_msgTypes[71].OneofWrappers = []any{}
	file_darkstat_proto_msgTypes[72].OneofWrappers = []any{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_darkstat_proto_rawDesc), len(file_darkstat_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   86,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_darkstat_proto_goTypes,
		DependencyIndexes: file_darkstat_proto_depIdxs,
		MessageInfos:      file_darkstat_proto_msgTypes,
	}.Build()
	File_darkstat_proto = out.File
	file_darkstat_proto_goTypes = nil
	file_darkstat_proto_depIdxs = nil
}
