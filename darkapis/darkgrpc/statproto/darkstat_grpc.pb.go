// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v3.12.4
// source: darkstat.proto

package statproto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	Darkstat_GetHealth_FullMethodName                = "/statproto.Darkstat/GetHealth"
	Darkstat_GetBasesNpc_FullMethodName              = "/statproto.Darkstat/GetBasesNpc"
	Darkstat_GetBasesMiningOperations_FullMethodName = "/statproto.Darkstat/GetBasesMiningOperations"
	Darkstat_GetBasesPoBs_FullMethodName             = "/statproto.Darkstat/GetBasesPoBs"
	Darkstat_GetPoBs_FullMethodName                  = "/statproto.Darkstat/GetPoBs"
	Darkstat_GetPoBGoods_FullMethodName              = "/statproto.Darkstat/GetPoBGoods"
	Darkstat_GetCommodities_FullMethodName           = "/statproto.Darkstat/GetCommodities"
	Darkstat_GetGuns_FullMethodName                  = "/statproto.Darkstat/GetGuns"
	Darkstat_GetMissiles_FullMethodName              = "/statproto.Darkstat/GetMissiles"
	Darkstat_GetAmmos_FullMethodName                 = "/statproto.Darkstat/GetAmmos"
	Darkstat_GetCounterMeasures_FullMethodName       = "/statproto.Darkstat/GetCounterMeasures"
	Darkstat_GetEngines_FullMethodName               = "/statproto.Darkstat/GetEngines"
	Darkstat_GetMines_FullMethodName                 = "/statproto.Darkstat/GetMines"
	Darkstat_GetScanners_FullMethodName              = "/statproto.Darkstat/GetScanners"
	Darkstat_GetShields_FullMethodName               = "/statproto.Darkstat/GetShields"
	Darkstat_GetShips_FullMethodName                 = "/statproto.Darkstat/GetShips"
	Darkstat_GetThrusters_FullMethodName             = "/statproto.Darkstat/GetThrusters"
	Darkstat_GetFactions_FullMethodName              = "/statproto.Darkstat/GetFactions"
	Darkstat_GetTractors_FullMethodName              = "/statproto.Darkstat/GetTractors"
	Darkstat_GetHashes_FullMethodName                = "/statproto.Darkstat/GetHashes"
	Darkstat_GetInfocards_FullMethodName             = "/statproto.Darkstat/GetInfocards"
	Darkstat_GetGraphPaths_FullMethodName            = "/statproto.Darkstat/GetGraphPaths"
)

// DarkstatClient is the client API for Darkstat service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type DarkstatClient interface {
	// Just to check if grpc works. Returns boolean value if it is healthy as true
	GetHealth(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*HealthReply, error)
	// Get all Freelancer NPC bases
	GetBasesNpc(ctx context.Context, in *GetBasesInput, opts ...grpc.CallOption) (*GetBasesReply, error)
	// Get all imaginary bases that in place of mining fields. Useful for trading calculations
	GetBasesMiningOperations(ctx context.Context, in *GetBasesInput, opts ...grpc.CallOption) (*GetBasesReply, error)
	// Get all Player Owned bases in the same format as Npc bases. Returns only PoBs which have known positions
	// Useful for trading calculations
	GetBasesPoBs(ctx context.Context, in *GetBasesInput, opts ...grpc.CallOption) (*GetBasesReply, error)
	// Get all Player Owned bases. Completely all that are public exposed
	GetPoBs(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*GetPoBsReply, error)
	// Get all PoB goods, where they are sold and bought. Reverse search by PoBs
	GetPoBGoods(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*GetPoBGoodsReply, error)
	GetCommodities(ctx context.Context, in *GetCommoditiesInput, opts ...grpc.CallOption) (*GetCommoditiesReply, error)
	GetGuns(ctx context.Context, in *GetGunsInput, opts ...grpc.CallOption) (*GetGunsReply, error)
	GetMissiles(ctx context.Context, in *GetGunsInput, opts ...grpc.CallOption) (*GetGunsReply, error)
	GetAmmos(ctx context.Context, in *GetEquipmentInput, opts ...grpc.CallOption) (*GetAmmoReply, error)
	GetCounterMeasures(ctx context.Context, in *GetEquipmentInput, opts ...grpc.CallOption) (*GetCounterMeasuresReply, error)
	GetEngines(ctx context.Context, in *GetEquipmentInput, opts ...grpc.CallOption) (*GetEnginesReply, error)
	GetMines(ctx context.Context, in *GetEquipmentInput, opts ...grpc.CallOption) (*GetMinesReply, error)
	GetScanners(ctx context.Context, in *GetEquipmentInput, opts ...grpc.CallOption) (*GetScannersReply, error)
	GetShields(ctx context.Context, in *GetEquipmentInput, opts ...grpc.CallOption) (*GetShieldsReply, error)
	GetShips(ctx context.Context, in *GetEquipmentInput, opts ...grpc.CallOption) (*GetShipsReply, error)
	GetThrusters(ctx context.Context, in *GetEquipmentInput, opts ...grpc.CallOption) (*GetThrustersReply, error)
	GetFactions(ctx context.Context, in *GetFactionsInput, opts ...grpc.CallOption) (*GetFactionsReply, error)
	// Get Tractors. For Discovery those are IDs
	GetTractors(ctx context.Context, in *GetTractorsInput, opts ...grpc.CallOption) (*GetTractorsReply, error)
	GetHashes(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*GetHashesReply, error)
	GetInfocards(ctx context.Context, in *GetInfocardsInput, opts ...grpc.CallOption) (*GetInfocardsReply, error)
	GetGraphPaths(ctx context.Context, in *GetGraphPathsInput, opts ...grpc.CallOption) (*GetGraphPathsReply, error)
}

type darkstatClient struct {
	cc grpc.ClientConnInterface
}

func NewDarkstatClient(cc grpc.ClientConnInterface) DarkstatClient {
	return &darkstatClient{cc}
}

func (c *darkstatClient) GetHealth(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*HealthReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(HealthReply)
	err := c.cc.Invoke(ctx, Darkstat_GetHealth_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *darkstatClient) GetBasesNpc(ctx context.Context, in *GetBasesInput, opts ...grpc.CallOption) (*GetBasesReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetBasesReply)
	err := c.cc.Invoke(ctx, Darkstat_GetBasesNpc_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *darkstatClient) GetBasesMiningOperations(ctx context.Context, in *GetBasesInput, opts ...grpc.CallOption) (*GetBasesReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetBasesReply)
	err := c.cc.Invoke(ctx, Darkstat_GetBasesMiningOperations_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *darkstatClient) GetBasesPoBs(ctx context.Context, in *GetBasesInput, opts ...grpc.CallOption) (*GetBasesReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetBasesReply)
	err := c.cc.Invoke(ctx, Darkstat_GetBasesPoBs_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *darkstatClient) GetPoBs(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*GetPoBsReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetPoBsReply)
	err := c.cc.Invoke(ctx, Darkstat_GetPoBs_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *darkstatClient) GetPoBGoods(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*GetPoBGoodsReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetPoBGoodsReply)
	err := c.cc.Invoke(ctx, Darkstat_GetPoBGoods_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *darkstatClient) GetCommodities(ctx context.Context, in *GetCommoditiesInput, opts ...grpc.CallOption) (*GetCommoditiesReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetCommoditiesReply)
	err := c.cc.Invoke(ctx, Darkstat_GetCommodities_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *darkstatClient) GetGuns(ctx context.Context, in *GetGunsInput, opts ...grpc.CallOption) (*GetGunsReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetGunsReply)
	err := c.cc.Invoke(ctx, Darkstat_GetGuns_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *darkstatClient) GetMissiles(ctx context.Context, in *GetGunsInput, opts ...grpc.CallOption) (*GetGunsReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetGunsReply)
	err := c.cc.Invoke(ctx, Darkstat_GetMissiles_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *darkstatClient) GetAmmos(ctx context.Context, in *GetEquipmentInput, opts ...grpc.CallOption) (*GetAmmoReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetAmmoReply)
	err := c.cc.Invoke(ctx, Darkstat_GetAmmos_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *darkstatClient) GetCounterMeasures(ctx context.Context, in *GetEquipmentInput, opts ...grpc.CallOption) (*GetCounterMeasuresReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetCounterMeasuresReply)
	err := c.cc.Invoke(ctx, Darkstat_GetCounterMeasures_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *darkstatClient) GetEngines(ctx context.Context, in *GetEquipmentInput, opts ...grpc.CallOption) (*GetEnginesReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetEnginesReply)
	err := c.cc.Invoke(ctx, Darkstat_GetEngines_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *darkstatClient) GetMines(ctx context.Context, in *GetEquipmentInput, opts ...grpc.CallOption) (*GetMinesReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetMinesReply)
	err := c.cc.Invoke(ctx, Darkstat_GetMines_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *darkstatClient) GetScanners(ctx context.Context, in *GetEquipmentInput, opts ...grpc.CallOption) (*GetScannersReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetScannersReply)
	err := c.cc.Invoke(ctx, Darkstat_GetScanners_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *darkstatClient) GetShields(ctx context.Context, in *GetEquipmentInput, opts ...grpc.CallOption) (*GetShieldsReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetShieldsReply)
	err := c.cc.Invoke(ctx, Darkstat_GetShields_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *darkstatClient) GetShips(ctx context.Context, in *GetEquipmentInput, opts ...grpc.CallOption) (*GetShipsReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetShipsReply)
	err := c.cc.Invoke(ctx, Darkstat_GetShips_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *darkstatClient) GetThrusters(ctx context.Context, in *GetEquipmentInput, opts ...grpc.CallOption) (*GetThrustersReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetThrustersReply)
	err := c.cc.Invoke(ctx, Darkstat_GetThrusters_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *darkstatClient) GetFactions(ctx context.Context, in *GetFactionsInput, opts ...grpc.CallOption) (*GetFactionsReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetFactionsReply)
	err := c.cc.Invoke(ctx, Darkstat_GetFactions_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *darkstatClient) GetTractors(ctx context.Context, in *GetTractorsInput, opts ...grpc.CallOption) (*GetTractorsReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetTractorsReply)
	err := c.cc.Invoke(ctx, Darkstat_GetTractors_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *darkstatClient) GetHashes(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*GetHashesReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetHashesReply)
	err := c.cc.Invoke(ctx, Darkstat_GetHashes_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *darkstatClient) GetInfocards(ctx context.Context, in *GetInfocardsInput, opts ...grpc.CallOption) (*GetInfocardsReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetInfocardsReply)
	err := c.cc.Invoke(ctx, Darkstat_GetInfocards_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *darkstatClient) GetGraphPaths(ctx context.Context, in *GetGraphPathsInput, opts ...grpc.CallOption) (*GetGraphPathsReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetGraphPathsReply)
	err := c.cc.Invoke(ctx, Darkstat_GetGraphPaths_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DarkstatServer is the server API for Darkstat service.
// All implementations must embed UnimplementedDarkstatServer
// for forward compatibility.
type DarkstatServer interface {
	// Just to check if grpc works. Returns boolean value if it is healthy as true
	GetHealth(context.Context, *Empty) (*HealthReply, error)
	// Get all Freelancer NPC bases
	GetBasesNpc(context.Context, *GetBasesInput) (*GetBasesReply, error)
	// Get all imaginary bases that in place of mining fields. Useful for trading calculations
	GetBasesMiningOperations(context.Context, *GetBasesInput) (*GetBasesReply, error)
	// Get all Player Owned bases in the same format as Npc bases. Returns only PoBs which have known positions
	// Useful for trading calculations
	GetBasesPoBs(context.Context, *GetBasesInput) (*GetBasesReply, error)
	// Get all Player Owned bases. Completely all that are public exposed
	GetPoBs(context.Context, *Empty) (*GetPoBsReply, error)
	// Get all PoB goods, where they are sold and bought. Reverse search by PoBs
	GetPoBGoods(context.Context, *Empty) (*GetPoBGoodsReply, error)
	GetCommodities(context.Context, *GetCommoditiesInput) (*GetCommoditiesReply, error)
	GetGuns(context.Context, *GetGunsInput) (*GetGunsReply, error)
	GetMissiles(context.Context, *GetGunsInput) (*GetGunsReply, error)
	GetAmmos(context.Context, *GetEquipmentInput) (*GetAmmoReply, error)
	GetCounterMeasures(context.Context, *GetEquipmentInput) (*GetCounterMeasuresReply, error)
	GetEngines(context.Context, *GetEquipmentInput) (*GetEnginesReply, error)
	GetMines(context.Context, *GetEquipmentInput) (*GetMinesReply, error)
	GetScanners(context.Context, *GetEquipmentInput) (*GetScannersReply, error)
	GetShields(context.Context, *GetEquipmentInput) (*GetShieldsReply, error)
	GetShips(context.Context, *GetEquipmentInput) (*GetShipsReply, error)
	GetThrusters(context.Context, *GetEquipmentInput) (*GetThrustersReply, error)
	GetFactions(context.Context, *GetFactionsInput) (*GetFactionsReply, error)
	// Get Tractors. For Discovery those are IDs
	GetTractors(context.Context, *GetTractorsInput) (*GetTractorsReply, error)
	GetHashes(context.Context, *Empty) (*GetHashesReply, error)
	GetInfocards(context.Context, *GetInfocardsInput) (*GetInfocardsReply, error)
	GetGraphPaths(context.Context, *GetGraphPathsInput) (*GetGraphPathsReply, error)
	mustEmbedUnimplementedDarkstatServer()
}

// UnimplementedDarkstatServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedDarkstatServer struct{}

func (UnimplementedDarkstatServer) GetHealth(context.Context, *Empty) (*HealthReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetHealth not implemented")
}
func (UnimplementedDarkstatServer) GetBasesNpc(context.Context, *GetBasesInput) (*GetBasesReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBasesNpc not implemented")
}
func (UnimplementedDarkstatServer) GetBasesMiningOperations(context.Context, *GetBasesInput) (*GetBasesReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBasesMiningOperations not implemented")
}
func (UnimplementedDarkstatServer) GetBasesPoBs(context.Context, *GetBasesInput) (*GetBasesReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBasesPoBs not implemented")
}
func (UnimplementedDarkstatServer) GetPoBs(context.Context, *Empty) (*GetPoBsReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPoBs not implemented")
}
func (UnimplementedDarkstatServer) GetPoBGoods(context.Context, *Empty) (*GetPoBGoodsReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPoBGoods not implemented")
}
func (UnimplementedDarkstatServer) GetCommodities(context.Context, *GetCommoditiesInput) (*GetCommoditiesReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCommodities not implemented")
}
func (UnimplementedDarkstatServer) GetGuns(context.Context, *GetGunsInput) (*GetGunsReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetGuns not implemented")
}
func (UnimplementedDarkstatServer) GetMissiles(context.Context, *GetGunsInput) (*GetGunsReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMissiles not implemented")
}
func (UnimplementedDarkstatServer) GetAmmos(context.Context, *GetEquipmentInput) (*GetAmmoReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAmmos not implemented")
}
func (UnimplementedDarkstatServer) GetCounterMeasures(context.Context, *GetEquipmentInput) (*GetCounterMeasuresReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCounterMeasures not implemented")
}
func (UnimplementedDarkstatServer) GetEngines(context.Context, *GetEquipmentInput) (*GetEnginesReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetEngines not implemented")
}
func (UnimplementedDarkstatServer) GetMines(context.Context, *GetEquipmentInput) (*GetMinesReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMines not implemented")
}
func (UnimplementedDarkstatServer) GetScanners(context.Context, *GetEquipmentInput) (*GetScannersReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetScanners not implemented")
}
func (UnimplementedDarkstatServer) GetShields(context.Context, *GetEquipmentInput) (*GetShieldsReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetShields not implemented")
}
func (UnimplementedDarkstatServer) GetShips(context.Context, *GetEquipmentInput) (*GetShipsReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetShips not implemented")
}
func (UnimplementedDarkstatServer) GetThrusters(context.Context, *GetEquipmentInput) (*GetThrustersReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetThrusters not implemented")
}
func (UnimplementedDarkstatServer) GetFactions(context.Context, *GetFactionsInput) (*GetFactionsReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetFactions not implemented")
}
func (UnimplementedDarkstatServer) GetTractors(context.Context, *GetTractorsInput) (*GetTractorsReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTractors not implemented")
}
func (UnimplementedDarkstatServer) GetHashes(context.Context, *Empty) (*GetHashesReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetHashes not implemented")
}
func (UnimplementedDarkstatServer) GetInfocards(context.Context, *GetInfocardsInput) (*GetInfocardsReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetInfocards not implemented")
}
func (UnimplementedDarkstatServer) GetGraphPaths(context.Context, *GetGraphPathsInput) (*GetGraphPathsReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetGraphPaths not implemented")
}
func (UnimplementedDarkstatServer) mustEmbedUnimplementedDarkstatServer() {}
func (UnimplementedDarkstatServer) testEmbeddedByValue()                  {}

// UnsafeDarkstatServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to DarkstatServer will
// result in compilation errors.
type UnsafeDarkstatServer interface {
	mustEmbedUnimplementedDarkstatServer()
}

func RegisterDarkstatServer(s grpc.ServiceRegistrar, srv DarkstatServer) {
	// If the following call pancis, it indicates UnimplementedDarkstatServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&Darkstat_ServiceDesc, srv)
}

func _Darkstat_GetHealth_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DarkstatServer).GetHealth(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Darkstat_GetHealth_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DarkstatServer).GetHealth(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Darkstat_GetBasesNpc_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetBasesInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DarkstatServer).GetBasesNpc(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Darkstat_GetBasesNpc_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DarkstatServer).GetBasesNpc(ctx, req.(*GetBasesInput))
	}
	return interceptor(ctx, in, info, handler)
}

func _Darkstat_GetBasesMiningOperations_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetBasesInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DarkstatServer).GetBasesMiningOperations(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Darkstat_GetBasesMiningOperations_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DarkstatServer).GetBasesMiningOperations(ctx, req.(*GetBasesInput))
	}
	return interceptor(ctx, in, info, handler)
}

func _Darkstat_GetBasesPoBs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetBasesInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DarkstatServer).GetBasesPoBs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Darkstat_GetBasesPoBs_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DarkstatServer).GetBasesPoBs(ctx, req.(*GetBasesInput))
	}
	return interceptor(ctx, in, info, handler)
}

func _Darkstat_GetPoBs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DarkstatServer).GetPoBs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Darkstat_GetPoBs_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DarkstatServer).GetPoBs(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Darkstat_GetPoBGoods_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DarkstatServer).GetPoBGoods(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Darkstat_GetPoBGoods_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DarkstatServer).GetPoBGoods(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Darkstat_GetCommodities_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCommoditiesInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DarkstatServer).GetCommodities(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Darkstat_GetCommodities_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DarkstatServer).GetCommodities(ctx, req.(*GetCommoditiesInput))
	}
	return interceptor(ctx, in, info, handler)
}

func _Darkstat_GetGuns_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetGunsInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DarkstatServer).GetGuns(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Darkstat_GetGuns_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DarkstatServer).GetGuns(ctx, req.(*GetGunsInput))
	}
	return interceptor(ctx, in, info, handler)
}

func _Darkstat_GetMissiles_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetGunsInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DarkstatServer).GetMissiles(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Darkstat_GetMissiles_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DarkstatServer).GetMissiles(ctx, req.(*GetGunsInput))
	}
	return interceptor(ctx, in, info, handler)
}

func _Darkstat_GetAmmos_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetEquipmentInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DarkstatServer).GetAmmos(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Darkstat_GetAmmos_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DarkstatServer).GetAmmos(ctx, req.(*GetEquipmentInput))
	}
	return interceptor(ctx, in, info, handler)
}

func _Darkstat_GetCounterMeasures_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetEquipmentInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DarkstatServer).GetCounterMeasures(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Darkstat_GetCounterMeasures_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DarkstatServer).GetCounterMeasures(ctx, req.(*GetEquipmentInput))
	}
	return interceptor(ctx, in, info, handler)
}

func _Darkstat_GetEngines_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetEquipmentInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DarkstatServer).GetEngines(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Darkstat_GetEngines_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DarkstatServer).GetEngines(ctx, req.(*GetEquipmentInput))
	}
	return interceptor(ctx, in, info, handler)
}

func _Darkstat_GetMines_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetEquipmentInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DarkstatServer).GetMines(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Darkstat_GetMines_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DarkstatServer).GetMines(ctx, req.(*GetEquipmentInput))
	}
	return interceptor(ctx, in, info, handler)
}

func _Darkstat_GetScanners_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetEquipmentInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DarkstatServer).GetScanners(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Darkstat_GetScanners_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DarkstatServer).GetScanners(ctx, req.(*GetEquipmentInput))
	}
	return interceptor(ctx, in, info, handler)
}

func _Darkstat_GetShields_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetEquipmentInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DarkstatServer).GetShields(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Darkstat_GetShields_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DarkstatServer).GetShields(ctx, req.(*GetEquipmentInput))
	}
	return interceptor(ctx, in, info, handler)
}

func _Darkstat_GetShips_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetEquipmentInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DarkstatServer).GetShips(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Darkstat_GetShips_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DarkstatServer).GetShips(ctx, req.(*GetEquipmentInput))
	}
	return interceptor(ctx, in, info, handler)
}

func _Darkstat_GetThrusters_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetEquipmentInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DarkstatServer).GetThrusters(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Darkstat_GetThrusters_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DarkstatServer).GetThrusters(ctx, req.(*GetEquipmentInput))
	}
	return interceptor(ctx, in, info, handler)
}

func _Darkstat_GetFactions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetFactionsInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DarkstatServer).GetFactions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Darkstat_GetFactions_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DarkstatServer).GetFactions(ctx, req.(*GetFactionsInput))
	}
	return interceptor(ctx, in, info, handler)
}

func _Darkstat_GetTractors_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTractorsInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DarkstatServer).GetTractors(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Darkstat_GetTractors_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DarkstatServer).GetTractors(ctx, req.(*GetTractorsInput))
	}
	return interceptor(ctx, in, info, handler)
}

func _Darkstat_GetHashes_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DarkstatServer).GetHashes(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Darkstat_GetHashes_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DarkstatServer).GetHashes(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Darkstat_GetInfocards_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetInfocardsInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DarkstatServer).GetInfocards(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Darkstat_GetInfocards_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DarkstatServer).GetInfocards(ctx, req.(*GetInfocardsInput))
	}
	return interceptor(ctx, in, info, handler)
}

func _Darkstat_GetGraphPaths_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetGraphPathsInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DarkstatServer).GetGraphPaths(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Darkstat_GetGraphPaths_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DarkstatServer).GetGraphPaths(ctx, req.(*GetGraphPathsInput))
	}
	return interceptor(ctx, in, info, handler)
}

// Darkstat_ServiceDesc is the grpc.ServiceDesc for Darkstat service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Darkstat_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "statproto.Darkstat",
	HandlerType: (*DarkstatServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetHealth",
			Handler:    _Darkstat_GetHealth_Handler,
		},
		{
			MethodName: "GetBasesNpc",
			Handler:    _Darkstat_GetBasesNpc_Handler,
		},
		{
			MethodName: "GetBasesMiningOperations",
			Handler:    _Darkstat_GetBasesMiningOperations_Handler,
		},
		{
			MethodName: "GetBasesPoBs",
			Handler:    _Darkstat_GetBasesPoBs_Handler,
		},
		{
			MethodName: "GetPoBs",
			Handler:    _Darkstat_GetPoBs_Handler,
		},
		{
			MethodName: "GetPoBGoods",
			Handler:    _Darkstat_GetPoBGoods_Handler,
		},
		{
			MethodName: "GetCommodities",
			Handler:    _Darkstat_GetCommodities_Handler,
		},
		{
			MethodName: "GetGuns",
			Handler:    _Darkstat_GetGuns_Handler,
		},
		{
			MethodName: "GetMissiles",
			Handler:    _Darkstat_GetMissiles_Handler,
		},
		{
			MethodName: "GetAmmos",
			Handler:    _Darkstat_GetAmmos_Handler,
		},
		{
			MethodName: "GetCounterMeasures",
			Handler:    _Darkstat_GetCounterMeasures_Handler,
		},
		{
			MethodName: "GetEngines",
			Handler:    _Darkstat_GetEngines_Handler,
		},
		{
			MethodName: "GetMines",
			Handler:    _Darkstat_GetMines_Handler,
		},
		{
			MethodName: "GetScanners",
			Handler:    _Darkstat_GetScanners_Handler,
		},
		{
			MethodName: "GetShields",
			Handler:    _Darkstat_GetShields_Handler,
		},
		{
			MethodName: "GetShips",
			Handler:    _Darkstat_GetShips_Handler,
		},
		{
			MethodName: "GetThrusters",
			Handler:    _Darkstat_GetThrusters_Handler,
		},
		{
			MethodName: "GetFactions",
			Handler:    _Darkstat_GetFactions_Handler,
		},
		{
			MethodName: "GetTractors",
			Handler:    _Darkstat_GetTractors_Handler,
		},
		{
			MethodName: "GetHashes",
			Handler:    _Darkstat_GetHashes_Handler,
		},
		{
			MethodName: "GetInfocards",
			Handler:    _Darkstat_GetInfocards_Handler,
		},
		{
			MethodName: "GetGraphPaths",
			Handler:    _Darkstat_GetGraphPaths_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "darkstat.proto",
}
