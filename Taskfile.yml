version: "3"

tasks:
  lint:js:
    cmds:
      - npx eslint darkstat/front/static_front/custom
  test:
    cmds:
      - task: build-version
      - go test ./... {{.CLI_ARGS}}
      # -coverprofile=cover.out
      # https://github.com/golang/go/issues/75031
    vars:
      PWD:
        sh: echo '$(pwd)'

  test:cover:
    cmds:
      - task: build-version
      - go tool cover -html=cover.out

  test:cover:total:
    cmds:
      - task: build-version
      - task: test
      - go tool cover -func cover.out

  build:
    cmds:
      - task: build-version
      - templ generate
      - go run . build

  web:
    cmds:
      - task: build-version
      - templ generate
      # - task: swag:build
      - go run . web

  dev:templ:
    cmds:
      - task: build-version
      - templ generate -watch --cmd="go run . web"

  dev:watch:
    cmds:
      - task: swag:build
      - task: build-version
      # pip install watchdog[watchmedo]
      - >
        ~/venv/bin/watchmedo auto-restart 
        --patterns "*.templ;*.go;*.css;*.js;enverant.json" 
        -i "*_templ.go"
        --recursive
        -- sh -c "task web; sleep infinity"

  build:test:
    cmds:
      - task: build-version
      - mkdir -p dist
      - rm dist/darkstat-linux-amd64 | true
      - GOOS=linux GOARCH=amd64 go build -v -o dist/darkstat-linux-amd64 main.go

  build-version:
    cmds:
      - autogit semver --publish > darkstat/settings/version.txt || echo 'v0.0.0' > darkstat/settings/version.txt

  build:bins:
    cmds:
      - task: build-version
      - mkdir -p dist
      - rm dist/* | true

      - GOOS=linux GOARCH=amd64 go build -v -o dist/darkstat-linux-amd64 main.go
      - GOOS=linux GOARCH=arm64 go build -v -o dist/darkstat-linux-arm64 main.go
      - GOOS=windows GOARCH=amd64 go build -v -o dist/darkstat-windows-amd64.exe main.go
      - GOOS=windows GOARCH=arm64 go build -v -o dist/darkstat-windows-arm64.exe main.go
      - GOOS=darwin GOARCH=amd64 go build -v -o dist/darkstat-macos-amd64 main.go
      - GOOS=darwin GOARCH=arm64 go build -v -o dist/darkstat-macos-arm64 main.go

      # We can build for those too, but i don't think they are needed
      # - GOOS=linux GOARCH=386 go build -v -o dist/darkstat-linux-386 main.go
      # - GOOS=linux GOARCH=arm go build -v -o dist/darkstat-linux-arm main.go
      # - GOOS=windows GOARCH=386 go build -v -o dist/darkstat-windows-386.exe main.go
      # - GOOS=windows GOARCH=arm go build -v -o dist/darkstat-windows-arm.exe main.go

  hook:prod:
    cmds:
      - sudo rm /usr/local/bin/darkstat | true
      - GOOS=linux GOARCH=amd64 go build -v -o dist/darkstat-linux-amd64 main.go
      - sudo ln -s {{.PWD}}/dist/darkstat-linux-amd64 /usr/local/bin/darkstat

  docker:build:
    cmds:
      - docker build --build-arg "BUILD_VERSION=$tag_version" --tag darkwind8/darkstat:$tag_version .

  docker:push:
    cmds:
      - docker push darkwind8/darkstat:$tag_version
      - docker tag darkwind8/darkstat:$tag_version darkwind8/darkstat:staging
      - docker push darkwind8/darkstat:staging
      - docker pull darkwind8/darkstat:staging && docker service update --image darkwind8/darkstat:staging darkstat-staging

  docker:run:
    cmds:
      - docker run -it darkwind8/darkstat:$tag_version

  docker:deploy:
    cmds:
      - docker tag darkwind8/darkstat:staging darkwind8/darkstat:production
      - docker push darkwind8/darkstat:production
      - docker pull darkwind8/darkstat:production && docker service update --image darkwind8/darkstat:production darkstat-production

  kcl:build:
    dir: .github
    cmds:
      - kcl build.k

  swag:build:
    cmds:
      - rm docs/docs.go | true
      - swag init --parseDependency

  profiler:cpu:
    cmds:
      - go tool pprof main.go prof.prof

  profiler:mem: # https://www.codingexplorations.com/blog/memory-management-and-profiling-in-go
    cmds:
      - go tool pprof mem.pprof

  lint:
    cmds:
      - golangci-lint run

  profiler:web:
    cmds:
      # https://www.codereliant.io/memory-leaks-with-pprof/
      - go tool pprof -inuse_space -http=":8001" http://localhost:6060/debug/pprof/heap
      # go tool pprof -inuse_space -http=":8001" https://darkstat-pprof.dd84ai.com/debug/pprof/heap
      # commands like `top`, `web`, `list FunctionName`
      # go tool pprof -raw -output=cpu.txt http://localhost:6060/debug/pprof/profile?seconds=5
      # with menu go tool pprof -http=":8001" http://localhost:6060/debug/pprof/profile?seconds=5
      # go tool pprof -alloc_space -http=":8001" http://localhost:6060/debug/pprof/heap
      # go tool pprof -http=":8001" darkstat.pprof

  grpc:protoc:simple:
    cmds: # --experimental_allow_proto3_optional
      - >
        protoc -I darkapis/darkgrpc/statproto
        --go_out=darkapis/darkgrpc/statproto
        --experimental_allow_proto3_optional
        --go_opt=paths=source_relative
        --go-grpc_out=darkapis/darkgrpc/statproto
        --go-grpc_opt=paths=source_relative
        --proto_path=.
        darkapis/darkgrpc/statproto/darkstat.proto

  grpc:docker:gateway:
    # NOTE: updates dependencies to latest from time to time!
    desc: regenerating all the grpc stuff but with iac documented way
    env:
      DOCKER_HOST: unix:///var/run/docker.sock
    cmds:
      - docker build --target protoc --tag protoc .
      - docker run --rm -v $(pwd):/code protoc

  grpc:protoc:gateway:
    desc: regenerating all the grpc stuff from proto file ;)
    cmds:
      - >
        protoc -I darkapis/darkgrpc/statproto
        --experimental_allow_proto3_optional
        --go_out=darkapis/darkgrpc/statproto/
        --go_opt=paths=source_relative
        --go-grpc_out darkapis/darkgrpc/statproto/
        --go-grpc_opt paths=source_relative
        --grpc-gateway_out ./darkapis/darkgrpc/statproto/
        --grpc-gateway_opt paths=source_relative
        --grpc-gateway_opt generate_unbound_methods=true
        --openapiv2_out ./darkapis/darkgrpc/statproto/
        --openapiv2_opt generate_unbound_methods=true
        darkapis/darkgrpc/statproto/darkstat.proto

  grpc:debug:
    cmds:
      - grpcurl -plaintext darkgrpc.dd84ai.com:443 darkgrpc.DarkGRpc/GetBases

  grpc:protoc:python:
    cmds: # --experimental_allow_proto3_optional
      - >
        python -m grpc_tools.protoc
        -I darkapis/darkgrpc/statproto
        --python_out=grpc_python
        --pyi_out=grpc_python
        --grpc_python_out=grpc_python
        darkapis/darkgrpc/statproto/darkstat.proto

  grpc:format:
    cmds:
      # https://buf.build/docs/cli/installation/
      # go install github.com/bufbuild/buf/cmd/buf@v1.50.0
      - buf format darkapis/darkgrpc/statproto/darkstat.proto -w

  grpc:lint:
    cmds:
      - buf lint darkapis/darkgrpc/statproto/darkstat.proto

  openapi:generate:
    cmds:
      - sdk use java 11.0.25-sem
      - task: swag:build
      - java -jar openapi-generator-cli.jar generate -i docs/swagger.yaml -g go -o ../generated_go
      # - java -jar openapi-generator-cli.jar generate -i docs/swagger.yaml -g go -o ./darkapi/clientgo
      # - java -jar openapi-generator-cli.jar generate -i docs/swagger.yaml -g go-server -o ./darkapi/servergo
      #- java -jar openapi-generator-cli.jar list
env:
  tag_version: v1.48.0-a4
  DOCKER_HOST: ssh://root@darklab:22
  # RELAY_HOST: "darkrelay.mydd84ai.com:8080"

  # necessary env params for Oauth local development
  # DARKCORE_PASSWORD: "1233"
  # DARKCORE_SECRET: "passphrasewhichneedstobe32bytes!"
  # DARKCORE_DISCO_OAUTH: "true"
  # SITE_URL: "darkstat.mydd84ai.com:8000"
