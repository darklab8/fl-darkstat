package tab

import (
	"context"
	"github.com/darklab8/fl-darkstat/darkstat/configs_export/infocarder"
	"github.com/darklab8/fl-darkstat/darkstat/front/frmt"
	"github.com/darklab8/fl-darkstat/darkstat/front/types"
)

type PinMod string

const (
	MainMode PinMod = ""
	PinMode  PinMod = "pin"
)

script Pin(id string) {
  if (id.includes("pin")) {
	Hide(id)

	if (TableLen(document.querySelector("#table-top-mainpin table")) === 1) {
		Hide("table-top-mainpin")
		Hide("table-bottom-right")
	}
  } else {
	Unhide("pin"+id)
	Unhide("table-top-mainpin")
	Unhide("table-bottom-right")
  }
}

script Pin2(id string) {
  // htmx adding row to table version for performance

  // This section deletes pinned items, and hides pinned table if we deleted last one
  if (id.includes("pin")) {
	// deleting htmx added row in table
	row = document.querySelector("#" + id)
	row.remove()

	if (TableLen(document.querySelector("#table-top-mainpin table")) === 1) {
		Hide("table-top-mainpin")
		Hide("table-bottom-right")
	}

  // this section uhhides pinned table on any `pin` click
  // and for some reason.... selects pinned items with same ids and deletes? i suspect anti bug from mutiple additions
  } else {
	// htmx adds as another element to table
	Unhide("table-top-mainpin")
	Unhide("table-bottom-right")

	rows = document.querySelectorAll("#pin"+id)
	if (rows.length >= 1) {
		for (let i = 1; i < rows.length; i++) {
			rows[i].remove()
		}
	}

	// hide techcompat cells, since they can shift columns in pinned table after row was copied if ID is selected
	// no idea why it happens ;)
	tech_compats = document.querySelectorAll("#table-top-mainpin table .tech_compat");
	for (let i = 1; i < tech_compats.length; i++) {
		if (!tech_compats[i].classList.contains(HIDDEN_CLS)) {
			tech_compats[i].classList.add(HIDDEN_CLS);
		}
	}
	// Here u could add manual copy i think of a row instead of using htmx if u wish
  }
}

templ PinTd(nickname string, name string, pinm PinMod) {
	<td style="display:flex;justify-content:space-between;min-width:50px;">
		<span>
			@frmt.WriteLimit(200) {
				{ name }
			}
		</span>
		if pinm == MainMode {
			<span style="cursor:copy;" class="pin" onClick={ Pin(string(pinm) + "bottominfo_" + nickname) }>pin</span>
		} else {
			<span style="cursor:no-drop;" class="pin" onClick={ Pin(string(pinm) + "bottominfo_" + nickname) }>unpin</span>
		}
	</td>
}

templ PinTd2(nickname string, name string, pinm PinMod, url string) {
	// htmx adding row to table version for performance
	<td style="display:flex;justify-content:space-between;min-width:50px;" class="seo">
		<span>{ name }</span>
		// seems to be using Htmx to add row in a pinned table
		if pinm==MainMode {
			<span
				style="cursor:copy;"
				class="pin"
				onClick={ Pin2(string(pinm) + "bottominfo_" + nickname) }
				hx-get={ types.GetCtx(ctx).SiteRoot + url }
				hx-trigger="mousedown"
				hx-target="#table-top-mainpin table tbody"
				hx-swap="beforeend"
			>pin</span>
		} else {
			<span style="cursor:no-drop;" class="pin" onClick={ Pin2(string(pinm) + "bottominfo_" + nickname) }>unpin</span>
		}
	</td>
}

templ PinSelectLeftRight(pinm PinMod, url string) {
	if pinm == PinMode {
		<td
			class="select_left_infocard_trigger"
			hx-get={ types.GetCtx(ctx).SiteRoot + url }
			hx-trigger="mousedown consume"
			hx-target={ "#table-bottom-main" }
			hx-swap="innerHTML"
			preload="mouseover"
			style="cursor:zoom-in; text-align: center;"
		>&#8592;</td>
		<td
			hx-get={ types.GetCtx(ctx).SiteRoot + url }
			hx-trigger="mousedown"
			hx-target={ "#table-bottom-main" + string(pinm) }
			hx-swap="innerHTML"
			preload="mouseover"
			style="cursor:zoom-in; text-align: center;"
		>&#8594;</td>
	}
}

type InfocardClickOpts struct {
	IsRelayHosted bool
}

templ TdInfoCardClick(infocardKey infocarder.InfocardKey, nickname string, pinm PinMod, shared *types.SharedData, opts InfocardClickOpts) {
	@EmbedInfocardForSearch(shared.Infocarder, infocardKey)
	<td
		if !opts.IsRelayHosted {
			hx-get={ types.GetCtx(ctx).SiteRoot + InfocardURL(infocardKey) }
		} else {
			hx-get={ types.GetCtx(ctx).RelayHost + types.GetCtx(ctx).RelayRoot + InfocardURL(infocardKey) }
		}
		if pinm == PinMode {
			hx-trigger={ "mousedown from:closest tr, click from:previous td.select_left_infocard_trigger" }
		} else {
			hx-trigger={ "mousedown from:closest tr" }
		}
		hx-target="#infocard_view"
		hx-swap="innerHTML"
	></td>
}

type Tr struct {
	nickname                string
	detailed_url            string
	pinm                    PinMod
	is_tranport_unreachable bool
	from_relay              bool
	is_stat_back_prefered   bool
}
type TrOpt func(t *Tr)

func WithTransportUnreachable(is_tranport_unreachable bool) TrOpt {
	return func(t *Tr) {
		t.is_tranport_unreachable = is_tranport_unreachable
	}
}

func WithFromRelay() TrOpt {
	return func(t *Tr) {
		t.from_relay = true
	}
}

func NewTr(nickname string, detailed_url string, pinm PinMod, opts ...TrOpt) *Tr {
	t := &Tr{
		nickname:     nickname,
		detailed_url: detailed_url,
		pinm:         pinm,
	}

	for _, opt := range opts {
		opt(t)
	}

	return t
}

templ TrFromMain(tr *Tr) {
	@TrFromMainTb2(tr, false) {
		{ children... }
	}
}

templ TrFromMainTb(nickname string, detailed_url string, pinm PinMod) {
	@TrFromMainTb2(NewTr(nickname, detailed_url, pinm), false) {
		{ children... }
	}
}

func GetSiteRoot(tr *Tr, ctx context.Context) string {
	if tr.from_relay {
		return types.GetCtx(ctx).RelayHost + types.GetCtx(ctx).RelayRoot
	}

	return types.GetCtx(ctx).SiteRoot
}

templ TrFromMainTb2(tr *Tr, prerender bool) {
	<tr
		id={ string(tr.pinm) + "bottominfo_" + tr.nickname }
		hx-get={ GetSiteRoot(tr, ctx) + tr.detailed_url }
		hx-trigger="mousedown"
		hx-target={ "#table-bottom-main" + string(tr.pinm) }
		hx-swap="innerHTML"
		preload="mouseover"
		class={
			templ.KV("hidden", tr.pinm == PinMode && !prerender),
			templ.KV("line_underline", tr.is_tranport_unreachable),
		}
		onclick="RowHighlighter(this)"
	>
		{ children... }
	</tr>
}
