package front

import (
	"fmt"
	"github.com/darklab8/fl-darkstat/darkstat/configs_export"
	"github.com/darklab8/fl-darkstat/darkstat/configs_export/infocarder"
	"github.com/darklab8/fl-darkstat/darkstat/front/disco"
	"github.com/darklab8/fl-darkstat/darkstat/front/frmt"
	"github.com/darklab8/fl-darkstat/darkstat/front/tab"
	"github.com/darklab8/fl-darkstat/darkstat/front/types"
	"github.com/darklab8/fl-darkstat/darkstat/front/urls"
	"github.com/darklab8/go-utils/utils"
	"strconv"
	"strings"
)

func GunDetailedUrl(gun configs_export.Gun, mode GunTabMode) string {
	if mode == GunsShowBases {
		return "cdn/guns/guns_base-" + strings.ToLower(gun.Nickname)
	} else if mode == GunsShowDamageBonuses {
		return "cdn/guns/guns_bonuses-" + strings.ToLower(gun.Nickname)
	} else if mode == GunsMissiles {
		return "cdn/guns/missiles-" + strings.ToLower(gun.Nickname)
	}

	panic("unsupported choice in GunDetailedUrl")
}

func GunPinnedRowUrl(gun configs_export.Gun, mode GunTabMode) string {
	if mode == GunsShowBases {
		return "guns/pinned/guns_base-" + strings.ToLower(gun.Nickname)
	} else if mode == GunsShowDamageBonuses {
		return "guns/pinned/guns_bonuses-" + strings.ToLower(gun.Nickname)
	} else if mode == GunsMissiles {
		return "guns/pinned/missiles-" + strings.ToLower(gun.Nickname)
	}

	panic("unsupported choice in GunDetailedUrl")
}

type GunTabMode int64

const (
	GunsShowBases GunTabMode = iota
	GunsShowDamageBonuses
	GunsMissiles
)

func GetRefire(gun configs_export.Gun) []string {
	if gun.BurstFire == nil {
		return []string{fmt.Sprintf("%8.2f", gun.Refire)}
	}
	return []string{fmt.Sprintf("%8.2f", gun.BurstFire.SustainedRefire), fmt.Sprintf("( %8.2f )", gun.Refire)}
}

func GetHullPerSec(gun configs_export.Gun) []string {
	if gun.BurstFire == nil {
		return []string{fmt.Sprintf("%8.0f", gun.HullDamagePerSec)}
	}
	return []string{fmt.Sprintf("%8.0f", gun.BurstFire.SustainedHullDamagePerSec), fmt.Sprintf("( %8.0f )", gun.HullDamagePerSec)}
}

func GetShieldPerSec(gun configs_export.Gun) []string {
	if gun.BurstFire == nil {
		return []string{fmt.Sprintf("%8.0f", gun.AvgShieldDamagePerSec)}
	}
	return []string{fmt.Sprintf("%8.0f", gun.BurstFire.SustainedAvgShieldDamagePerSec), fmt.Sprintf("( %8.0f )", gun.AvgShieldDamagePerSec)}
}

func GetEnergyPerSec(gun configs_export.Gun) []string {
	if gun.BurstFire == nil {
		return []string{fmt.Sprintf("%8.0f", gun.EnergyDamagePerSec)}
	}
	return []string{fmt.Sprintf("%8.0f", gun.BurstFire.SustainedEnergyDamagePerSec), fmt.Sprintf("( %8.0f )", gun.EnergyDamagePerSec)}
}

func GetPowerPerSec(gun configs_export.Gun) []string {
	if gun.BurstFire == nil {
		return []string{fmt.Sprintf("%6.0f", gun.PowerUsagePerSec)}
	}
	return []string{fmt.Sprintf("%6.0f", gun.BurstFire.SustainedPowerUsagePerSec), fmt.Sprintf("( %6.0f )", gun.PowerUsagePerSec)}
}

func GetBurstParams(gun configs_export.Gun) []string {
	burst_ammo := ""
	if gun.BurstFire != nil {
		burst_ammo += strconv.Itoa(gun.BurstFire.Ammo)
	}
	if gun.NumBarrels != nil {
		burst_ammo += fmt.Sprintf(" [%d]", *gun.NumBarrels)
	}
	if gun.BurstFire == nil {
		return []string{burst_ammo}
	}

	return []string{burst_ammo, fmt.Sprintf("(%.2f)", gun.BurstFire.ReloadTime)}
}

templ GunTable(guns []configs_export.Gun, mode GunTabMode, pinm tab.PinMod, shared *types.SharedData, infocards *infocarder.Infocarder) {
	<table class="sortable">
		<thead>
			<tr>
				<th style="width:200px;">Gun</th>
				if pinm == tab.PinMode {
					<th style="width:50px;">Select</th>
					<th style="width:50px;">Select</th>
				}
				@disco.ThDisco(shared)
				<th style="width:5px;">Class</th>
				<th style="width:5px;">Type</th>
				<th style="width:5px;">Price</th>
				<th style="width:5px;">Buyable</th>
				if shared.ShowFLSR {
					<th style="width:5px;">Mass</th>
				}
				<th style="width:5px;">
					@frmt.MultiLinestring([]string{"Hull", "dmg"})
				</th>
				<th style="width:5px;">
					@frmt.Tooltip("(Hull Dmg * HullDmgFactor + Energy Dmg) * Avg Shield Dmg Modifier") {
						@frmt.MultiLinestring([]string{"Avg", "Shield", "Dmg"})
					}
				</th>
				<th style="width:5px;">
					@frmt.MultiLinestring([]string{"Energy", "Dmg"})
				</th>
				<th style="width:5px;">
					@frmt.MultiLinestring([]string{"Power", "Usage"})
				</th>
				<th style="width:5px;">
					if shared.ShowDisco {
						@frmt.MultiLinestring([]string{"Refire", "(+Burst.)"})
					} else {
						@frmt.MultiLinestring([]string{"Refire"})
					}
				</th>
				if shared.ShowDisco {
					<th style="width:5px;">
						@frmt.MultiLinestring([]string{"Burst", "Ammo", "[barrels]", "(reload)"})
					</th>
					<th style="width:5px;">
						@frmt.MultiLinestring([]string{"Ammo", "Limit", "(+Max ", "Cart.)"})
					</th>
					<th style="width:5px;">
						@frmt.MultiLinestring([]string{"Armor", "Pen."})
					</th>
				}
				if mode == GunsMissiles {
					<th style="width:50px;">
						@frmt.MultiLinestring([]string{"Max", "Angular", "Velocity"})
					</th>
				}
				if shared.ShowDisco {
					<th style="width:5px;">
						@frmt.MultiLinestring([]string{"Hull", "Dmg/s", "(+Burst.)"})
					</th>
					<th style="width:5px;">
						@frmt.MultiLinestring([]string{"Avg", "Sheld", "Dmg/s", "(+Burst.)"})
					</th>
					<th style="width:5px;">
						@frmt.MultiLinestring([]string{"Energy", "Dmg/s", "(+Burst.)"})
					</th>
					<th style="width:5px;">
						@frmt.MultiLinestring([]string{"Power/s", "(+Burst.)"})
					</th>
				} else {
					<th style="width:5px;">
						@frmt.MultiLinestring([]string{"Hull", "Dmg/s"})
					</th>
					<th style="width:5px;">
						@frmt.MultiLinestring([]string{"Avg", "Sheld", "Dmg/s"})
					</th>
					<th style="width:5px;">
						@frmt.MultiLinestring([]string{"Energy", "Dmg/s"})
					</th>
					<th style="width:5px;">
						@frmt.MultiLinestring([]string{"Power/s"})
					</th>
				}
				<th style="width:5px;">Range</th>
				<th style="width:5px;">Speed</th>
				<th style="width:5px;">
					@frmt.MultiLinestring([]string{"Avg", "Effic."})
				</th>
				<th style="width:5px;">
					@frmt.MultiLinestring([]string{"Anti", "Hull", "Effic."})
				</th>
				<th style="width:5px;">
					@frmt.MultiLinestring([]string{"Anti", "Shield", "Effic."})
				</th>
				<th style="width:5px;">
					@frmt.MultiLinestring([]string{"Anti", "Energy", "Effic."})
				</th>
				<th style="width:5px;">
					@frmt.MultiLinestring([]string{"Gun", "Turn", "Rate"})
				</th>
				<th style="width:5px;">
					@frmt.MultiLinestring([]string{"Dispe", "rsion", "angle"})
				</th>
				<th style="width:5px;">Volume</th>
				<th style="width:5px;">Hit Pts</th>
				<th style="width:5px;">Lootable</th>
				<th style="width:25px;">Technology</th>
				<th style="width:25px;">Nickname</th>
				<th style="width:25px;">HpType</th>
				<th style="width:25px;">Name ID</th>
				<th style="width:25px;">Info ID</th>
				<th style="max-width:100%;"></th>
			</tr>
		</thead>
		<tbody>
			for _, gun := range guns {
				@GunRow(gun, mode, pinm, shared, infocards, false)
			}
		</tbody>
	</table>
}

templ GunRow(gun configs_export.Gun, mode GunTabMode, pinm tab.PinMod, shared *types.SharedData, infocards *infocarder.Infocarder, prerender bool) {
	@tab.TrFromMainTb2(tab.NewTr(gun.Nickname, GunDetailedUrl(gun, mode), pinm), prerender) {
		@tab.PinTd2(gun.Nickname, gun.Name, pinm, GunPinnedRowUrl(gun, mode))
		@tab.PinSelectLeftRight(pinm, GunDetailedUrl(gun, mode))
		@disco.TdDiscoTarget(shared, disco.GetTdDiscoCacheKey(shared, gun.Nickname))
		<td>{ gun.Class }</td>
		<td>{ gun.Type }</td>
		<td>{ strconv.Itoa(gun.Price) } </td>
		<td>{ frmt.FormatBoolAsYesNo(configs_export.Buyable(gun.Bases)) }</td>
		if shared.ShowFLSR {
			<td>{ fmt.Sprintf("%.2f", gun.Mass) }</td>
		}
		<td>{ strconv.Itoa(gun.HullDamage) }</td>
		<td>
			{ strconv.Itoa(gun.AvgShieldDamage) }
		</td>
		<td>{ strconv.Itoa(gun.EnergyDamage) }</td>
		<td>{ fmt.Sprintf("%.1f", gun.PowerUsage) }</td>
		<td>
			@frmt.MultiLinestring(GetRefire(gun))
		</td>
		if shared.ShowDisco {
			<td>
				@frmt.MultiLinestring(GetBurstParams(gun))
			</td>
			<td>{ frmt.GetAmmoLimitFormatted(gun.AmmoLimit) }</td>
			<td>{ fmt.Sprintf("%.0f", gun.DiscoGun.ArmorPen) }</td>
		}
		if mode == GunsMissiles {
			<td>{ fmt.Sprintf("%.4f", gun.Missile.MaxAngularVelocity) }</td>
		}
		<td>
			@frmt.MultiLinestring(GetHullPerSec(gun))
		</td>
		<td>
			@frmt.MultiLinestring(GetShieldPerSec(gun))
		</td>
		<td>
			@frmt.MultiLinestring(GetEnergyPerSec(gun))
		</td>
		<td>
			@frmt.MultiLinestring(GetPowerPerSec(gun))
		</td>
		<td>{ fmt.Sprintf("%.0f", gun.Range) }</td>
		<td>{ fmt.Sprintf("%.0f", gun.Speed) }</td>
		<td>{ fmt.Sprintf("%.4f",gun.AvgEfficiency) }</td>
		<td>{ fmt.Sprintf("%.4f",gun.HullEfficiency) }</td>
		<td>{ fmt.Sprintf("%.4f",gun.ShieldEfficiency) }</td>
		<td>{ fmt.Sprintf("%.4f",gun.EnergyDamageEfficiency) }</td>
		<td>{ fmt.Sprintf("%.0f",gun.GunTurnRate) }</td>
		<td>{ fmt.Sprintf("%.2f",gun.DispersionAngle) }</td>
		<td>{ fmt.Sprintf("%.2f",gun.Volume) }</td>
		<td>{ gun.HitPts }</td>
		<td>{ strconv.FormatBool(gun.Lootable) }</td>
		<td class="seo">{ gun.DamageType }</td>
		<td class="seo">
			{ gun.Nickname }
		</td>
		<td class="seo">{ gun.HpType } </td>
		<td class="seo">{ strconv.Itoa(gun.IdsName) } </td>
		<td class="seo">{ strconv.Itoa(gun.IdsInfo) } </td>
		@tab.TdInfoCardClick(infocarder.InfocardKey(gun.Nickname), gun.Nickname, pinm, shared, tab.InfocardClickOpts{})
	}
}

// https://www.cssscript.com/minimalist-table-sortable/#:~:text=Description%3A-,sorttable.,clicking%20on%20the%20table%20headers
// https://www.cssscript.com/fast-html-table-sorting/
templ GunsT(guns []configs_export.Gun, mode GunTabMode, mode2 tab.ShowEmpty, shared *types.SharedData, infocards *infocarder.Infocarder) {
	if mode == GunsShowBases {
		@TabMenu(urls.Guns, mode2, shared)
	} else if mode == GunsShowDamageBonuses {
		@TabMenu(urls.GunModifiers, mode2, shared)
	} else if mode == GunsMissiles {
		@TabMenu(urls.Missiles, mode2, shared)
	}
	@tab.TabContent() {
		<div class="splitter">
			@tab.LeftTable() {
				@tab.TableTop() {
					@tab.PageHint() {
						if mode == GunsShowBases || mode == GunsShowDamageBonuses {
							Guns.
						}
						if mode == GunsMissiles {
							Missiles.
						}
						if mode == GunsShowBases || mode == GunsMissiles {
							You can equip <a href={ templ.SafeURL(types.GetCtx(ctx).SiteHost + "index_docs.html#Findingequipmentcompatiblewithspecifichardpoint") }>hp_type compatible. See Docs.</a>
						}
						if mode == GunsShowDamageBonuses {
							Attack bonuses again shields.
						}
					}
					@tab.FilterBar(shared)
					<div id="table-top-main">
						@GunTable(guns, mode, tab.MainMode, shared, infocards)
					</div>
					<div id={ "table-top-main" + string(tab.PinMode) } class="hidden">
						@GunTable([]configs_export.Gun{}, mode, tab.PinMode, shared, infocards)
					</div>
				}
				@tab.TableBottom() {
					if mode == GunsShowBases || mode == GunsMissiles {
						@GoodAtBaseSharedT(ShowAsCommodity(false), shared)
					} else {
						@GunShowModifiersShared()
					}
				}
			}
			@tab.InfocardTable() {
				@tab.InfocardShared()
			}
		</div>
		@disco.CacheTechCompatTable(shared, utils.CompL(guns, func(x configs_export.Gun) disco.Item { return x }))
	}
}

templ GunShowModifiersShared() {
	<table class="sortable">
		<thead>
			<tr class="flexed-tr">
				<th style="width:150px;">Technology</th>
				<th style="width:150px;">Target Type</th>
				<th style="width:100px;">Damage Modifier</th>
				<th style="width:100px;">Shield Dmg</th>
				<th style="width:100px;">
					@frmt.MultiLinestring([]string{"Moded", "Shield Dmg"})
				</th>
				<th style="max-width:100%;"></th>
			</tr>
		</thead>
		<tbody>
			{ children... }
		</tbody>
	</table>
}

templ GunShowModifiers(gun configs_export.Gun) {
	<div class="bottom_name">
		{ gun.Name },
		@tab.PageTime()
	</div>
	@GunShowModifiersShared() {
		for _, bonus := range gun.DamageBonuses {
			<tr
				onclick="RowHighlighter(this)"
			>
				<td>{ gun.DamageType }</td>
				<td>{ bonus.Type }</td>
				<td>{ fmt.Sprintf("%.2f", bonus.Modifier) }</td>
				<td>{ strconv.Itoa(int(gun.ShieldDamage)) }</td>
				<td>{ strconv.Itoa(int(float64(gun.ShieldDamage)*bonus.Modifier)) }</td>
				<td></td>
			</tr>
		}
	}
}
