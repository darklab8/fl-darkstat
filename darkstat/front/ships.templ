package front

import (
	"fmt"
	"github.com/darklab8/fl-darkstat/darkstat/configs_export"
	"github.com/darklab8/fl-darkstat/darkstat/front/types"
	"github.com/darklab8/fl-darkstat/darkstat/front/urls"
	"github.com/darklab8/fl-darkstat/darkstat/front/disco"
	"github.com/darklab8/fl-darkstat/darkstat/front/tab"
	"github.com/darklab8/fl-darkstat/darkstat/front/frmt"
	"github.com/darklab8/go-utils/utils"
	"strconv"
	"strings"
)

func ShipDetailedUrl(ship configs_export.Ship, mode ShipTabMode) string {
	if mode == ShipShowBases {
		return "cdn/ships/ships_base_" + strings.ToLower(ship.Nickname)
	} else if mode == ShipShowDetails {
		return "cdn/ships/ships_details_" + strings.ToLower(ship.Nickname)
	}

	panic("unsupported ship mode")
}

func ShipPinnedUrl(ship configs_export.Ship, mode ShipTabMode) string {
	if mode == ShipShowBases {
		return "ships/pinned/ships_base_" + strings.ToLower(ship.Nickname)
	} else if mode == ShipShowDetails {
		return "ships/pinned/ships_details_" + strings.ToLower(ship.Nickname)
	}
	panic("unsupported ship mode")
}

type ShipTabMode int64

const (
	ShipShowBases ShipTabMode = iota
	ShipShowDetails
)


templ ShipTable(
	ships []configs_export.Ship,
	mode ShipTabMode,
	pinm tab.PinMod, shared *types.SharedData, infocards configs_export.Infocards) {
	<table class={ "sortable", templ.KV("top-main", pinm==tab.MainMode), templ.KV("top-pinned", pinm==tab.PinMode) }>
		<thead>
			<tr>
				<th style="width:200px;">Ship</th>
				if pinm == tab.PinMode {
					<th style="width:25px;">Select</th>
					<th style="width:25px;">Select</th>
				}
				@disco.ThDisco(shared)
				<th style="width:25px;">Class</th>
				<th style="width:25px;">Type</th>
				<th style="width:25px;">Price</th>
				<th style="width:25px;">Buyable</th>
				if shared.ShowFLSR {
					<th style="width:5px;">Mass</th>
				}
				<th style="width:25px;">
					@frmt.MultiLinestring([]string{"Cruise", "Speed"})
				</th>
				<th style="width:25px;">
					@frmt.MultiLinestring([]string{"Impulse", "Speed"})
				</th>
				<th style="width:25px;">
					@frmt.MultiLinestring([]string{"Engine", "Max", "Force"})
				</th>
				<th style="width:25px;">
						@frmt.MultiLinestring([]string{"Thrust", "Speed"})
				</th>
				<th style="width:25px;">Armor</th>
				if shared.ShowDisco {
					<th style="width:5px;">
							@frmt.MultiLinestring([]string{"Armor", "Res.",})
					</th>
				}
				<th style="width:25px;">
					@frmt.MultiLinestring([]string{"Hold", "Size"})
				</th>
				<th style="width:25px;">
					@frmt.MultiLinestring([]string{"Nano", "bots"})
				</th>
				<th style="width:25px;">
					@frmt.MultiLinestring([]string{"Shield", "batt."})
				</th>
				<th style="width:25px;">
					@frmt.MultiLinestring([]string{"Max ang", "Speed", "(deg/s)"})
				</th>
				<th style="width:25px;">
					@frmt.MultiLinestring([]string{"Ang dist", "to 0.5 s", "(deg)"})
				</th>
				<th style="width:25px;">
					@frmt.MultiLinestring([]string{"Time to", "90% max", "ang sp.(s)"})
				</th>
				<th style="width:25px;">
					@frmt.MultiLinestring([]string{"Power", "Capacity"})
				</th>
				<th style="width:25px;">
					@frmt.MultiLinestring([]string{"Power", "Recharge", "Rate"})
				</th>
				<th style="width:25px;">
					@frmt.MultiLinestring([]string{"Thrust", "Capacity"})
				</th>
				<th style="width:25px;">
					@frmt.MultiLinestring([]string{"Thrust", "Recharge", "Rate"})
				</th>
				<th style="width:25px;">
					@frmt.MultiLinestring([]string{"Reverse", "Fraction"})
				</th>
				<th style="width:25px;">
					@frmt.MultiLinestring([]string{"Nudge", "Force"})
				</th>
				<th style="width:25px;">
					@frmt.MultiLinestring([]string{"Strafe", "Force"})
				</th>
				<th style="width:25px;">Nickname</th>
				<th style="width:25px;">Name ID</th>
				<th style="width:25px;">Info ID</th>
				<th style="max-width:100%;"></th>
			</tr>
		</thead>
		<tbody>
			for _, ship := range ships {
				@ShipRow(ship, mode, pinm, shared, infocards, false)
			}
		</tbody>
	</table>
}

func thruster_speeds_to_str(thrust_speeds []int) string {
	var as_str []string
	for _, speed := range thrust_speeds{
		as_str = append(as_str, strconv.Itoa(speed))
	}
	return strings.Join(as_str, ",")
}

func FullShipName(ship_name string, ship_nickname string, shared *types.SharedData) string {
	infocard_name := tab.GetShipName(shared.Infocards, configs_export.InfocardKey(ship_nickname))

	if strings.Contains(strings.ToLower(ship_name), strings.ToLower(infocard_name)) {
		return ship_name
	}

	return fmt.Sprintf("%s \"%s\" ", ship_name, infocard_name)
}

templ ShipRow(ship configs_export.Ship, mode ShipTabMode, pinm tab.PinMod, shared *types.SharedData, infocards configs_export.Infocards, prerender bool) {
	@tab.TrFromMainTb2(tab.NewTr(ship.Nickname, ShipDetailedUrl(ship, mode), pinm), prerender) {
		@tab.PinTd2(ship.Nickname, FullShipName(ship.Name, ship.Nickname, shared), pinm, ShipPinnedUrl(ship, mode))
		@tab.PinSelectLeftRight(pinm, ShipDetailedUrl(ship, mode))
		@disco.TdDiscoTarget(shared, disco.GetTdDiscoCacheKey(shared, ship.Nickname))
		<td class="seo">{ strconv.Itoa(ship.Class) }</td>
		<td class="seo">{ ship.Type }</td>
		<td class="seo">{ strconv.Itoa(ship.Price) }</td>
		<td>{ frmt.FormatBoolAsYesNo(configs_export.Buyable(ship.Bases)) }</td>
		if shared.ShowFLSR {
			<td class="seo">{ fmt.Sprintf("%.2f", ship.Mass) }</td>
		}
		<td class="seo">{ strconv.Itoa(ship.CruiseSpeed) }</td>
		<td class="seo">{ fmt.Sprintf("%.0f",ship.ImpulseSpeed) }</td>
		<td class="seo">{ strconv.Itoa(ship.EngineMaxForce) }</td>
		<td class="seo">{ thruster_speeds_to_str(ship.ThrusterSpeed) }</td>
		<td class="seo">{ strconv.Itoa(ship.Armor) } </td>
		if shared.ShowDisco {
			<td class="seo">{ fmt.Sprintf("%4.0f(%.0f%%)", ship.DiscoShip.ArmorMult, 100*ship.DiscoShip.ArmorMult/(100+ship.DiscoShip.ArmorMult ))}</td>
		}
		<td class="seo">{ strconv.Itoa(ship.HoldSize) } </td>
		<td class="seo">{ strconv.Itoa(ship.Nanobots) }</td>
		<td class="seo">{ strconv.Itoa(ship.Batteries) }</td>
		<td>{ fmt.Sprintf("%.2f",ship.MaxAngularSpeedDegS) }</td>
		<td>{ fmt.Sprintf("%.2f",ship.AngularDistanceFrom0ToHalfSec) }</td>
		<td>{ fmt.Sprintf("%.2f",ship.TimeTo90MaxAngularSpeed) }</td>
		<td class="seo">{ strconv.Itoa(ship.PowerCapacity) }</td>
		<td class="seo">{ strconv.Itoa(ship.PowerRechargeRate) }</td>
		<td class="seo">{ strconv.Itoa(ship.ThrustCapacity) }</td>
		<td class="seo">{ strconv.Itoa(ship.ThrustRecharge) }</td>
		<td>{ fmt.Sprintf("%.2f",ship.ReverseFraction) }</td>
		<td>{ fmt.Sprintf("%.2f",ship.NudgeForce) }</td>
		<td>{ fmt.Sprintf("%.2f",ship.StrafeForce) }</td>
		<td class="seo">
			{ ship.Nickname }
		</td>
		<td class="seo">{ strconv.Itoa(ship.NameID) } </td>
		<td class="seo">{ strconv.Itoa(ship.InfoID) } </td>
		@tab.TdInfoCardClick(configs_export.InfocardKey(ship.Nickname), ship.Nickname, pinm, shared, tab.InfocardClickOpts{})
	}
}

// https://www.cssscript.com/minimalist-table-sortable/#:~:text=Description%3A-,sorttable.,clicking%20on%20the%20table%20headers
// https://www.cssscript.com/fast-html-table-sorting/
templ ShipsT(ships []configs_export.Ship, mode ShipTabMode, mode2 tab.ShowEmpty, shared *types.SharedData, infocards configs_export.Infocards) {
	if mode == ShipShowBases {
		@TabMenu(urls.Ships, mode2, shared)
	} else if mode == ShipShowDetails {
		@TabMenu(urls.ShipDetails, mode2, shared)
	}
	@tab.TabContent() {
		<div class="splitter">
			@tab.LeftTable(){
				@tab.TableTop(){
					@tab.FilterBar(shared)
					<div id="table-top-main">
						@ShipTable(ships, mode, tab.MainMode, shared, infocards)
					</div>
					<div id={ "table-top-main" + string(tab.PinMode) } class="hidden">
						@ShipTable([]configs_export.Ship{}, mode, tab.PinMode, shared, infocards)
					</div>
				}
				@tab.TableBottom(){
					<div id="table-bottom-main">
						if mode == ShipShowBases {
							@GoodAtBaseSharedT(ShowAsCommodity(false), shared)
						} else if mode == ShipShowDetails {
							@ShipDetailsShared(configs_export.Ship{Name: "not selected"})
						}
					</div>
					<div id={ "table-bottom-main" + string(tab.PinMode) } class="hidden">
						if mode == ShipShowBases {
							@GoodAtBaseSharedT(ShowAsCommodity(false), shared)
						} else if mode == ShipShowDetails {
							@ShipDetailsShared(configs_export.Ship{Name: "not selected"})
						}
					</div>
				}
			}
			@tab.InfocardTable(){
				@tab.InfocardShared()
			}
		</div>
		@disco.CacheTechCompatTable(shared, utils.CompL(ships, func(x configs_export.Ship) disco.Item { return x }))
	}
}

templ ShipDetailsShared(ship configs_export.Ship) {
	<table class="sortable">
		<thead>
			<tr class="flexed-tr">
				<th style="width:50px;width:50px;">Ship Hardpoint</th>
				for index, _ := range ship.BiggestHardpoint {
					<th style="width:50px;width:50px;">HpType { strconv.Itoa(index) }</th>
				}
				<th style="max-width:100%;"></th>
			</tr>
		</thead>
		<tbody>
			{ children... }
		</tbody>
	</table>
}

templ ShipDetails(ship configs_export.Ship) {
	@tab.BottomFilterBar()
	<div class="bottom_name">{ ship.Name }</div>
	@ShipDetailsShared(ship) {
		for _, slot := range ship.Slots {
			@HighlightableRow() {
				<td>{ slot.SlotName }</td>
				for _, equip := range slot.AllowedEquip {
					<td>{ equip }</td>
				}
				for _, _ = range ship.BiggestHardpoint[len(slot.AllowedEquip):] {
					<td></td>
				}
				<td></td>
			}
		}
	}
}
