package front

import (
	"fmt"
	"github.com/darklab8/fl-darkstat/darkstat/configs_export"
	"github.com/darklab8/fl-darkstat/darkstat/front/frmt"
	"github.com/darklab8/fl-darkstat/darkstat/front/tab"
	"github.com/darklab8/fl-darkstat/darkstat/front/types"
	"github.com/darklab8/fl-darkstat/darkstat/front/urls"
	"strconv"
	"strings"
)

func GoodAtBaseInfoTUrl(commodity *configs_export.Commodity) string {
	return "cdn/commodities/comm_base-" + strings.ToLower(string(configs_export.GetCommodityKey(commodity.Nickname, commodity.ShipClass)))
}

templ CommodityTable(commodities []*configs_export.Commodity, pinm tab.PinMod, shared *types.SharedData) {
	<table class="sortable">
		<thead>
			<tr>
				<th style="width:200px;">Commodity</th>
				if pinm == tab.PinMode {
					<th style="width:25px;">Select</th>
					<th style="width:25px;">Select</th>
				}
				<th style="width:25px;">
					@frmt.MultiLinestring([]string{"Best price", "to buy", "from base"})
				</th>
				<th style="width:25px;">
					@frmt.MultiLinestring([]string{"Best price", "to sell", "to base"})
				</th>
				<th style="width:25px;">
					@frmt.MultiLinestring([]string{"Best buy", "per vol", "from base"})
				</th>
				<th style="width:25px;">
					@frmt.MultiLinestring([]string{"Best sell ", "per vol", "to base"})
				</th>
				<th style="width:25px;">Volume</th>
				if shared.ShowFLSR {
					<th style="width:5px;">Mass</th>
				}
				if shared.ShowDisco {
					<th style="width:5px;">
						@frmt.MultiLinestring([]string{"Ship", "Class"})
					</th>
				}
				<th style="width:25px;">Profit</th>
				<th style="width:25px;">
					@frmt.MultiLinestring([]string{"Profit", "per v. "})
				</th>
				if shared.ShowDisco {
					<th style="width:50px;">
						@frmt.MultiLinestring([]string{"Mining", "Bonuses", "Count"})
					</th>
				}
				<th style="width:25px;">Nickname</th>
				<th style="width:25px;">Name ID</th>
				<th style="width:25px;">Infocard ID</th>
				<th style="max-width:100%;"></th>
			</tr>
		</thead>
		<tbody>
			for _, commodity := range commodities {
				@tab.TrFromMainTb(commodity.Nickname, GoodAtBaseInfoTUrl(commodity), pinm) {
					@tab.PinTd(commodity.Nickname, commodity.Name+frmt.FormattedShipClassOfCommodity(commodity.ShipClass), pinm)
					@tab.PinSelectLeftRight(pinm, GoodAtBaseInfoTUrl(commodity))
					<td>{ strconv.Itoa(commodity.PriceBestBaseSellsFor) }</td>
					<td>{ strconv.Itoa(commodity.PriceBestBaseBuysFor) }</td>
					<td>{ fmt.Sprintf("%.0f", configs_export.GetPricePerVoume(commodity.PriceBestBaseSellsFor, commodity.Volume)) }</td>
					<td>{ fmt.Sprintf("%.0f", configs_export.GetPricePerVoume(commodity.PriceBestBaseBuysFor, commodity.Volume)) }</td>
					<td>{ fmt.Sprintf("%.2f", commodity.Volume) }</td>
					if shared.ShowFLSR {
						<td>{ fmt.Sprintf("%.2f", commodity.Mass) }</td>
					}
					if shared.ShowDisco {
						<td>{ frmt.FormattedShipClassOfCommodity2(commodity.ShipClass) }</td>
					}
					<td>{ strconv.Itoa(commodity.ProffitMargin) }</td>
					<td>{ fmt.Sprintf("%.0f", configs_export.GetPricePerVoume(commodity.ProffitMargin, commodity.Volume)) }</td>
					if shared.ShowDisco {
						<td>{ strconv.Itoa(GetMiningBonusesCountByOre(shared, commodity.Nickname)) }</td>
					}
					<td class="seo">{ commodity.Nickname }</td>
					<td class="seo">{ strconv.Itoa(commodity.NameID) }</td>
					<td class="seo">{ strconv.Itoa(commodity.InfocardID) }</td>
					@tab.TdInfoCardClick(commodity.Infocard, commodity.Nickname, pinm, shared, tab.InfocardClickOpts{})
				}
			}
		</tbody>
	</table>
}

// https://www.cssscript.com/minimalist-table-sortable/#:~:text=Description%3A-,sorttable.,clicking%20on%20the%20table%20headers
// https://www.cssscript.com/fast-html-table-sorting/
templ CommoditiesT(commodities []*configs_export.Commodity, mode tab.ShowEmpty, shared *types.SharedData) {
	@TabMenu(urls.Commodities, mode, shared)
	@tab.TabContent() {
		<div class="splitter">
			@tab.LeftTable() {
				@tab.TableTop() {
					@tab.FilterBar(&types.SharedData{})
					<div id="table-top-main">
						@CommodityTable(commodities, tab.MainMode, shared)
					</div>
					<div id={ "table-top-main" + string(tab.PinMode) } class="hidden">
						@CommodityTable(commodities, tab.PinMode, shared)
					</div>
				}
				@tab.TableBottom() {
					@GoodAtBaseSharedT(ShowAsCommodity(true), shared)
				}
			}
			@tab.InfocardTable() {
				@tab.InfocardShared()
			}
		</div>
	}
}
