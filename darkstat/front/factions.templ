package front

import (
	"fmt"
	"github.com/darklab8/fl-darkstat/configs/config_consts"
	"github.com/darklab8/fl-darkstat/darkstat/configs_export"
	"github.com/darklab8/fl-darkstat/darkstat/front/types"
	"github.com/darklab8/fl-darkstat/darkstat/front/urls"
	"github.com/darklab8/fl-darkstat/darkstat/front/frmt"
	"github.com/darklab8/fl-darkstat/darkstat/front/tab"
	"strconv"
	"strings"
)

func FactionRepUrl(faction configs_export.Faction, mode FactionTabMode) string {

	if mode == FactionShowBases {
		return "cdn/factions/rep_" + strings.ToLower(faction.Nickname)
	} else if mode == FactionShowRephacks {
		return "cdn/rephacks/rep_" + strings.ToLower(faction.Nickname)
	} else {
		return ""
	}
}

type FactionTabMode int64

const (
	FactionShowBases FactionTabMode = iota
	FactionShowRephacks
)

templ FactionTable(factions []configs_export.Faction, mode FactionTabMode, pinm tab.PinMod, shared *types.SharedData) {
	<table class="sortable">
		<thead>
			<tr>
				<th style="width:200px;">Name</th>
				if pinm == tab.PinMode {
					<th style="width:50px;">Select</th>
					<th style="width:50px;">Select</th>
				}
				<th style="width:50px;">Short Name</th>
				<th style="width:50px;">Nickname</th>
				if mode == FactionShowRephacks {
					<th style="width:50px;">
						@frmt.MultiLinestring([]string{"Has", "Rep","hacks"})
					</th>
				}
				<th style="width:50px;">
					@frmt.MultiLinestring([]string{"Obj. Destr.", "Rep.Cng."})
				</th>
				<th style="width:50px;">
					@frmt.MultiLinestring([]string{"Mission Win", "Rep.Cng."})
				</th>
				<th style="width:50px;">
					@frmt.MultiLinestring([]string{"Mission Fail", "Rep.Cng."})
				</th>
				<th style="width:50px;">
					@frmt.MultiLinestring([]string{"Mission Abort", "Rep.Cng."})
				</th>
				<th style="width:50px;">InfonameID</th>
				<th style="width:50px;">InfocardID</th>
				<th style="max-width:100%;"></th>
			</tr>
		</thead>
		<tbody>
			for _, faction := range factions {
				@tab.TrFromMainTb(faction.Nickname, FactionRepUrl(faction, mode), pinm) {
					@tab.PinTd(faction.Nickname, faction.Name, pinm)
					@tab.PinSelectLeftRight(pinm, FactionRepUrl(faction, mode))
					<td class="seo">{ faction.ShortName }</td>
					<td class="seo">{ faction.Nickname }</td>
					if mode == FactionShowRephacks {
						<td>{ strconv.FormatBool(len(faction.Bribes) > 0) }</td>
					}
					<td>{ fmt.Sprintf("%.2f", faction.ObjectDestruction) }</td>
					<td>{ fmt.Sprintf("%.2f", faction.MissionSuccess) }</td>
					<td>{ fmt.Sprintf("%.2f", faction.MissionFailure) }</td>
					<td>{ fmt.Sprintf("%.2f", faction.MissionAbort) }</td>
					<td class="seo">{ strconv.Itoa(faction.InfonameID) }</td>
					<td class="seo">{ strconv.Itoa(faction.InfocardID) }</td>
					@tab.TdInfoCardClick(faction.InfocardKey, faction.Nickname, pinm, shared, tab.InfocardClickOpts{})
				}
			}
		</tbody>
	</table>
}

// https://www.cssscript.com/minimalist-table-sortable/#:~:text=Description%3A-,sorttable.,clicking%20on%20the%20table%20headers
// https://www.cssscript.com/fast-html-table-sorting/
templ FactionsT(factions []configs_export.Faction, mode FactionTabMode, mode2 tab.ShowEmpty, shared *types.SharedData) {
	if mode == FactionShowBases {
		@TabMenu(urls.Factions, mode2, shared)
	} else if mode == FactionShowRephacks {
		@TabMenu(urls.Bribes, mode2, shared)
	}
	@tab.TabContent() {
		<div class="splitter">
			@tab.LeftTable(){
				@tab.TableTop(){
					@tab.FilterBar(&types.SharedData{})
					<div id="table-top-main">
						@FactionTable(factions, mode, tab.MainMode, shared)
					</div>
					<div id={ "table-top-main" + string(tab.PinMode) } class="hidden">
						@FactionTable(factions, mode, tab.PinMode, shared)
					</div>
				}
				@tab.TableBottom(){
					<div id="table-bottom-main">
						if mode == FactionShowBases {
							@FactionRepsBase()
						} else if mode == FactionShowRephacks {
							@BriberyBottomBase()
						}
					</div>
					<div id={ "table-bottom-main" + string(tab.PinMode) } class="hidden">
						if mode == FactionShowBases {
							@FactionRepsBase()
						} else if mode == FactionShowRephacks {
							@BriberyBottomBase()
						}
					</div>
				}
			}
			@tab.InfocardTable(){
				@tab.InfocardShared()
			}
		</div>
	}
}

templ FactionRepsBase() {
	<table class="sortable">
		<thead>
			<tr class="flexed-tr">
				<th style="width:200px;">Name</th>
				<th style="width:100px;">Reputation</th>
				<th style="width:50px;">Empathy Rate</th>
				<th style="width:50px;">Relationship</th>
				<th style="width:50px;">Nickname</th>
				<th style="max-width:100%;"></th>
			</tr>
		</thead>
		<tbody>
			{ children... }
		</tbody>
	</table>
}

templ FactionReps(faction configs_export.Faction, reps []configs_export.Reputation) {
	@tab.BottomFilterBar()
	<div class="bottom_name">{ faction.Name }</div>
	@FactionRepsBase() {
		for _, rep := range reps {
			<tr
				hx-get={ types.GetCtx(ctx).SiteRoot + tab.InfocardURL(configs_export.InfocardKey(rep.Nickname)) }
				hx-trigger="click"
				hx-target="#infocard_view"
				hx-swap="innerHTML"
				preload="mouseover"
				onclick="RowHighlighter(this)"
			>
				<td>
					@frmt.WriteRepName(rep.Name)
				</td>
				<td>{ fmt.Sprintf("%.2f", rep.Rep) }</td>
				<td>{ fmt.Sprintf("%.2f", rep.Empathy) }</td>
				<td>{ config_consts.GetRelationshipStatus(rep.Rep).ToStr() }</td>
				<td>{ rep.Nickname }</td>
				<td></td>
			</tr>
		}
	}
}
