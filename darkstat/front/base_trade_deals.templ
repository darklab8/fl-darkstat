package front

import (
	"fmt"
	"github.com/darklab8/fl-darkstat/darkstat/cache"
	"github.com/darklab8/fl-darkstat/darkstat/configs_export"
	"github.com/darklab8/fl-darkstat/darkstat/configs_export/trades"
	"github.com/darklab8/fl-darkstat/darkstat/front/frmt"
	"github.com/darklab8/fl-darkstat/darkstat/front/tab"
	"github.com/darklab8/fl-darkstat/darkstat/front/types"
	"github.com/darklab8/fl-darkstat/darkstat/front/urls"
	"strconv"
)

templ TradeDeals(
	trade_routes *cache.Cached[[]*configs_export.TradeDeal],
	shared *types.SharedData,
	data *configs_export.Exporter,
	mode tab.ShowEmpty,
) {
	@TabMenu(urls.TradeDeals, mode, shared)
	@tab.TabContent() {
		<div class="splitter">
			@tab.LeftTable() {
				<style>
                #table-top {
                    height: 95%;
                    overflow: hidden;
                    border-style: solid;
                    border-width: 1px;
                    border-color: var(--color_border);
                    box-sizing: border-box;

                    display: flex;
                    flex-direction: column;
                }
                </style>
				@tab.PageHint() {
					Best 800 trade routes sorted by formula: 50% of profit/v/s + 50% time weight (linear, 0 at 0min, max at 10min).
					if shared.ShowDisco {
						Excluded less than 5k cargo, and no money at pob.
						@tab.PageTime()
					}
				}
				<div id="table-top" style="height: calc(100% - 15px);">
					@tab.FilterBar(&types.SharedData{})
					<div id="table-top-main" style="height:100%;">
						@TradesTable(trade_routes, shared, data)
					</div>
				</div>
				// @tab.TableBottom(){
				// 	@BaseTradesShared(shared)
				// }
			}
			@tab.InfocardTable() {
				@tab.InfocardShared()
			}
		</div>
	}
}

func getRGBFromValue(value float64) (int, int, int) {
	minValue := 5.0
	maxValue := 25.0

	if value < minValue {
		return 255, 0, 0
	} else if value >= maxValue {
		return 0, 255, 0
	}

	percentage := (value - minValue) / (maxValue - minValue) * 100

	var r, g, b int

	// Transition from Red (255, 0, 0) to Yellow (255, 255, 0)
	if percentage <= 50 {
		r = 255
		g = int(percentage * 5.1) // Gradual increase in Green as percentage increases
		b = 0
	} else {
		// Transition from Yellow (255, 255, 0) to Green (0, 255, 0)
		r = int((1 - (percentage-50)/50) * 255) // Decrease red as percentage increases beyond 50
		g = 255
		b = 0
	}

	return r, g, b
}
func getRgbStrFromValue(input float64) string {
	r, g, b := getRGBFromValue(input)
	return fmt.Sprintf("background:rgba(%d, %d, %d, 0.2);", r, g, b)
}

templ FormatKiloVolumes(kilo_volume float64) {
	<td style={ getRgbStrFromValue(kilo_volume) }>
		{   fmt.Sprintf("%.1f",kilo_volume) }
	</td>
}

templ TradesTable(
	trade_routes *cache.Cached[[]*configs_export.TradeDeal],
	shared *types.SharedData,
	data *configs_export.Exporter,
) {
	<table class="sortable">
		<thead>
			<tr class="flexed-tr">
				<th style="width:100px;">Commodity</th>
				<th style="width:60px;">
					@frmt.MultiLinestring([]string{"From", "System"})
				</th>
				<th style="width:25px;">
					@frmt.MultiLinestring([]string{"From", "Nav", "Map"})
				</th>
				<th style="width:100px;">From. Base</th>
				<th style="width:70px;">
					@frmt.MultiLinestring([]string{"From", "Faction"})
				</th>
				<th style="width:60px;">
					@frmt.MultiLinestring([]string{"Dest.", "System"})
				</th>
				<th style="width:25px;">
					@frmt.MultiLinestring([]string{"Nav", "Map"})
				</th>
				<th style="width:100px;">Dest. Base</th>
				<th style="width:70px;">
					@frmt.MultiLinestring([]string{"Dest.", "Faction"})
				</th>
				<th style="width:50px;">Profit/v</th>
				if shared.ShowDisco {
					<th style="width:25px;">
						@frmt.MultiLinestring([]string{"kilo", "volumes", "to trade"})
					</th>
				}
				<th style="width:50px;">
					@frmt.MultiLinestring([]string{"Transport", "Time(sec)"})
				</th>
				if shared.ShowDisco {
					<th style="width:50px;">
						@frmt.MultiLinestring([]string{"Frigate", "Time(sec)"})
					</th>
					<th style="width:50px;">
						@frmt.MultiLinestring([]string{"Freighter", "Time(sec)"})
					</th>
					<th style="width:25px;">
						@frmt.MultiLinestring([]string{"profit", "sum"})
					</th>
				}
				<th style="width:50px;">
					@frmt.MultiLinestring([]string{"Transport", "Profit/v/t", "¢ents/sec"})
				</th>
				if shared.ShowDisco {
					<th style="width:50px;">
						@frmt.MultiLinestring([]string{"Frigate", "Profit/v/t", "¢ents/sec"})
					</th>
					<th style="width:50px;">
						@frmt.MultiLinestring([]string{"Freighter", "Profit/v/t", "¢ents/sec"})
					</th>
				}
				<th style="width:5px;">Vol.</th>
				if shared.ShowDisco {
					<th style="width:5px;">
						@frmt.MultiLinestring([]string{"Ship", "cl."})
					</th>
				}
				<th style="width:100px;">From. Region</th>
				<th style="width:100px;">Dest. Region</th>
				<th style="width:50px;">
					@frmt.MultiLinestring([]string{"Price", "to buy", "from base"})
				</th>
				<th style="width:50px;">
					@frmt.MultiLinestring([]string{"Price", "to sell", "to base"})
				</th>
				<th style="width:50px;">Commodity Nick</th>
				<th style="width:50px;">Dest. Nickname</th>
				<th style="width:50px;">Dest.X</th>
				<th style="width:50px;">Dest.Y</th>
				<th style="width:50px;">Dest.Z</th>
				<th style="width:25px;">
					@frmt.MultiLinestring([]string{"profit", "weight"})
				</th>
				<th style="max-width:100%;"></th>
			</tr>
		</thead>
		<tbody>
			for _, trade_route := range trade_routes.Get(ctx) {
				<tr
					hx-get={ types.GetCtx(ctx).SiteRoot + RouteUrl(trade_route.Transport.Route) }
					hx-trigger="click"
					hx-target="#infocard_view"
					hx-swap="innerHTML"
					preload="mouseover"
					onclick="RowHighlighter(this)"
				>
					<td>
						@frmt.WriteLimit(150) {
							{ trade_route.Transport.SellingGood.Name + frmt.FormattedShipClassOfCommodity(trade_route.Transport.SellingGood.ShipClass) }
						}
					</td>
					<td>
						@frmt.WriteLimit(85) {
							{ "fr."+trade_route.Transport.BuyingGood.SystemName }
						}
					</td>
					<td>{ trade_route.Transport.BuyingGood.SectorCoord }</td>
					<td>
						@frmt.WriteBaseName("fr." + trade_route.Transport.BuyingGood.BaseName)
					</td>
					<td>
						@frmt.WriteLimit(100) {
							{ "fr."+trade_route.Transport.BuyingGood.FactionName }
						}
					</td>
					<td>
						@frmt.WriteLimit(85) {
							{ "to."+trade_route.Transport.SellingGood.SystemName }
						}
					</td>
					<td>{ trade_route.Transport.SellingGood.SectorCoord }</td>
					<td>
						@frmt.WriteBaseName("to." + trade_route.Transport.SellingGood.BaseName)
					</td>
					<td>
						@frmt.WriteLimit(100) {
							{ "to."+trade_route.Transport.SellingGood.FactionName }
						}
					</td>
					<td>{ fmt.Sprintf("%.2f", configs_export.GetPricePerVoume(trade_route.Transport.SellingGood.GetPriceBaseBuysFor() - trade_route.Transport.BuyingGood.PriceBaseSellsFor, trade_route.Transport.BuyingGood.Volume)) }</td>
					if shared.ShowDisco {
						@FormatKiloVolumes(configs_export.KiloVolumesDeliverable(trade_route.Transport.BuyingGood, trade_route.Transport.SellingGood))
					}
					<td>
						<span class="tooltip">
							@TradeRouteHumanTime(trade_route.Transport.Route)
							<span class="tooltiptext">
								if trade_route.Transport.Route.GetTimeMs() < trades.INF/2 {
									{ fmt.Sprintf("%.0f", trade_route.Transport.Route.GetTimeS()) } secs
								} else {
									INF secs
								}
							</span>
						</span>
					</td>
					if shared.ShowDisco {
						<td>
							<span class="tooltip">
								@TradeRouteHumanTime(trade_route.Frigate.Route)
								<span class="tooltiptext">
									if trade_route.Frigate.Route.GetTimeMs() < trades.INF/2 {
										{ fmt.Sprintf("%.0f", trade_route.Frigate.Route.GetTimeS()) } secs
									} else {
										INF secs
									}
								</span>
							</span>
						</td>
						<td>
							<span class="tooltip">
								@TradeRouteHumanTime(trade_route.Freighter.Route)
								<span class="tooltiptext">
									if trade_route.Freighter.Route.GetTimeMs() < trades.INF/2 {
										{ fmt.Sprintf("%.0f", trade_route.Freighter.Route.GetTimeS()) } secs
									} else {
										INF secs
									}
								</span>
							</span>
						</td>
						<td>
							{   fmt.Sprintf("%.1f",trade_route.ProfitPerTimeForKiloVolumes) }
						</td>
					}
					<td class="route_transport">{ fmt.Sprintf("%.2f", trade_route.Transport.GetProffitPerTime() * 100) }</td>
					if shared.ShowDisco {
						<td class="route_frigate">{ fmt.Sprintf("%.2f", trade_route.Frigate.GetProffitPerTime() * 100) }</td>
						<td class="route_freighter">{ fmt.Sprintf("%.2f", trade_route.Freighter.GetProffitPerTime() * 100) }</td>
					}
					<td>{ fmt.Sprintf("%.2f", trade_route.Transport.SellingGood.Volume) }</td>
					if shared.ShowDisco {
						<td>{ frmt.FormattedShipClassOfCommodity2(trade_route.Transport.SellingGood.ShipClass) }</td>
					}
					<td>
						@frmt.WriteRegionName("fr." + trade_route.Transport.BuyingGood.Region)
					</td>
					<td>
						@frmt.WriteRegionName("to." + trade_route.Transport.SellingGood.Region)
					</td>
					<td>{ strconv.Itoa(trade_route.Transport.BuyingGood.PriceBaseSellsFor) }</td>
					<td>{ strconv.Itoa(trade_route.Transport.SellingGood.GetPriceBaseBuysFor()) }</td>
					<td>{ trade_route.Transport.SellingGood.Nickname }</td>
					<td>
						@frmt.WriteLimit(100) {
							{ trade_route.Transport.SellingGood.BaseNickname.ToStr() }
						}
					</td>
					<td>{ fmt.Sprintf("%.0f", trade_route.Transport.SellingGood.BasePos.X) }</td>
					<td>{ fmt.Sprintf("%.0f", trade_route.Transport.SellingGood.BasePos.Y) }</td>
					<td>{ fmt.Sprintf("%.0f", trade_route.Transport.SellingGood.BasePos.Z) }</td>
					<td>{   fmt.Sprintf("%.1f",trade_route.ProfitWeight) }</td>
					<td></td>
				</tr>
			}
		</tbody>
	</table>
}
